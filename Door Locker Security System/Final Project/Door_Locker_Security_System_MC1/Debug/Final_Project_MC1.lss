
Final_Project_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000343e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d4  00800060  0000343e  000034d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800134  00800134  000035a6  2**0
                  ALLOC
  3 .stab         000030e4  00000000  00000000  000035a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000181e  00000000  00000000  0000668c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007fea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000815a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009da3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ac8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ba3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bb9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000be29  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c5f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 87 17 	jmp	0x2f0e	; 0x2f0e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 ba 17 	jmp	0x2f74	; 0x2f74 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e3       	ldi	r30, 0x3E	; 62
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 33       	cpi	r26, 0x34	; 52
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e3       	ldi	r26, 0x34	; 52
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 33       	cpi	r26, 0x3A	; 58
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 1d 1a 	jmp	0x343a	; 0x343a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a1 19 	jmp	0x3342	; 0x3342 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e2       	ldi	r26, 0x24	; 36
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bd 19 	jmp	0x337a	; 0x337a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ad 19 	jmp	0x335a	; 0x335a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ad 19 	jmp	0x335a	; 0x335a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a1 19 	jmp	0x3342	; 0x3342 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	84 e2       	ldi	r24, 0x24	; 36
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bd 19 	jmp	0x337a	; 0x337a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ad 19 	jmp	0x335a	; 0x335a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ad 19 	jmp	0x335a	; 0x335a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ad 19 	jmp	0x335a	; 0x335a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b1 19 	jmp	0x3362	; 0x3362 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 cd 19 	jmp	0x339a	; 0x339a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:

/*******************************************************************************
 *                    	     	   Main Application                            *
 *******************************************************************************/
int main(void)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c9 57       	subi	r28, 0x79	; 121
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
	uint8 passwordFirstSave[PASSWORD_SIZE]; 	/* Array for the first password. */
	uint8 passwordSecondSave[PASSWORD_SIZE];	/* Array for the Repeated password. */
	uint8 passwordEnterData[PASSWORD_SIZE];		/* Array to save the values of the password that the user will provide to open the door. */

	uint8 optionsStatus = 0;					/* To save the value that came from keypad to select from the options. */
     b60:	fe 01       	movw	r30, r28
     b62:	e7 5a       	subi	r30, 0xA7	; 167
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	10 82       	st	Z, r1

	uint8 passwordCompareResult = FALSE;		/* To hold the the value of TRUE or FALSE to confirm if the password is saved correctly or not. */
     b68:	fe 01       	movw	r30, r28
     b6a:	e8 5a       	subi	r30, 0xA8	; 168
     b6c:	ff 4f       	sbci	r31, 0xFF	; 255
     b6e:	10 82       	st	Z, r1
	uint8 receivedPasswordStatus = FALSE;		/* To know if the received password is correct or not. */
     b70:	fe 01       	movw	r30, r28
     b72:	e9 5a       	subi	r30, 0xA9	; 169
     b74:	ff 4f       	sbci	r31, 0xFF	; 255
     b76:	10 82       	st	Z, r1
	uint8 passwordStatus = 0;					/* To know from MC2 if the password that send from MC1 is correct or not. */
     b78:	fe 01       	movw	r30, r28
     b7a:	ea 5a       	subi	r30, 0xAA	; 170
     b7c:	ff 4f       	sbci	r31, 0xFF	; 255
     b7e:	10 82       	st	Z, r1
	uint8 buzzerStatus	 = 0;					/* To know from MC2 if the buzzer is active or not. */
     b80:	fe 01       	movw	r30, r28
     b82:	eb 5a       	subi	r30, 0xAB	; 171
     b84:	ff 4f       	sbci	r31, 0xFF	; 255
     b86:	10 82       	st	Z, r1

	/*********************************************
	 *				Drivers initiation 			 *
	 *********************************************/
	/* Enable Global Interrupt I-Bit. */
	SREG |= (1<<7);
     b88:	af e5       	ldi	r26, 0x5F	; 95
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	ef e5       	ldi	r30, 0x5F	; 95
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	80 68       	ori	r24, 0x80	; 128
     b94:	8c 93       	st	X, r24

	/* Activate LCD */
	LCD_init();
     b96:	0e 94 1e 12 	call	0x243c	; 0x243c <LCD_init>

	/* Initiate timer0 configuration. */
	TIMER0_ConfigType TIMER0_config = {TIMER_OVERFLOW_MODE, OC0_DISCONNECTED, F_CPU_1024, DISABLE_CTC_INTERRUPT, ENABLE_OVF_INTERRUPT};
     b9a:	ce 01       	movw	r24, r28
     b9c:	8a 59       	subi	r24, 0x9A	; 154
     b9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ba0:	27 e0       	ldi	r18, 0x07	; 7
     ba2:	fc 01       	movw	r30, r24
     ba4:	df 01       	movw	r26, r30
     ba6:	82 2f       	mov	r24, r18
     ba8:	1d 92       	st	X+, r1
     baa:	8a 95       	dec	r24
     bac:	e9 f7       	brne	.-6      	; 0xba8 <main+0x62>
     bae:	fe 01       	movw	r30, r28
     bb0:	ea 59       	subi	r30, 0x9A	; 154
     bb2:	ff 4f       	sbci	r31, 0xFF	; 255
     bb4:	85 e0       	ldi	r24, 0x05	; 5
     bb6:	82 83       	std	Z+2, r24	; 0x02
     bb8:	fe 01       	movw	r30, r28
     bba:	ea 59       	subi	r30, 0x9A	; 154
     bbc:	ff 4f       	sbci	r31, 0xFF	; 255
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	84 83       	std	Z+4, r24	; 0x04

	/* Activate UART with double speed and eight_bit character size. the baud rate = 9600 bps (using interrupt when receiving a bit). */
	UART_ConfigType UART_config = {DOUBLE_SPEED, ASYNCHRONOUS, RISING, PARITY_DISABLED, ONE_STOP_BIT, EIGHT_BIT, RX_INTERRUPT_DISABLE, TX_INTERRUPT_DISABLE}; /* UART registers configuration */
     bc2:	ce 01       	movw	r24, r28
     bc4:	83 59       	subi	r24, 0x93	; 147
     bc6:	9f 4f       	sbci	r25, 0xFF	; 255
     bc8:	e7 96       	adiw	r28, 0x37	; 55
     bca:	9f af       	std	Y+63, r25	; 0x3f
     bcc:	8e af       	std	Y+62, r24	; 0x3e
     bce:	e7 97       	sbiw	r28, 0x37	; 55
     bd0:	ac e2       	ldi	r26, 0x2C	; 44
     bd2:	b1 e0       	ldi	r27, 0x01	; 1
     bd4:	e9 96       	adiw	r28, 0x39	; 57
     bd6:	bf af       	std	Y+63, r27	; 0x3f
     bd8:	ae af       	std	Y+62, r26	; 0x3e
     bda:	e9 97       	sbiw	r28, 0x39	; 57
     bdc:	b8 e0       	ldi	r27, 0x08	; 8
     bde:	ea 96       	adiw	r28, 0x3a	; 58
     be0:	bf af       	std	Y+63, r27	; 0x3f
     be2:	ea 97       	sbiw	r28, 0x3a	; 58
     be4:	e9 96       	adiw	r28, 0x39	; 57
     be6:	ee ad       	ldd	r30, Y+62	; 0x3e
     be8:	ff ad       	ldd	r31, Y+63	; 0x3f
     bea:	e9 97       	sbiw	r28, 0x39	; 57
     bec:	00 80       	ld	r0, Z
     bee:	e9 96       	adiw	r28, 0x39	; 57
     bf0:	8e ad       	ldd	r24, Y+62	; 0x3e
     bf2:	9f ad       	ldd	r25, Y+63	; 0x3f
     bf4:	e9 97       	sbiw	r28, 0x39	; 57
     bf6:	01 96       	adiw	r24, 0x01	; 1
     bf8:	e9 96       	adiw	r28, 0x39	; 57
     bfa:	9f af       	std	Y+63, r25	; 0x3f
     bfc:	8e af       	std	Y+62, r24	; 0x3e
     bfe:	e9 97       	sbiw	r28, 0x39	; 57
     c00:	e7 96       	adiw	r28, 0x37	; 55
     c02:	ae ad       	ldd	r26, Y+62	; 0x3e
     c04:	bf ad       	ldd	r27, Y+63	; 0x3f
     c06:	e7 97       	sbiw	r28, 0x37	; 55
     c08:	0c 92       	st	X, r0
     c0a:	e7 96       	adiw	r28, 0x37	; 55
     c0c:	ee ad       	ldd	r30, Y+62	; 0x3e
     c0e:	ff ad       	ldd	r31, Y+63	; 0x3f
     c10:	e7 97       	sbiw	r28, 0x37	; 55
     c12:	31 96       	adiw	r30, 0x01	; 1
     c14:	e7 96       	adiw	r28, 0x37	; 55
     c16:	ff af       	std	Y+63, r31	; 0x3f
     c18:	ee af       	std	Y+62, r30	; 0x3e
     c1a:	e7 97       	sbiw	r28, 0x37	; 55
     c1c:	ea 96       	adiw	r28, 0x3a	; 58
     c1e:	ff ad       	ldd	r31, Y+63	; 0x3f
     c20:	ea 97       	sbiw	r28, 0x3a	; 58
     c22:	f1 50       	subi	r31, 0x01	; 1
     c24:	ea 96       	adiw	r28, 0x3a	; 58
     c26:	ff af       	std	Y+63, r31	; 0x3f
     c28:	ea 97       	sbiw	r28, 0x3a	; 58
     c2a:	ea 96       	adiw	r28, 0x3a	; 58
     c2c:	8f ad       	ldd	r24, Y+63	; 0x3f
     c2e:	ea 97       	sbiw	r28, 0x3a	; 58
     c30:	88 23       	and	r24, r24
     c32:	c1 f6       	brne	.-80     	; 0xbe4 <main+0x9e>
	UART_init(BAUD, &UART_config);
     c34:	9e 01       	movw	r18, r28
     c36:	23 59       	subi	r18, 0x93	; 147
     c38:	3f 4f       	sbci	r19, 0xFF	; 255
     c3a:	60 e8       	ldi	r22, 0x80	; 128
     c3c:	75 e2       	ldi	r23, 0x25	; 37
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	a9 01       	movw	r20, r18
     c44:	0e 94 ed 17 	call	0x2fda	; 0x2fda <UART_init>
     c48:	86 c1       	rjmp	.+780    	; 0xf56 <main+0x410>
	 *	 Save The Password For The First Time	 *
	 *********************************************/
	/* Check each time if the  repeated password is not correct repeat the process. */
	while(passwordCompareResult != TRUE)
	{
		PASSWORD_saveData(passwordFirstSave, passwordSecondSave);										  /* Get password values from the user */
     c4a:	ce 01       	movw	r24, r28
     c4c:	86 5a       	subi	r24, 0xA6	; 166
     c4e:	9f 4f       	sbci	r25, 0xFF	; 255
     c50:	9e 01       	movw	r18, r28
     c52:	22 5a       	subi	r18, 0xA2	; 162
     c54:	3f 4f       	sbci	r19, 0xFF	; 255
     c56:	b9 01       	movw	r22, r18
     c58:	0e 94 df 0b 	call	0x17be	; 0x17be <PASSWORD_saveData>
		passwordCompareResult = PASSWORD_compareFirstSecondValues(passwordFirstSave, passwordSecondSave); /* Check if the password is correct or not */
     c5c:	ce 01       	movw	r24, r28
     c5e:	86 5a       	subi	r24, 0xA6	; 166
     c60:	9f 4f       	sbci	r25, 0xFF	; 255
     c62:	9e 01       	movw	r18, r28
     c64:	22 5a       	subi	r18, 0xA2	; 162
     c66:	3f 4f       	sbci	r19, 0xFF	; 255
     c68:	b9 01       	movw	r22, r18
     c6a:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <PASSWORD_compareFirstSecondValues>
     c6e:	fe 01       	movw	r30, r28
     c70:	e8 5a       	subi	r30, 0xA8	; 168
     c72:	ff 4f       	sbci	r31, 0xFF	; 255
     c74:	80 83       	st	Z, r24
		/* Check if the repeated password is correct or not, if correct send it to MC2 to save it in EEPROM. */
		if(passwordCompareResult == TRUE)
     c76:	fe 01       	movw	r30, r28
     c78:	e8 5a       	subi	r30, 0xA8	; 168
     c7a:	ff 4f       	sbci	r31, 0xFF	; 255
     c7c:	80 81       	ld	r24, Z
     c7e:	81 30       	cpi	r24, 0x01	; 1
     c80:	49 f4       	brne	.+18     	; 0xc94 <main+0x14e>
		{
			UART_sendByte(FIRST_PASSWORD); 			/* Send Change command Password to the MC2 */
     c82:	81 ef       	ldi	r24, 0xF1	; 241
     c84:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <UART_sendByte>
			PASSWORD_sendData(passwordFirstSave);	/* Send Password */
     c88:	ce 01       	movw	r24, r28
     c8a:	86 5a       	subi	r24, 0xA6	; 166
     c8c:	9f 4f       	sbci	r25, 0xFF	; 255
     c8e:	0e 94 bd 0b 	call	0x177a	; 0x177a <PASSWORD_sendData>
     c92:	5f c1       	rjmp	.+702    	; 0xf52 <main+0x40c>
		}

		/* If the repeated password is not correct the process will be repeated. */
		else if(passwordCompareResult == FALSE)
     c94:	fe 01       	movw	r30, r28
     c96:	e8 5a       	subi	r30, 0xA8	; 168
     c98:	ff 4f       	sbci	r31, 0xFF	; 255
     c9a:	80 81       	ld	r24, Z
     c9c:	88 23       	and	r24, r24
     c9e:	09 f0       	breq	.+2      	; 0xca2 <main+0x15c>
     ca0:	58 c1       	rjmp	.+688    	; 0xf52 <main+0x40c>
		{
			/* in case of wrong password, inform the user he repeated the password wrongly. So, the process must be repeated. */
			LCD_clearScreen();	/* Clear the screen to present new statement on it. */
     ca2:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "Repeated Password");
     ca6:	20 e6       	ldi	r18, 0x60	; 96
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	a9 01       	movw	r20, r18
     cb0:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 4, "is Wrong");
     cb4:	22 e7       	ldi	r18, 0x72	; 114
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	64 e0       	ldi	r22, 0x04	; 4
     cbc:	a9 01       	movw	r20, r18
     cbe:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_displayStringRowColumn>
     cc2:	fe 01       	movw	r30, r28
     cc4:	ef 5a       	subi	r30, 0xAF	; 175
     cc6:	ff 4f       	sbci	r31, 0xFF	; 255
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	aa e7       	ldi	r26, 0x7A	; 122
     cce:	b4 e4       	ldi	r27, 0x44	; 68
     cd0:	80 83       	st	Z, r24
     cd2:	91 83       	std	Z+1, r25	; 0x01
     cd4:	a2 83       	std	Z+2, r26	; 0x02
     cd6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cd8:	8e 01       	movw	r16, r28
     cda:	03 5b       	subi	r16, 0xB3	; 179
     cdc:	1f 4f       	sbci	r17, 0xFF	; 255
     cde:	fe 01       	movw	r30, r28
     ce0:	ef 5a       	subi	r30, 0xAF	; 175
     ce2:	ff 4f       	sbci	r31, 0xFF	; 255
     ce4:	60 81       	ld	r22, Z
     ce6:	71 81       	ldd	r23, Z+1	; 0x01
     ce8:	82 81       	ldd	r24, Z+2	; 0x02
     cea:	93 81       	ldd	r25, Z+3	; 0x03
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	4a ef       	ldi	r20, 0xFA	; 250
     cf2:	54 e4       	ldi	r21, 0x44	; 68
     cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cf8:	dc 01       	movw	r26, r24
     cfa:	cb 01       	movw	r24, r22
     cfc:	f8 01       	movw	r30, r16
     cfe:	80 83       	st	Z, r24
     d00:	91 83       	std	Z+1, r25	; 0x01
     d02:	a2 83       	std	Z+2, r26	; 0x02
     d04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d06:	fe 01       	movw	r30, r28
     d08:	e3 5b       	subi	r30, 0xB3	; 179
     d0a:	ff 4f       	sbci	r31, 0xFF	; 255
     d0c:	60 81       	ld	r22, Z
     d0e:	71 81       	ldd	r23, Z+1	; 0x01
     d10:	82 81       	ldd	r24, Z+2	; 0x02
     d12:	93 81       	ldd	r25, Z+3	; 0x03
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	40 e8       	ldi	r20, 0x80	; 128
     d1a:	5f e3       	ldi	r21, 0x3F	; 63
     d1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d20:	88 23       	and	r24, r24
     d22:	44 f4       	brge	.+16     	; 0xd34 <main+0x1ee>
		__ticks = 1;
     d24:	fe 01       	movw	r30, r28
     d26:	e5 5b       	subi	r30, 0xB5	; 181
     d28:	ff 4f       	sbci	r31, 0xFF	; 255
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	91 83       	std	Z+1, r25	; 0x01
     d30:	80 83       	st	Z, r24
     d32:	64 c0       	rjmp	.+200    	; 0xdfc <main+0x2b6>
	else if (__tmp > 65535)
     d34:	fe 01       	movw	r30, r28
     d36:	e3 5b       	subi	r30, 0xB3	; 179
     d38:	ff 4f       	sbci	r31, 0xFF	; 255
     d3a:	60 81       	ld	r22, Z
     d3c:	71 81       	ldd	r23, Z+1	; 0x01
     d3e:	82 81       	ldd	r24, Z+2	; 0x02
     d40:	93 81       	ldd	r25, Z+3	; 0x03
     d42:	20 e0       	ldi	r18, 0x00	; 0
     d44:	3f ef       	ldi	r19, 0xFF	; 255
     d46:	4f e7       	ldi	r20, 0x7F	; 127
     d48:	57 e4       	ldi	r21, 0x47	; 71
     d4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d4e:	18 16       	cp	r1, r24
     d50:	0c f0       	brlt	.+2      	; 0xd54 <main+0x20e>
     d52:	43 c0       	rjmp	.+134    	; 0xdda <main+0x294>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d54:	fe 01       	movw	r30, r28
     d56:	ef 5a       	subi	r30, 0xAF	; 175
     d58:	ff 4f       	sbci	r31, 0xFF	; 255
     d5a:	60 81       	ld	r22, Z
     d5c:	71 81       	ldd	r23, Z+1	; 0x01
     d5e:	82 81       	ldd	r24, Z+2	; 0x02
     d60:	93 81       	ldd	r25, Z+3	; 0x03
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	40 e2       	ldi	r20, 0x20	; 32
     d68:	51 e4       	ldi	r21, 0x41	; 65
     d6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d6e:	dc 01       	movw	r26, r24
     d70:	cb 01       	movw	r24, r22
     d72:	8e 01       	movw	r16, r28
     d74:	05 5b       	subi	r16, 0xB5	; 181
     d76:	1f 4f       	sbci	r17, 0xFF	; 255
     d78:	bc 01       	movw	r22, r24
     d7a:	cd 01       	movw	r24, r26
     d7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	f8 01       	movw	r30, r16
     d86:	91 83       	std	Z+1, r25	; 0x01
     d88:	80 83       	st	Z, r24
     d8a:	1f c0       	rjmp	.+62     	; 0xdca <main+0x284>
     d8c:	fe 01       	movw	r30, r28
     d8e:	e7 5b       	subi	r30, 0xB7	; 183
     d90:	ff 4f       	sbci	r31, 0xFF	; 255
     d92:	88 ec       	ldi	r24, 0xC8	; 200
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	91 83       	std	Z+1, r25	; 0x01
     d98:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d9a:	fe 01       	movw	r30, r28
     d9c:	e7 5b       	subi	r30, 0xB7	; 183
     d9e:	ff 4f       	sbci	r31, 0xFF	; 255
     da0:	80 81       	ld	r24, Z
     da2:	91 81       	ldd	r25, Z+1	; 0x01
     da4:	01 97       	sbiw	r24, 0x01	; 1
     da6:	f1 f7       	brne	.-4      	; 0xda4 <main+0x25e>
     da8:	fe 01       	movw	r30, r28
     daa:	e7 5b       	subi	r30, 0xB7	; 183
     dac:	ff 4f       	sbci	r31, 0xFF	; 255
     dae:	91 83       	std	Z+1, r25	; 0x01
     db0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     db2:	de 01       	movw	r26, r28
     db4:	a5 5b       	subi	r26, 0xB5	; 181
     db6:	bf 4f       	sbci	r27, 0xFF	; 255
     db8:	fe 01       	movw	r30, r28
     dba:	e5 5b       	subi	r30, 0xB5	; 181
     dbc:	ff 4f       	sbci	r31, 0xFF	; 255
     dbe:	80 81       	ld	r24, Z
     dc0:	91 81       	ldd	r25, Z+1	; 0x01
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	11 96       	adiw	r26, 0x01	; 1
     dc6:	9c 93       	st	X, r25
     dc8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dca:	fe 01       	movw	r30, r28
     dcc:	e5 5b       	subi	r30, 0xB5	; 181
     dce:	ff 4f       	sbci	r31, 0xFF	; 255
     dd0:	80 81       	ld	r24, Z
     dd2:	91 81       	ldd	r25, Z+1	; 0x01
     dd4:	00 97       	sbiw	r24, 0x00	; 0
     dd6:	d1 f6       	brne	.-76     	; 0xd8c <main+0x246>
     dd8:	27 c0       	rjmp	.+78     	; 0xe28 <main+0x2e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dda:	8e 01       	movw	r16, r28
     ddc:	05 5b       	subi	r16, 0xB5	; 181
     dde:	1f 4f       	sbci	r17, 0xFF	; 255
     de0:	fe 01       	movw	r30, r28
     de2:	e3 5b       	subi	r30, 0xB3	; 179
     de4:	ff 4f       	sbci	r31, 0xFF	; 255
     de6:	60 81       	ld	r22, Z
     de8:	71 81       	ldd	r23, Z+1	; 0x01
     dea:	82 81       	ldd	r24, Z+2	; 0x02
     dec:	93 81       	ldd	r25, Z+3	; 0x03
     dee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     df2:	dc 01       	movw	r26, r24
     df4:	cb 01       	movw	r24, r22
     df6:	f8 01       	movw	r30, r16
     df8:	91 83       	std	Z+1, r25	; 0x01
     dfa:	80 83       	st	Z, r24
     dfc:	de 01       	movw	r26, r28
     dfe:	a9 5b       	subi	r26, 0xB9	; 185
     e00:	bf 4f       	sbci	r27, 0xFF	; 255
     e02:	fe 01       	movw	r30, r28
     e04:	e5 5b       	subi	r30, 0xB5	; 181
     e06:	ff 4f       	sbci	r31, 0xFF	; 255
     e08:	80 81       	ld	r24, Z
     e0a:	91 81       	ldd	r25, Z+1	; 0x01
     e0c:	8d 93       	st	X+, r24
     e0e:	9c 93       	st	X, r25
     e10:	fe 01       	movw	r30, r28
     e12:	e9 5b       	subi	r30, 0xB9	; 185
     e14:	ff 4f       	sbci	r31, 0xFF	; 255
     e16:	80 81       	ld	r24, Z
     e18:	91 81       	ldd	r25, Z+1	; 0x01
     e1a:	01 97       	sbiw	r24, 0x01	; 1
     e1c:	f1 f7       	brne	.-4      	; 0xe1a <main+0x2d4>
     e1e:	fe 01       	movw	r30, r28
     e20:	e9 5b       	subi	r30, 0xB9	; 185
     e22:	ff 4f       	sbci	r31, 0xFF	; 255
     e24:	91 83       	std	Z+1, r25	; 0x01
     e26:	80 83       	st	Z, r24
			_delay_ms(1000);
			LCD_clearScreen();	/* Clear the screen to present new statement on it. */
     e28:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 3, "Repeat the");
     e2c:	2b e7       	ldi	r18, 0x7B	; 123
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	63 e0       	ldi	r22, 0x03	; 3
     e34:	a9 01       	movw	r20, r18
     e36:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 4, "Process");
     e3a:	26 e8       	ldi	r18, 0x86	; 134
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	64 e0       	ldi	r22, 0x04	; 4
     e42:	a9 01       	movw	r20, r18
     e44:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_displayStringRowColumn>
     e48:	fe 01       	movw	r30, r28
     e4a:	ed 5b       	subi	r30, 0xBD	; 189
     e4c:	ff 4f       	sbci	r31, 0xFF	; 255
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	aa e7       	ldi	r26, 0x7A	; 122
     e54:	b4 e4       	ldi	r27, 0x44	; 68
     e56:	80 83       	st	Z, r24
     e58:	91 83       	std	Z+1, r25	; 0x01
     e5a:	a2 83       	std	Z+2, r26	; 0x02
     e5c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e5e:	8e 01       	movw	r16, r28
     e60:	01 5c       	subi	r16, 0xC1	; 193
     e62:	1f 4f       	sbci	r17, 0xFF	; 255
     e64:	fe 01       	movw	r30, r28
     e66:	ed 5b       	subi	r30, 0xBD	; 189
     e68:	ff 4f       	sbci	r31, 0xFF	; 255
     e6a:	60 81       	ld	r22, Z
     e6c:	71 81       	ldd	r23, Z+1	; 0x01
     e6e:	82 81       	ldd	r24, Z+2	; 0x02
     e70:	93 81       	ldd	r25, Z+3	; 0x03
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	4a ef       	ldi	r20, 0xFA	; 250
     e78:	54 e4       	ldi	r21, 0x44	; 68
     e7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	f8 01       	movw	r30, r16
     e84:	80 83       	st	Z, r24
     e86:	91 83       	std	Z+1, r25	; 0x01
     e88:	a2 83       	std	Z+2, r26	; 0x02
     e8a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e8c:	fe 01       	movw	r30, r28
     e8e:	ff 96       	adiw	r30, 0x3f	; 63
     e90:	60 81       	ld	r22, Z
     e92:	71 81       	ldd	r23, Z+1	; 0x01
     e94:	82 81       	ldd	r24, Z+2	; 0x02
     e96:	93 81       	ldd	r25, Z+3	; 0x03
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	40 e8       	ldi	r20, 0x80	; 128
     e9e:	5f e3       	ldi	r21, 0x3F	; 63
     ea0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ea4:	88 23       	and	r24, r24
     ea6:	2c f4       	brge	.+10     	; 0xeb2 <main+0x36c>
		__ticks = 1;
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	9e af       	std	Y+62, r25	; 0x3e
     eae:	8d af       	std	Y+61, r24	; 0x3d
     eb0:	46 c0       	rjmp	.+140    	; 0xf3e <main+0x3f8>
	else if (__tmp > 65535)
     eb2:	fe 01       	movw	r30, r28
     eb4:	ff 96       	adiw	r30, 0x3f	; 63
     eb6:	60 81       	ld	r22, Z
     eb8:	71 81       	ldd	r23, Z+1	; 0x01
     eba:	82 81       	ldd	r24, Z+2	; 0x02
     ebc:	93 81       	ldd	r25, Z+3	; 0x03
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	3f ef       	ldi	r19, 0xFF	; 255
     ec2:	4f e7       	ldi	r20, 0x7F	; 127
     ec4:	57 e4       	ldi	r21, 0x47	; 71
     ec6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eca:	18 16       	cp	r1, r24
     ecc:	64 f5       	brge	.+88     	; 0xf26 <main+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ece:	fe 01       	movw	r30, r28
     ed0:	ed 5b       	subi	r30, 0xBD	; 189
     ed2:	ff 4f       	sbci	r31, 0xFF	; 255
     ed4:	60 81       	ld	r22, Z
     ed6:	71 81       	ldd	r23, Z+1	; 0x01
     ed8:	82 81       	ldd	r24, Z+2	; 0x02
     eda:	93 81       	ldd	r25, Z+3	; 0x03
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	40 e2       	ldi	r20, 0x20	; 32
     ee2:	51 e4       	ldi	r21, 0x41	; 65
     ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee8:	dc 01       	movw	r26, r24
     eea:	cb 01       	movw	r24, r22
     eec:	bc 01       	movw	r22, r24
     eee:	cd 01       	movw	r24, r26
     ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	9e af       	std	Y+62, r25	; 0x3e
     efa:	8d af       	std	Y+61, r24	; 0x3d
     efc:	0f c0       	rjmp	.+30     	; 0xf1c <main+0x3d6>
     efe:	88 ec       	ldi	r24, 0xC8	; 200
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	9c af       	std	Y+60, r25	; 0x3c
     f04:	8b af       	std	Y+59, r24	; 0x3b
     f06:	8b ad       	ldd	r24, Y+59	; 0x3b
     f08:	9c ad       	ldd	r25, Y+60	; 0x3c
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	f1 f7       	brne	.-4      	; 0xf0a <main+0x3c4>
     f0e:	9c af       	std	Y+60, r25	; 0x3c
     f10:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f12:	8d ad       	ldd	r24, Y+61	; 0x3d
     f14:	9e ad       	ldd	r25, Y+62	; 0x3e
     f16:	01 97       	sbiw	r24, 0x01	; 1
     f18:	9e af       	std	Y+62, r25	; 0x3e
     f1a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f1c:	8d ad       	ldd	r24, Y+61	; 0x3d
     f1e:	9e ad       	ldd	r25, Y+62	; 0x3e
     f20:	00 97       	sbiw	r24, 0x00	; 0
     f22:	69 f7       	brne	.-38     	; 0xefe <main+0x3b8>
     f24:	16 c0       	rjmp	.+44     	; 0xf52 <main+0x40c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f26:	fe 01       	movw	r30, r28
     f28:	ff 96       	adiw	r30, 0x3f	; 63
     f2a:	60 81       	ld	r22, Z
     f2c:	71 81       	ldd	r23, Z+1	; 0x01
     f2e:	82 81       	ldd	r24, Z+2	; 0x02
     f30:	93 81       	ldd	r25, Z+3	; 0x03
     f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f36:	dc 01       	movw	r26, r24
     f38:	cb 01       	movw	r24, r22
     f3a:	9e af       	std	Y+62, r25	; 0x3e
     f3c:	8d af       	std	Y+61, r24	; 0x3d
     f3e:	8d ad       	ldd	r24, Y+61	; 0x3d
     f40:	9e ad       	ldd	r25, Y+62	; 0x3e
     f42:	9a af       	std	Y+58, r25	; 0x3a
     f44:	89 af       	std	Y+57, r24	; 0x39
     f46:	89 ad       	ldd	r24, Y+57	; 0x39
     f48:	9a ad       	ldd	r25, Y+58	; 0x3a
     f4a:	01 97       	sbiw	r24, 0x01	; 1
     f4c:	f1 f7       	brne	.-4      	; 0xf4a <main+0x404>
     f4e:	9a af       	std	Y+58, r25	; 0x3a
     f50:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(1000);
		}
		LCD_clearScreen(); /* Clear the screen to present new statement on it. */
     f52:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <LCD_clearScreen>

	/*********************************************
	 *	 Save The Password For The First Time	 *
	 *********************************************/
	/* Check each time if the  repeated password is not correct repeat the process. */
	while(passwordCompareResult != TRUE)
     f56:	fe 01       	movw	r30, r28
     f58:	e8 5a       	subi	r30, 0xA8	; 168
     f5a:	ff 4f       	sbci	r31, 0xFF	; 255
     f5c:	80 81       	ld	r24, Z
     f5e:	81 30       	cpi	r24, 0x01	; 1
     f60:	09 f0       	breq	.+2      	; 0xf64 <main+0x41e>
     f62:	73 ce       	rjmp	.-794    	; 0xc4a <main+0x104>
		}
		LCD_clearScreen(); /* Clear the screen to present new statement on it. */
	}

	/* Always after using PASSWORD_compareFirstSecondValues() function make sure to return  this variable to false state to use it another timer for another comparison. */
	passwordCompareResult = FALSE;
     f64:	fe 01       	movw	r30, r28
     f66:	e8 5a       	subi	r30, 0xA8	; 168
     f68:	ff 4f       	sbci	r31, 0xFF	; 255
     f6a:	10 82       	st	Z, r1

	/* Present on screen the option available  to use by the user. */
	LCD_clearScreen();	/* Clear the screen to present new statement on it. */
     f6c:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "+: Open Door");
     f70:	2e e8       	ldi	r18, 0x8E	; 142
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	60 e0       	ldi	r22, 0x00	; 0
     f78:	a9 01       	movw	r20, r18
     f7a:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "-: Change Pass");
     f7e:	2b e9       	ldi	r18, 0x9B	; 155
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	a9 01       	movw	r20, r18
     f88:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_displayStringRowColumn>

	while(1)
	{
		optionsStatus = KEYPAD_getPressedKey();
     f8c:	0e 94 26 11 	call	0x224c	; 0x224c <KEYPAD_getPressedKey>
     f90:	fe 01       	movw	r30, r28
     f92:	e7 5a       	subi	r30, 0xA7	; 167
     f94:	ff 4f       	sbci	r31, 0xFF	; 255
     f96:	80 83       	st	Z, r24

		/*********************************************
		 *	When user select option (+) from keypad  *
		 *********************************************/
		if(optionsStatus == '+')
     f98:	fe 01       	movw	r30, r28
     f9a:	e7 5a       	subi	r30, 0xA7	; 167
     f9c:	ff 4f       	sbci	r31, 0xFF	; 255
     f9e:	80 81       	ld	r24, Z
     fa0:	8b 32       	cpi	r24, 0x2B	; 43
     fa2:	09 f0       	breq	.+2      	; 0xfa6 <main+0x460>
     fa4:	14 c1       	rjmp	.+552    	; 0x11ce <main+0x688>
		{
			UART_sendByte(OPEN_DOOR); 					 /* Send command to MC2 to open the door. */
     fa6:	82 ef       	ldi	r24, 0xF2	; 242
     fa8:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <UART_sendByte>

			PASSWORD_getData(passwordEnterData);		 /* Get the password from the user by using the keypad. */
     fac:	ce 01       	movw	r24, r28
     fae:	8e 59       	subi	r24, 0x9E	; 158
     fb0:	9f 4f       	sbci	r25, 0xFF	; 255
     fb2:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <PASSWORD_getData>
			PASSWORD_sendData(passwordEnterData);		 /* Send the password to MC2. */
     fb6:	ce 01       	movw	r24, r28
     fb8:	8e 59       	subi	r24, 0x9E	; 158
     fba:	9f 4f       	sbci	r25, 0xFF	; 255
     fbc:	0e 94 bd 0b 	call	0x177a	; 0x177a <PASSWORD_sendData>

			passwordStatus = UART_recieveByte();		 /* Receive from MC2 the status of the password if it is correct or wrong. */
     fc0:	0e 94 0b 19 	call	0x3216	; 0x3216 <UART_recieveByte>
     fc4:	fe 01       	movw	r30, r28
     fc6:	ea 5a       	subi	r30, 0xAA	; 170
     fc8:	ff 4f       	sbci	r31, 0xFF	; 255
     fca:	80 83       	st	Z, r24

			/* If the password is correct. */
			if(passwordStatus == OPEN_DOOR_SUCCESS)
     fcc:	fe 01       	movw	r30, r28
     fce:	ea 5a       	subi	r30, 0xAA	; 170
     fd0:	ff 4f       	sbci	r31, 0xFF	; 255
     fd2:	80 81       	ld	r24, Z
     fd4:	83 3f       	cpi	r24, 0xF3	; 243
     fd6:	09 f0       	breq	.+2      	; 0xfda <main+0x494>
     fd8:	42 c0       	rjmp	.+132    	; 0x105e <main+0x518>
			{
				g_buzzerAccumulator = 0;				 /* Make the buzzer counter count from 0 again to count three times after each time the password is correct. */
     fda:	10 92 37 01 	sts	0x0137, r1

				LCD_clearScreen();						 /* Clear the screen to present new statement on it. */
     fde:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <LCD_clearScreen>
				LCD_displayString("Opening the door");	 /* Present opening the door while the motor is rotating clockwise. */
     fe2:	8a ea       	ldi	r24, 0xAA	; 170
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <LCD_displayString>
				TIMER_setCallBack(TIMER0_delayOpenClose);/* This function will call TIMER0_delayOpenClose() function when timer0 finish counting. When this function is called the Timer0 will deactivated. */
     fea:	87 e8       	ldi	r24, 0x87	; 135
     fec:	9d e0       	ldi	r25, 0x0D	; 13
     fee:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <TIMER_setCallBack>
				TIMER_init(&TIMER0_config);				 /* Activate timer0 to count 15 seconds. */
     ff2:	ce 01       	movw	r24, r28
     ff4:	8a 59       	subi	r24, 0x9A	; 154
     ff6:	9f 4f       	sbci	r25, 0xFF	; 255
     ff8:	0e 94 d5 16 	call	0x2daa	; 0x2daa <TIMER_init>
				while(g_timerFlag != 1){}				 /* Wait until the timer finish to continue in the code. */
     ffc:	80 91 36 01 	lds	r24, 0x0136
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	e1 f7       	brne	.-8      	; 0xffc <main+0x4b6>
				g_timerFlag = 0;						 /* Always after the timer flag become become on, the developer must make it zero again for another use. */
    1004:	10 92 36 01 	sts	0x0136, r1

				LCD_clearScreen();						 /* Clear the screen to present new statement on it. */
    1008:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <LCD_clearScreen>
				LCD_displayString("Holding the door");	 /* Present holding the door while the motor is in holding condition.*/
    100c:	8b eb       	ldi	r24, 0xBB	; 187
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <LCD_displayString>
				TIMER_setCallBack(TIMER0_delayHold);	 /* This function will call TIMER0_delayHold() function when timer0 finish counting. When this function is called the Timer0 will deactivated. */
    1014:	87 ea       	ldi	r24, 0xA7	; 167
    1016:	9d e0       	ldi	r25, 0x0D	; 13
    1018:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <TIMER_setCallBack>
				TIMER_init(&TIMER0_config);				 /* Activate timer0 to count 3 seconds. */
    101c:	ce 01       	movw	r24, r28
    101e:	8a 59       	subi	r24, 0x9A	; 154
    1020:	9f 4f       	sbci	r25, 0xFF	; 255
    1022:	0e 94 d5 16 	call	0x2daa	; 0x2daa <TIMER_init>
				while(g_timerFlag != 1){}				 /* Wait until the timer finish to continue in the code. */
    1026:	80 91 36 01 	lds	r24, 0x0136
    102a:	81 30       	cpi	r24, 0x01	; 1
    102c:	e1 f7       	brne	.-8      	; 0x1026 <main+0x4e0>
				g_timerFlag = 0;						 /* Always after the timer flag become become on, the developer must make it zero again for another use. */
    102e:	10 92 36 01 	sts	0x0136, r1

				LCD_clearScreen();						 /* Clear the screen to present new statement on it. */
    1032:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <LCD_clearScreen>
				LCD_displayString("Closing the door");	 /* Present closing the door while the motor is rotating Anti-clockwise.*/
    1036:	8c ec       	ldi	r24, 0xCC	; 204
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <LCD_displayString>
				TIMER_setCallBack(TIMER0_delayOpenClose);/* This function will call TIMER0_delayOpenClose() function when timer0 finish counting. When this function is called the Timer0 will deactivated. */
    103e:	87 e8       	ldi	r24, 0x87	; 135
    1040:	9d e0       	ldi	r25, 0x0D	; 13
    1042:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <TIMER_setCallBack>
				TIMER_init(&TIMER0_config);				 /* Activate timer0 to count 15 seconds. */
    1046:	ce 01       	movw	r24, r28
    1048:	8a 59       	subi	r24, 0x9A	; 154
    104a:	9f 4f       	sbci	r25, 0xFF	; 255
    104c:	0e 94 d5 16 	call	0x2daa	; 0x2daa <TIMER_init>
				while(g_timerFlag != 1){}				 /* Wait until the timer finish to continue in the code. */
    1050:	80 91 36 01 	lds	r24, 0x0136
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	e1 f7       	brne	.-8      	; 0x1050 <main+0x50a>
				g_timerFlag = 0;						 /* Always after the timer flag become become on, the developer must make it zero again for another use. */
    1058:	10 92 36 01 	sts	0x0136, r1
    105c:	a7 c0       	rjmp	.+334    	; 0x11ac <main+0x666>
			}

			/* If the password is not correct. */
			else if(passwordStatus ==  OPEN_DOOR_FAILED)
    105e:	fe 01       	movw	r30, r28
    1060:	ea 5a       	subi	r30, 0xAA	; 170
    1062:	ff 4f       	sbci	r31, 0xFF	; 255
    1064:	80 81       	ld	r24, Z
    1066:	84 3f       	cpi	r24, 0xF4	; 244
    1068:	09 f0       	breq	.+2      	; 0x106c <main+0x526>
    106a:	a0 c0       	rjmp	.+320    	; 0x11ac <main+0x666>
			{
				g_buzzerAccumulator++;					 /* Increment the buzzer counter every time the user write wrong password */
    106c:	80 91 37 01 	lds	r24, 0x0137
    1070:	8f 5f       	subi	r24, 0xFF	; 255
    1072:	80 93 37 01 	sts	0x0137, r24

				LCD_clearScreen();						 /* Clear the screen to present new statement on it. */
    1076:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <LCD_clearScreen>

				/* Check on the buzzer g_buzzerAccumulator. if not reach the maximum tries, a message will appear for a second to inform the user that he wrought a wrong password*/
				if(g_buzzerAccumulator != MAX_NUMBER_OF_ERRORS)
    107a:	80 91 37 01 	lds	r24, 0x0137
    107e:	83 30       	cpi	r24, 0x03	; 3
    1080:	09 f4       	brne	.+2      	; 0x1084 <main+0x53e>
    1082:	76 c0       	rjmp	.+236    	; 0x1170 <main+0x62a>
				{
					LCD_displayString("Wrong Password"); /* Inform the user that he wrought a wrong password. */
    1084:	8d ed       	ldi	r24, 0xDD	; 221
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <LCD_displayString>
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	aa ef       	ldi	r26, 0xFA	; 250
    1092:	b3 e4       	ldi	r27, 0x43	; 67
    1094:	8d ab       	std	Y+53, r24	; 0x35
    1096:	9e ab       	std	Y+54, r25	; 0x36
    1098:	af ab       	std	Y+55, r26	; 0x37
    109a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    109c:	6d a9       	ldd	r22, Y+53	; 0x35
    109e:	7e a9       	ldd	r23, Y+54	; 0x36
    10a0:	8f a9       	ldd	r24, Y+55	; 0x37
    10a2:	98 ad       	ldd	r25, Y+56	; 0x38
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	4a ef       	ldi	r20, 0xFA	; 250
    10aa:	54 e4       	ldi	r21, 0x44	; 68
    10ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b0:	dc 01       	movw	r26, r24
    10b2:	cb 01       	movw	r24, r22
    10b4:	89 ab       	std	Y+49, r24	; 0x31
    10b6:	9a ab       	std	Y+50, r25	; 0x32
    10b8:	ab ab       	std	Y+51, r26	; 0x33
    10ba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    10bc:	69 a9       	ldd	r22, Y+49	; 0x31
    10be:	7a a9       	ldd	r23, Y+50	; 0x32
    10c0:	8b a9       	ldd	r24, Y+51	; 0x33
    10c2:	9c a9       	ldd	r25, Y+52	; 0x34
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	40 e8       	ldi	r20, 0x80	; 128
    10ca:	5f e3       	ldi	r21, 0x3F	; 63
    10cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10d0:	88 23       	and	r24, r24
    10d2:	2c f4       	brge	.+10     	; 0x10de <main+0x598>
		__ticks = 1;
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	98 ab       	std	Y+48, r25	; 0x30
    10da:	8f a7       	std	Y+47, r24	; 0x2f
    10dc:	3f c0       	rjmp	.+126    	; 0x115c <main+0x616>
	else if (__tmp > 65535)
    10de:	69 a9       	ldd	r22, Y+49	; 0x31
    10e0:	7a a9       	ldd	r23, Y+50	; 0x32
    10e2:	8b a9       	ldd	r24, Y+51	; 0x33
    10e4:	9c a9       	ldd	r25, Y+52	; 0x34
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	3f ef       	ldi	r19, 0xFF	; 255
    10ea:	4f e7       	ldi	r20, 0x7F	; 127
    10ec:	57 e4       	ldi	r21, 0x47	; 71
    10ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10f2:	18 16       	cp	r1, r24
    10f4:	4c f5       	brge	.+82     	; 0x1148 <main+0x602>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10f6:	6d a9       	ldd	r22, Y+53	; 0x35
    10f8:	7e a9       	ldd	r23, Y+54	; 0x36
    10fa:	8f a9       	ldd	r24, Y+55	; 0x37
    10fc:	98 ad       	ldd	r25, Y+56	; 0x38
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	40 e2       	ldi	r20, 0x20	; 32
    1104:	51 e4       	ldi	r21, 0x41	; 65
    1106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    110a:	dc 01       	movw	r26, r24
    110c:	cb 01       	movw	r24, r22
    110e:	bc 01       	movw	r22, r24
    1110:	cd 01       	movw	r24, r26
    1112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1116:	dc 01       	movw	r26, r24
    1118:	cb 01       	movw	r24, r22
    111a:	98 ab       	std	Y+48, r25	; 0x30
    111c:	8f a7       	std	Y+47, r24	; 0x2f
    111e:	0f c0       	rjmp	.+30     	; 0x113e <main+0x5f8>
    1120:	88 ec       	ldi	r24, 0xC8	; 200
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	9e a7       	std	Y+46, r25	; 0x2e
    1126:	8d a7       	std	Y+45, r24	; 0x2d
    1128:	8d a5       	ldd	r24, Y+45	; 0x2d
    112a:	9e a5       	ldd	r25, Y+46	; 0x2e
    112c:	01 97       	sbiw	r24, 0x01	; 1
    112e:	f1 f7       	brne	.-4      	; 0x112c <main+0x5e6>
    1130:	9e a7       	std	Y+46, r25	; 0x2e
    1132:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1134:	8f a5       	ldd	r24, Y+47	; 0x2f
    1136:	98 a9       	ldd	r25, Y+48	; 0x30
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	98 ab       	std	Y+48, r25	; 0x30
    113c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    113e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1140:	98 a9       	ldd	r25, Y+48	; 0x30
    1142:	00 97       	sbiw	r24, 0x00	; 0
    1144:	69 f7       	brne	.-38     	; 0x1120 <main+0x5da>
    1146:	14 c0       	rjmp	.+40     	; 0x1170 <main+0x62a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1148:	69 a9       	ldd	r22, Y+49	; 0x31
    114a:	7a a9       	ldd	r23, Y+50	; 0x32
    114c:	8b a9       	ldd	r24, Y+51	; 0x33
    114e:	9c a9       	ldd	r25, Y+52	; 0x34
    1150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1154:	dc 01       	movw	r26, r24
    1156:	cb 01       	movw	r24, r22
    1158:	98 ab       	std	Y+48, r25	; 0x30
    115a:	8f a7       	std	Y+47, r24	; 0x2f
    115c:	8f a5       	ldd	r24, Y+47	; 0x2f
    115e:	98 a9       	ldd	r25, Y+48	; 0x30
    1160:	9c a7       	std	Y+44, r25	; 0x2c
    1162:	8b a7       	std	Y+43, r24	; 0x2b
    1164:	8b a5       	ldd	r24, Y+43	; 0x2b
    1166:	9c a5       	ldd	r25, Y+44	; 0x2c
    1168:	01 97       	sbiw	r24, 0x01	; 1
    116a:	f1 f7       	brne	.-4      	; 0x1168 <main+0x622>
    116c:	9c a7       	std	Y+44, r25	; 0x2c
    116e:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(500);
				}

				/* If the buzzer counter reach the maximum number of tries, the buzzer will be activated for one minute. */
				if(g_buzzerAccumulator == MAX_NUMBER_OF_ERRORS)
    1170:	80 91 37 01 	lds	r24, 0x0137
    1174:	83 30       	cpi	r24, 0x03	; 3
    1176:	d1 f4       	brne	.+52     	; 0x11ac <main+0x666>
				{
					LCD_clearScreen();					 /* Clear the screen to present new statement on it. */
    1178:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 5, "ERROR!!"); /* Inform the user that an error has occurred due to he wrought the password many times wrong. */
    117c:	2c ee       	ldi	r18, 0xEC	; 236
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	65 e0       	ldi	r22, 0x05	; 5
    1184:	a9 01       	movw	r20, r18
    1186:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_displayStringRowColumn>

					TIMER_setCallBack(TIMER0_delayBuzzer);/* This function will call TIMER0_delayBuzzer() function when timer0 finish counting. When this function is called the Timer0 will deactivated. */
    118a:	87 ec       	ldi	r24, 0xC7	; 199
    118c:	9d e0       	ldi	r25, 0x0D	; 13
    118e:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <TIMER_setCallBack>
					TIMER_init(&TIMER0_config);			 /* Activate timer0 to count 60 seconds. */
    1192:	ce 01       	movw	r24, r28
    1194:	8a 59       	subi	r24, 0x9A	; 154
    1196:	9f 4f       	sbci	r25, 0xFF	; 255
    1198:	0e 94 d5 16 	call	0x2daa	; 0x2daa <TIMER_init>
					while(g_timerFlag != 1){}			 /* Wait until the timer finish to continue in the code. */
    119c:	80 91 36 01 	lds	r24, 0x0136
    11a0:	81 30       	cpi	r24, 0x01	; 1
    11a2:	e1 f7       	brne	.-8      	; 0x119c <main+0x656>
					g_timerFlag = 0;					 /* Always after the timer flag become become on, the developer must make it zero again for another use. */
    11a4:	10 92 36 01 	sts	0x0136, r1

					g_buzzerAccumulator = 0;			 /* Make the buzzer accumulator zero again to repeat the process of waiting from the user to write the password wrong three times. */
    11a8:	10 92 37 01 	sts	0x0137, r1
				}
			}

			/* Present on screen the option available  to use by the user. */
			LCD_clearScreen();							 /* Clear the screen to present new statement on it. */
    11ac:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "+: Open Door");
    11b0:	2e e8       	ldi	r18, 0x8E	; 142
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	60 e0       	ldi	r22, 0x00	; 0
    11b8:	a9 01       	movw	r20, r18
    11ba:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "-: Change Pass");
    11be:	2b e9       	ldi	r18, 0x9B	; 155
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	60 e0       	ldi	r22, 0x00	; 0
    11c6:	a9 01       	movw	r20, r18
    11c8:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_displayStringRowColumn>
    11cc:	df ce       	rjmp	.-578    	; 0xf8c <main+0x446>
		}

		/*********************************************
		 *	When user select option (-) from keypad  *
		 *********************************************/
		else if(optionsStatus == '-')
    11ce:	fe 01       	movw	r30, r28
    11d0:	e7 5a       	subi	r30, 0xA7	; 167
    11d2:	ff 4f       	sbci	r31, 0xFF	; 255
    11d4:	80 81       	ld	r24, Z
    11d6:	8d 32       	cpi	r24, 0x2D	; 45
    11d8:	09 f0       	breq	.+2      	; 0x11dc <main+0x696>
    11da:	d8 ce       	rjmp	.-592    	; 0xf8c <main+0x446>
		{
			UART_sendByte(CHANGE_PASSWORD);				 /* Send command to MC2 to change the password. */
    11dc:	85 ef       	ldi	r24, 0xF5	; 245
    11de:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <UART_sendByte>

			PASSWORD_getData(passwordEnterData);		 /* Get the password from the user by using the keypad. */
    11e2:	ce 01       	movw	r24, r28
    11e4:	8e 59       	subi	r24, 0x9E	; 158
    11e6:	9f 4f       	sbci	r25, 0xFF	; 255
    11e8:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <PASSWORD_getData>
			PASSWORD_sendData(passwordEnterData);		 /* Send the password to MC2. */
    11ec:	ce 01       	movw	r24, r28
    11ee:	8e 59       	subi	r24, 0x9E	; 158
    11f0:	9f 4f       	sbci	r25, 0xFF	; 255
    11f2:	0e 94 bd 0b 	call	0x177a	; 0x177a <PASSWORD_sendData>

			receivedPasswordStatus = UART_recieveByte(); /* Receive from MC2 the status of the password if it is correct or wrong. */
    11f6:	0e 94 0b 19 	call	0x3216	; 0x3216 <UART_recieveByte>
    11fa:	fe 01       	movw	r30, r28
    11fc:	e9 5a       	subi	r30, 0xA9	; 169
    11fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1200:	80 83       	st	Z, r24

			/* If the password is correct. */
			if(receivedPasswordStatus == CORRECT_PASSWORD)
    1202:	fe 01       	movw	r30, r28
    1204:	e9 5a       	subi	r30, 0xA9	; 169
    1206:	ff 4f       	sbci	r31, 0xFF	; 255
    1208:	80 81       	ld	r24, Z
    120a:	86 3f       	cpi	r24, 0xF6	; 246
    120c:	09 f0       	breq	.+2      	; 0x1210 <main+0x6ca>
    120e:	3d c1       	rjmp	.+634    	; 0x148a <main+0x944>
			{
				g_buzzerAccumulator = 0;				 /* Make the buzzer counter count from 0 again to count three times after each time the password is correct. */
    1210:	10 92 37 01 	sts	0x0137, r1
    1214:	2e c1       	rjmp	.+604    	; 0x1472 <main+0x92c>

				/* Check each time if the  repeated password is not correct repeat the process. */
				while(passwordCompareResult != TRUE)
				{
					PASSWORD_saveData(passwordFirstSave, passwordSecondSave); 										  /* Get password values from the user. */
    1216:	ce 01       	movw	r24, r28
    1218:	86 5a       	subi	r24, 0xA6	; 166
    121a:	9f 4f       	sbci	r25, 0xFF	; 255
    121c:	9e 01       	movw	r18, r28
    121e:	22 5a       	subi	r18, 0xA2	; 162
    1220:	3f 4f       	sbci	r19, 0xFF	; 255
    1222:	b9 01       	movw	r22, r18
    1224:	0e 94 df 0b 	call	0x17be	; 0x17be <PASSWORD_saveData>
					passwordCompareResult = PASSWORD_compareFirstSecondValues(passwordFirstSave, passwordSecondSave); /* Check if the password is correct or not. */
    1228:	ce 01       	movw	r24, r28
    122a:	86 5a       	subi	r24, 0xA6	; 166
    122c:	9f 4f       	sbci	r25, 0xFF	; 255
    122e:	9e 01       	movw	r18, r28
    1230:	22 5a       	subi	r18, 0xA2	; 162
    1232:	3f 4f       	sbci	r19, 0xFF	; 255
    1234:	b9 01       	movw	r22, r18
    1236:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <PASSWORD_compareFirstSecondValues>
    123a:	fe 01       	movw	r30, r28
    123c:	e8 5a       	subi	r30, 0xA8	; 168
    123e:	ff 4f       	sbci	r31, 0xFF	; 255
    1240:	80 83       	st	Z, r24

					/* Check each time if the  repeated password is not correct repeat the process. */
					if(passwordCompareResult == TRUE)
    1242:	fe 01       	movw	r30, r28
    1244:	e8 5a       	subi	r30, 0xA8	; 168
    1246:	ff 4f       	sbci	r31, 0xFF	; 255
    1248:	80 81       	ld	r24, Z
    124a:	81 30       	cpi	r24, 0x01	; 1
    124c:	29 f4       	brne	.+10     	; 0x1258 <main+0x712>
					{
						PASSWORD_sendData(passwordFirstSave);/* Send Password */
    124e:	ce 01       	movw	r24, r28
    1250:	86 5a       	subi	r24, 0xA6	; 166
    1252:	9f 4f       	sbci	r25, 0xFF	; 255
    1254:	0e 94 bd 0b 	call	0x177a	; 0x177a <PASSWORD_sendData>
					}

					/* If the repeated password is not correct the process will be repeated. */
					if(passwordCompareResult == FALSE)
    1258:	fe 01       	movw	r30, r28
    125a:	e8 5a       	subi	r30, 0xA8	; 168
    125c:	ff 4f       	sbci	r31, 0xFF	; 255
    125e:	80 81       	ld	r24, Z
    1260:	88 23       	and	r24, r24
    1262:	09 f0       	breq	.+2      	; 0x1266 <main+0x720>
    1264:	04 c1       	rjmp	.+520    	; 0x146e <main+0x928>
					{
						/* in case of wrong password, inform the user he repeated the password wrongly and the process must be repeated. */
						LCD_clearScreen();	/* Clear the screen to present new statement on it */
    1266:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 0, "Repeated Password");
    126a:	20 e6       	ldi	r18, 0x60	; 96
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	60 e0       	ldi	r22, 0x00	; 0
    1272:	a9 01       	movw	r20, r18
    1274:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_displayStringRowColumn>
						LCD_displayStringRowColumn(1, 4, "is Wrong");
    1278:	22 e7       	ldi	r18, 0x72	; 114
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	64 e0       	ldi	r22, 0x04	; 4
    1280:	a9 01       	movw	r20, r18
    1282:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_displayStringRowColumn>
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	aa e7       	ldi	r26, 0x7A	; 122
    128c:	b4 e4       	ldi	r27, 0x44	; 68
    128e:	8f a3       	std	Y+39, r24	; 0x27
    1290:	98 a7       	std	Y+40, r25	; 0x28
    1292:	a9 a7       	std	Y+41, r26	; 0x29
    1294:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1296:	6f a1       	ldd	r22, Y+39	; 0x27
    1298:	78 a5       	ldd	r23, Y+40	; 0x28
    129a:	89 a5       	ldd	r24, Y+41	; 0x29
    129c:	9a a5       	ldd	r25, Y+42	; 0x2a
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	4a ef       	ldi	r20, 0xFA	; 250
    12a4:	54 e4       	ldi	r21, 0x44	; 68
    12a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	8b a3       	std	Y+35, r24	; 0x23
    12b0:	9c a3       	std	Y+36, r25	; 0x24
    12b2:	ad a3       	std	Y+37, r26	; 0x25
    12b4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12b6:	6b a1       	ldd	r22, Y+35	; 0x23
    12b8:	7c a1       	ldd	r23, Y+36	; 0x24
    12ba:	8d a1       	ldd	r24, Y+37	; 0x25
    12bc:	9e a1       	ldd	r25, Y+38	; 0x26
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	40 e8       	ldi	r20, 0x80	; 128
    12c4:	5f e3       	ldi	r21, 0x3F	; 63
    12c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12ca:	88 23       	and	r24, r24
    12cc:	2c f4       	brge	.+10     	; 0x12d8 <main+0x792>
		__ticks = 1;
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	9a a3       	std	Y+34, r25	; 0x22
    12d4:	89 a3       	std	Y+33, r24	; 0x21
    12d6:	3f c0       	rjmp	.+126    	; 0x1356 <main+0x810>
	else if (__tmp > 65535)
    12d8:	6b a1       	ldd	r22, Y+35	; 0x23
    12da:	7c a1       	ldd	r23, Y+36	; 0x24
    12dc:	8d a1       	ldd	r24, Y+37	; 0x25
    12de:	9e a1       	ldd	r25, Y+38	; 0x26
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	3f ef       	ldi	r19, 0xFF	; 255
    12e4:	4f e7       	ldi	r20, 0x7F	; 127
    12e6:	57 e4       	ldi	r21, 0x47	; 71
    12e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12ec:	18 16       	cp	r1, r24
    12ee:	4c f5       	brge	.+82     	; 0x1342 <main+0x7fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12f0:	6f a1       	ldd	r22, Y+39	; 0x27
    12f2:	78 a5       	ldd	r23, Y+40	; 0x28
    12f4:	89 a5       	ldd	r24, Y+41	; 0x29
    12f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	40 e2       	ldi	r20, 0x20	; 32
    12fe:	51 e4       	ldi	r21, 0x41	; 65
    1300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	bc 01       	movw	r22, r24
    130a:	cd 01       	movw	r24, r26
    130c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	9a a3       	std	Y+34, r25	; 0x22
    1316:	89 a3       	std	Y+33, r24	; 0x21
    1318:	0f c0       	rjmp	.+30     	; 0x1338 <main+0x7f2>
    131a:	88 ec       	ldi	r24, 0xC8	; 200
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	98 a3       	std	Y+32, r25	; 0x20
    1320:	8f 8f       	std	Y+31, r24	; 0x1f
    1322:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1324:	98 a1       	ldd	r25, Y+32	; 0x20
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	f1 f7       	brne	.-4      	; 0x1326 <main+0x7e0>
    132a:	98 a3       	std	Y+32, r25	; 0x20
    132c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    132e:	89 a1       	ldd	r24, Y+33	; 0x21
    1330:	9a a1       	ldd	r25, Y+34	; 0x22
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	9a a3       	std	Y+34, r25	; 0x22
    1336:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1338:	89 a1       	ldd	r24, Y+33	; 0x21
    133a:	9a a1       	ldd	r25, Y+34	; 0x22
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	69 f7       	brne	.-38     	; 0x131a <main+0x7d4>
    1340:	14 c0       	rjmp	.+40     	; 0x136a <main+0x824>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1342:	6b a1       	ldd	r22, Y+35	; 0x23
    1344:	7c a1       	ldd	r23, Y+36	; 0x24
    1346:	8d a1       	ldd	r24, Y+37	; 0x25
    1348:	9e a1       	ldd	r25, Y+38	; 0x26
    134a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	9a a3       	std	Y+34, r25	; 0x22
    1354:	89 a3       	std	Y+33, r24	; 0x21
    1356:	89 a1       	ldd	r24, Y+33	; 0x21
    1358:	9a a1       	ldd	r25, Y+34	; 0x22
    135a:	9e 8f       	std	Y+30, r25	; 0x1e
    135c:	8d 8f       	std	Y+29, r24	; 0x1d
    135e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1360:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	f1 f7       	brne	.-4      	; 0x1362 <main+0x81c>
    1366:	9e 8f       	std	Y+30, r25	; 0x1e
    1368:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(1000);
						LCD_clearScreen();				 /* Clear the screen to present new statement on it. */
    136a:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 3, "Repeat the");
    136e:	2b e7       	ldi	r18, 0x7B	; 123
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	63 e0       	ldi	r22, 0x03	; 3
    1376:	a9 01       	movw	r20, r18
    1378:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_displayStringRowColumn>
						LCD_displayStringRowColumn(1, 4, "Process");
    137c:	26 e8       	ldi	r18, 0x86	; 134
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	64 e0       	ldi	r22, 0x04	; 4
    1384:	a9 01       	movw	r20, r18
    1386:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_displayStringRowColumn>
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	aa e7       	ldi	r26, 0x7A	; 122
    1390:	b4 e4       	ldi	r27, 0x44	; 68
    1392:	89 8f       	std	Y+25, r24	; 0x19
    1394:	9a 8f       	std	Y+26, r25	; 0x1a
    1396:	ab 8f       	std	Y+27, r26	; 0x1b
    1398:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    139a:	69 8d       	ldd	r22, Y+25	; 0x19
    139c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    139e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	4a ef       	ldi	r20, 0xFA	; 250
    13a8:	54 e4       	ldi	r21, 0x44	; 68
    13aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	8d 8b       	std	Y+21, r24	; 0x15
    13b4:	9e 8b       	std	Y+22, r25	; 0x16
    13b6:	af 8b       	std	Y+23, r26	; 0x17
    13b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13ba:	6d 89       	ldd	r22, Y+21	; 0x15
    13bc:	7e 89       	ldd	r23, Y+22	; 0x16
    13be:	8f 89       	ldd	r24, Y+23	; 0x17
    13c0:	98 8d       	ldd	r25, Y+24	; 0x18
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	40 e8       	ldi	r20, 0x80	; 128
    13c8:	5f e3       	ldi	r21, 0x3F	; 63
    13ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13ce:	88 23       	and	r24, r24
    13d0:	2c f4       	brge	.+10     	; 0x13dc <main+0x896>
		__ticks = 1;
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	9c 8b       	std	Y+20, r25	; 0x14
    13d8:	8b 8b       	std	Y+19, r24	; 0x13
    13da:	3f c0       	rjmp	.+126    	; 0x145a <main+0x914>
	else if (__tmp > 65535)
    13dc:	6d 89       	ldd	r22, Y+21	; 0x15
    13de:	7e 89       	ldd	r23, Y+22	; 0x16
    13e0:	8f 89       	ldd	r24, Y+23	; 0x17
    13e2:	98 8d       	ldd	r25, Y+24	; 0x18
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	3f ef       	ldi	r19, 0xFF	; 255
    13e8:	4f e7       	ldi	r20, 0x7F	; 127
    13ea:	57 e4       	ldi	r21, 0x47	; 71
    13ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13f0:	18 16       	cp	r1, r24
    13f2:	4c f5       	brge	.+82     	; 0x1446 <main+0x900>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13f4:	69 8d       	ldd	r22, Y+25	; 0x19
    13f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	40 e2       	ldi	r20, 0x20	; 32
    1402:	51 e4       	ldi	r21, 0x41	; 65
    1404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	bc 01       	movw	r22, r24
    140e:	cd 01       	movw	r24, r26
    1410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	9c 8b       	std	Y+20, r25	; 0x14
    141a:	8b 8b       	std	Y+19, r24	; 0x13
    141c:	0f c0       	rjmp	.+30     	; 0x143c <main+0x8f6>
    141e:	88 ec       	ldi	r24, 0xC8	; 200
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	9a 8b       	std	Y+18, r25	; 0x12
    1424:	89 8b       	std	Y+17, r24	; 0x11
    1426:	89 89       	ldd	r24, Y+17	; 0x11
    1428:	9a 89       	ldd	r25, Y+18	; 0x12
    142a:	01 97       	sbiw	r24, 0x01	; 1
    142c:	f1 f7       	brne	.-4      	; 0x142a <main+0x8e4>
    142e:	9a 8b       	std	Y+18, r25	; 0x12
    1430:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1432:	8b 89       	ldd	r24, Y+19	; 0x13
    1434:	9c 89       	ldd	r25, Y+20	; 0x14
    1436:	01 97       	sbiw	r24, 0x01	; 1
    1438:	9c 8b       	std	Y+20, r25	; 0x14
    143a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    143c:	8b 89       	ldd	r24, Y+19	; 0x13
    143e:	9c 89       	ldd	r25, Y+20	; 0x14
    1440:	00 97       	sbiw	r24, 0x00	; 0
    1442:	69 f7       	brne	.-38     	; 0x141e <main+0x8d8>
    1444:	14 c0       	rjmp	.+40     	; 0x146e <main+0x928>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1446:	6d 89       	ldd	r22, Y+21	; 0x15
    1448:	7e 89       	ldd	r23, Y+22	; 0x16
    144a:	8f 89       	ldd	r24, Y+23	; 0x17
    144c:	98 8d       	ldd	r25, Y+24	; 0x18
    144e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	9c 8b       	std	Y+20, r25	; 0x14
    1458:	8b 8b       	std	Y+19, r24	; 0x13
    145a:	8b 89       	ldd	r24, Y+19	; 0x13
    145c:	9c 89       	ldd	r25, Y+20	; 0x14
    145e:	98 8b       	std	Y+16, r25	; 0x10
    1460:	8f 87       	std	Y+15, r24	; 0x0f
    1462:	8f 85       	ldd	r24, Y+15	; 0x0f
    1464:	98 89       	ldd	r25, Y+16	; 0x10
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	f1 f7       	brne	.-4      	; 0x1466 <main+0x920>
    146a:	98 8b       	std	Y+16, r25	; 0x10
    146c:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(1000);
					}
					LCD_clearScreen();					 /* Clear the screen to present new statement on it. */
    146e:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <LCD_clearScreen>
			if(receivedPasswordStatus == CORRECT_PASSWORD)
			{
				g_buzzerAccumulator = 0;				 /* Make the buzzer counter count from 0 again to count three times after each time the password is correct. */

				/* Check each time if the  repeated password is not correct repeat the process. */
				while(passwordCompareResult != TRUE)
    1472:	fe 01       	movw	r30, r28
    1474:	e8 5a       	subi	r30, 0xA8	; 168
    1476:	ff 4f       	sbci	r31, 0xFF	; 255
    1478:	80 81       	ld	r24, Z
    147a:	81 30       	cpi	r24, 0x01	; 1
    147c:	09 f0       	breq	.+2      	; 0x1480 <main+0x93a>
    147e:	cb ce       	rjmp	.-618    	; 0x1216 <main+0x6d0>
					}
					LCD_clearScreen();					 /* Clear the screen to present new statement on it. */
				}

				/* Always after using PASSWORD_compareFirstSecondValues() function make sure to return  this variable to false state to use it another timer for another comparison. */
				passwordCompareResult = FALSE;
    1480:	fe 01       	movw	r30, r28
    1482:	e8 5a       	subi	r30, 0xA8	; 168
    1484:	ff 4f       	sbci	r31, 0xFF	; 255
    1486:	10 82       	st	Z, r1
    1488:	a7 c0       	rjmp	.+334    	; 0x15d8 <main+0xa92>
			}

			/* If the password is not correct. */
			else if(receivedPasswordStatus == WRONG_PASSWORD)
    148a:	fe 01       	movw	r30, r28
    148c:	e9 5a       	subi	r30, 0xA9	; 169
    148e:	ff 4f       	sbci	r31, 0xFF	; 255
    1490:	80 81       	ld	r24, Z
    1492:	87 3f       	cpi	r24, 0xF7	; 247
    1494:	09 f0       	breq	.+2      	; 0x1498 <main+0x952>
    1496:	a0 c0       	rjmp	.+320    	; 0x15d8 <main+0xa92>
			{
				g_buzzerAccumulator++;					 /* Increment the buzzer counter every time the user write wrong password */
    1498:	80 91 37 01 	lds	r24, 0x0137
    149c:	8f 5f       	subi	r24, 0xFF	; 255
    149e:	80 93 37 01 	sts	0x0137, r24

				LCD_clearScreen();						 /* Clear the screen to present new statement on it. */
    14a2:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <LCD_clearScreen>

				/* Check on the buzzer g_buzzerAccumulator. if not reach the maximum tries, a message will appear for a second to inform the user that he wrought a wrong password*/
				if(g_buzzerAccumulator != MAX_NUMBER_OF_ERRORS)
    14a6:	80 91 37 01 	lds	r24, 0x0137
    14aa:	83 30       	cpi	r24, 0x03	; 3
    14ac:	09 f4       	brne	.+2      	; 0x14b0 <main+0x96a>
    14ae:	76 c0       	rjmp	.+236    	; 0x159c <main+0xa56>
				{
					LCD_displayString("Wrong Password"); /* Inform the user that he wrought a wrong password. */
    14b0:	8d ed       	ldi	r24, 0xDD	; 221
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <LCD_displayString>
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	aa ef       	ldi	r26, 0xFA	; 250
    14be:	b3 e4       	ldi	r27, 0x43	; 67
    14c0:	8b 87       	std	Y+11, r24	; 0x0b
    14c2:	9c 87       	std	Y+12, r25	; 0x0c
    14c4:	ad 87       	std	Y+13, r26	; 0x0d
    14c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    14cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	4a ef       	ldi	r20, 0xFA	; 250
    14d6:	54 e4       	ldi	r21, 0x44	; 68
    14d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14dc:	dc 01       	movw	r26, r24
    14de:	cb 01       	movw	r24, r22
    14e0:	8f 83       	std	Y+7, r24	; 0x07
    14e2:	98 87       	std	Y+8, r25	; 0x08
    14e4:	a9 87       	std	Y+9, r26	; 0x09
    14e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14e8:	6f 81       	ldd	r22, Y+7	; 0x07
    14ea:	78 85       	ldd	r23, Y+8	; 0x08
    14ec:	89 85       	ldd	r24, Y+9	; 0x09
    14ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	40 e8       	ldi	r20, 0x80	; 128
    14f6:	5f e3       	ldi	r21, 0x3F	; 63
    14f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14fc:	88 23       	and	r24, r24
    14fe:	2c f4       	brge	.+10     	; 0x150a <main+0x9c4>
		__ticks = 1;
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	9e 83       	std	Y+6, r25	; 0x06
    1506:	8d 83       	std	Y+5, r24	; 0x05
    1508:	3f c0       	rjmp	.+126    	; 0x1588 <main+0xa42>
	else if (__tmp > 65535)
    150a:	6f 81       	ldd	r22, Y+7	; 0x07
    150c:	78 85       	ldd	r23, Y+8	; 0x08
    150e:	89 85       	ldd	r24, Y+9	; 0x09
    1510:	9a 85       	ldd	r25, Y+10	; 0x0a
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	3f ef       	ldi	r19, 0xFF	; 255
    1516:	4f e7       	ldi	r20, 0x7F	; 127
    1518:	57 e4       	ldi	r21, 0x47	; 71
    151a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    151e:	18 16       	cp	r1, r24
    1520:	4c f5       	brge	.+82     	; 0x1574 <main+0xa2e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1522:	6b 85       	ldd	r22, Y+11	; 0x0b
    1524:	7c 85       	ldd	r23, Y+12	; 0x0c
    1526:	8d 85       	ldd	r24, Y+13	; 0x0d
    1528:	9e 85       	ldd	r25, Y+14	; 0x0e
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	40 e2       	ldi	r20, 0x20	; 32
    1530:	51 e4       	ldi	r21, 0x41	; 65
    1532:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1536:	dc 01       	movw	r26, r24
    1538:	cb 01       	movw	r24, r22
    153a:	bc 01       	movw	r22, r24
    153c:	cd 01       	movw	r24, r26
    153e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1542:	dc 01       	movw	r26, r24
    1544:	cb 01       	movw	r24, r22
    1546:	9e 83       	std	Y+6, r25	; 0x06
    1548:	8d 83       	std	Y+5, r24	; 0x05
    154a:	0f c0       	rjmp	.+30     	; 0x156a <main+0xa24>
    154c:	88 ec       	ldi	r24, 0xC8	; 200
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	9c 83       	std	Y+4, r25	; 0x04
    1552:	8b 83       	std	Y+3, r24	; 0x03
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	9c 81       	ldd	r25, Y+4	; 0x04
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	f1 f7       	brne	.-4      	; 0x1558 <main+0xa12>
    155c:	9c 83       	std	Y+4, r25	; 0x04
    155e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1560:	8d 81       	ldd	r24, Y+5	; 0x05
    1562:	9e 81       	ldd	r25, Y+6	; 0x06
    1564:	01 97       	sbiw	r24, 0x01	; 1
    1566:	9e 83       	std	Y+6, r25	; 0x06
    1568:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    156a:	8d 81       	ldd	r24, Y+5	; 0x05
    156c:	9e 81       	ldd	r25, Y+6	; 0x06
    156e:	00 97       	sbiw	r24, 0x00	; 0
    1570:	69 f7       	brne	.-38     	; 0x154c <main+0xa06>
    1572:	14 c0       	rjmp	.+40     	; 0x159c <main+0xa56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1574:	6f 81       	ldd	r22, Y+7	; 0x07
    1576:	78 85       	ldd	r23, Y+8	; 0x08
    1578:	89 85       	ldd	r24, Y+9	; 0x09
    157a:	9a 85       	ldd	r25, Y+10	; 0x0a
    157c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1580:	dc 01       	movw	r26, r24
    1582:	cb 01       	movw	r24, r22
    1584:	9e 83       	std	Y+6, r25	; 0x06
    1586:	8d 83       	std	Y+5, r24	; 0x05
    1588:	8d 81       	ldd	r24, Y+5	; 0x05
    158a:	9e 81       	ldd	r25, Y+6	; 0x06
    158c:	9a 83       	std	Y+2, r25	; 0x02
    158e:	89 83       	std	Y+1, r24	; 0x01
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	9a 81       	ldd	r25, Y+2	; 0x02
    1594:	01 97       	sbiw	r24, 0x01	; 1
    1596:	f1 f7       	brne	.-4      	; 0x1594 <main+0xa4e>
    1598:	9a 83       	std	Y+2, r25	; 0x02
    159a:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(500);
				}

				/* If the buzzer counter reach the maximum number of tries, the buzzer will be activated for one minute. */
				if(g_buzzerAccumulator == MAX_NUMBER_OF_ERRORS)
    159c:	80 91 37 01 	lds	r24, 0x0137
    15a0:	83 30       	cpi	r24, 0x03	; 3
    15a2:	d1 f4       	brne	.+52     	; 0x15d8 <main+0xa92>
				{
					LCD_clearScreen();					 /* Clear the screen to present new statement on it. */
    15a4:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 5, "ERROR!!"); /* Inform the user that an error has occurred due to he wrought the password many times wrong. */
    15a8:	2c ee       	ldi	r18, 0xEC	; 236
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	65 e0       	ldi	r22, 0x05	; 5
    15b0:	a9 01       	movw	r20, r18
    15b2:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_displayStringRowColumn>

					TIMER_setCallBack(TIMER0_delayBuzzer); /* This function will call TIMER0_delayBuzzer() function when timer0 finish counting. When this function is called the Timer0 will deactivated. */
    15b6:	87 ec       	ldi	r24, 0xC7	; 199
    15b8:	9d e0       	ldi	r25, 0x0D	; 13
    15ba:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <TIMER_setCallBack>
					TIMER_init(&TIMER0_config);			 /* Activate timer0 to count 60 seconds. */
    15be:	ce 01       	movw	r24, r28
    15c0:	8a 59       	subi	r24, 0x9A	; 154
    15c2:	9f 4f       	sbci	r25, 0xFF	; 255
    15c4:	0e 94 d5 16 	call	0x2daa	; 0x2daa <TIMER_init>
					while(g_timerFlag != 1){}			 /* Wait until the timer finish to continue in the code. */
    15c8:	80 91 36 01 	lds	r24, 0x0136
    15cc:	81 30       	cpi	r24, 0x01	; 1
    15ce:	e1 f7       	brne	.-8      	; 0x15c8 <main+0xa82>
					g_timerFlag = 0;					 /* Always after the timer flag become become on, the developer must make it zero again for another use. */
    15d0:	10 92 36 01 	sts	0x0136, r1

					g_buzzerAccumulator = 0;			 /* Make the buzzer counter count from 0 again to count three times after each time the password is correct. */
    15d4:	10 92 37 01 	sts	0x0137, r1
				}
			}

			/* Present on screen the option available  to use by the user. */
			LCD_clearScreen();							 /* Clear the screen to present new statement on it. */
    15d8:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "+: Open Door");
    15dc:	2e e8       	ldi	r18, 0x8E	; 142
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	60 e0       	ldi	r22, 0x00	; 0
    15e4:	a9 01       	movw	r20, r18
    15e6:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "-: Change Pass");
    15ea:	2b e9       	ldi	r18, 0x9B	; 155
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	60 e0       	ldi	r22, 0x00	; 0
    15f2:	a9 01       	movw	r20, r18
    15f4:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_displayStringRowColumn>
    15f8:	c9 cc       	rjmp	.-1646   	; 0xf8c <main+0x446>

000015fa <PASSWORD_getData>:
/*
 * Description:
 * Get from the user the values that he entered on the keypad and send it to MC2 to check if the password is correct.
 */
void PASSWORD_getData(uint8 *a_passwordEnterData_ptr)
{
    15fa:	0f 93       	push	r16
    15fc:	1f 93       	push	r17
    15fe:	df 93       	push	r29
    1600:	cf 93       	push	r28
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	61 97       	sbiw	r28, 0x11	; 17
    1608:	0f b6       	in	r0, 0x3f	; 63
    160a:	f8 94       	cli
    160c:	de bf       	out	0x3e, r29	; 62
    160e:	0f be       	out	0x3f, r0	; 63
    1610:	cd bf       	out	0x3d, r28	; 61
    1612:	99 8b       	std	Y+17, r25	; 0x11
    1614:	88 8b       	std	Y+16, r24	; 0x10
	uint8 passwordCounter = 0; 				/* To count the loop to get the values of the password. */
    1616:	1f 86       	std	Y+15, r1	; 0x0f

	LCD_clearScreen();	/* Clear the screen to present new statement on it. */
    1618:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Enter Password:");	/* Display on LCD (Enter Password:). */
    161c:	24 ef       	ldi	r18, 0xF4	; 244
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	a9 01       	movw	r20, r18
    1626:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 0);									/* Move the cursor to the second line. */
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	60 e0       	ldi	r22, 0x00	; 0
    162e:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <LCD_moveCursor>
    1632:	90 c0       	rjmp	.+288    	; 0x1754 <PASSWORD_getData+0x15a>

	/* This loop to get password values from the user */
	while((passwordCounter < PASSWORD_SIZE))
	{
		a_passwordEnterData_ptr[passwordCounter] = KEYPAD_getPressedKey(); /* Get each keypad input and save its value in a variable from the array. */
    1634:	8f 85       	ldd	r24, Y+15	; 0x0f
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	88 89       	ldd	r24, Y+16	; 0x10
    163c:	99 89       	ldd	r25, Y+17	; 0x11
    163e:	8c 01       	movw	r16, r24
    1640:	02 0f       	add	r16, r18
    1642:	13 1f       	adc	r17, r19
    1644:	0e 94 26 11 	call	0x224c	; 0x224c <KEYPAD_getPressedKey>
    1648:	f8 01       	movw	r30, r16
    164a:	80 83       	st	Z, r24

		/*	Check if the input not a number from the keypad, repeat the loop until it get a number.	*/
		if((a_passwordEnterData_ptr[passwordCounter]<0) || (a_passwordEnterData_ptr[passwordCounter]>9))
    164c:	8f 85       	ldd	r24, Y+15	; 0x0f
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	88 89       	ldd	r24, Y+16	; 0x10
    1654:	99 89       	ldd	r25, Y+17	; 0x11
    1656:	fc 01       	movw	r30, r24
    1658:	e2 0f       	add	r30, r18
    165a:	f3 1f       	adc	r31, r19
    165c:	80 81       	ld	r24, Z
    165e:	8a 30       	cpi	r24, 0x0A	; 10
    1660:	08 f0       	brcs	.+2      	; 0x1664 <PASSWORD_getData+0x6a>
    1662:	78 c0       	rjmp	.+240    	; 0x1754 <PASSWORD_getData+0x15a>
		{
			continue;
		}

		LCD_displayCharacter('*'); 			/* For each input form the keypad, the LCD will display (*). */
    1664:	8a e2       	ldi	r24, 0x2A	; 42
    1666:	0e 94 36 14 	call	0x286c	; 0x286c <LCD_displayCharacter>
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	aa ef       	ldi	r26, 0xFA	; 250
    1670:	b3 e4       	ldi	r27, 0x43	; 67
    1672:	8b 87       	std	Y+11, r24	; 0x0b
    1674:	9c 87       	std	Y+12, r25	; 0x0c
    1676:	ad 87       	std	Y+13, r26	; 0x0d
    1678:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    167a:	6b 85       	ldd	r22, Y+11	; 0x0b
    167c:	7c 85       	ldd	r23, Y+12	; 0x0c
    167e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1680:	9e 85       	ldd	r25, Y+14	; 0x0e
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	4a ef       	ldi	r20, 0xFA	; 250
    1688:	54 e4       	ldi	r21, 0x44	; 68
    168a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	8f 83       	std	Y+7, r24	; 0x07
    1694:	98 87       	std	Y+8, r25	; 0x08
    1696:	a9 87       	std	Y+9, r26	; 0x09
    1698:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    169a:	6f 81       	ldd	r22, Y+7	; 0x07
    169c:	78 85       	ldd	r23, Y+8	; 0x08
    169e:	89 85       	ldd	r24, Y+9	; 0x09
    16a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	40 e8       	ldi	r20, 0x80	; 128
    16a8:	5f e3       	ldi	r21, 0x3F	; 63
    16aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ae:	88 23       	and	r24, r24
    16b0:	2c f4       	brge	.+10     	; 0x16bc <PASSWORD_getData+0xc2>
		__ticks = 1;
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	9e 83       	std	Y+6, r25	; 0x06
    16b8:	8d 83       	std	Y+5, r24	; 0x05
    16ba:	3f c0       	rjmp	.+126    	; 0x173a <PASSWORD_getData+0x140>
	else if (__tmp > 65535)
    16bc:	6f 81       	ldd	r22, Y+7	; 0x07
    16be:	78 85       	ldd	r23, Y+8	; 0x08
    16c0:	89 85       	ldd	r24, Y+9	; 0x09
    16c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	3f ef       	ldi	r19, 0xFF	; 255
    16c8:	4f e7       	ldi	r20, 0x7F	; 127
    16ca:	57 e4       	ldi	r21, 0x47	; 71
    16cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16d0:	18 16       	cp	r1, r24
    16d2:	4c f5       	brge	.+82     	; 0x1726 <PASSWORD_getData+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    16d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    16d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16da:	9e 85       	ldd	r25, Y+14	; 0x0e
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	40 e2       	ldi	r20, 0x20	; 32
    16e2:	51 e4       	ldi	r21, 0x41	; 65
    16e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	bc 01       	movw	r22, r24
    16ee:	cd 01       	movw	r24, r26
    16f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	9e 83       	std	Y+6, r25	; 0x06
    16fa:	8d 83       	std	Y+5, r24	; 0x05
    16fc:	0f c0       	rjmp	.+30     	; 0x171c <PASSWORD_getData+0x122>
    16fe:	88 ec       	ldi	r24, 0xC8	; 200
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	9c 83       	std	Y+4, r25	; 0x04
    1704:	8b 83       	std	Y+3, r24	; 0x03
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	9c 81       	ldd	r25, Y+4	; 0x04
    170a:	01 97       	sbiw	r24, 0x01	; 1
    170c:	f1 f7       	brne	.-4      	; 0x170a <PASSWORD_getData+0x110>
    170e:	9c 83       	std	Y+4, r25	; 0x04
    1710:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1712:	8d 81       	ldd	r24, Y+5	; 0x05
    1714:	9e 81       	ldd	r25, Y+6	; 0x06
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	9e 83       	std	Y+6, r25	; 0x06
    171a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    171c:	8d 81       	ldd	r24, Y+5	; 0x05
    171e:	9e 81       	ldd	r25, Y+6	; 0x06
    1720:	00 97       	sbiw	r24, 0x00	; 0
    1722:	69 f7       	brne	.-38     	; 0x16fe <PASSWORD_getData+0x104>
    1724:	14 c0       	rjmp	.+40     	; 0x174e <PASSWORD_getData+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1726:	6f 81       	ldd	r22, Y+7	; 0x07
    1728:	78 85       	ldd	r23, Y+8	; 0x08
    172a:	89 85       	ldd	r24, Y+9	; 0x09
    172c:	9a 85       	ldd	r25, Y+10	; 0x0a
    172e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	9e 83       	std	Y+6, r25	; 0x06
    1738:	8d 83       	std	Y+5, r24	; 0x05
    173a:	8d 81       	ldd	r24, Y+5	; 0x05
    173c:	9e 81       	ldd	r25, Y+6	; 0x06
    173e:	9a 83       	std	Y+2, r25	; 0x02
    1740:	89 83       	std	Y+1, r24	; 0x01
    1742:	89 81       	ldd	r24, Y+1	; 0x01
    1744:	9a 81       	ldd	r25, Y+2	; 0x02
    1746:	01 97       	sbiw	r24, 0x01	; 1
    1748:	f1 f7       	brne	.-4      	; 0x1746 <PASSWORD_getData+0x14c>
    174a:	9a 83       	std	Y+2, r25	; 0x02
    174c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500); 					/* delay for 0.5 second between each input from the keypad. */

		passwordCounter++; 					/* Increment to the next variable in the array. */
    174e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1750:	8f 5f       	subi	r24, 0xFF	; 255
    1752:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_clearScreen();	/* Clear the screen to present new statement on it. */
	LCD_displayStringRowColumn(0, 0, "Enter Password:");	/* Display on LCD (Enter Password:). */
	LCD_moveCursor(1, 0);									/* Move the cursor to the second line. */

	/* This loop to get password values from the user */
	while((passwordCounter < PASSWORD_SIZE))
    1754:	8f 85       	ldd	r24, Y+15	; 0x0f
    1756:	84 30       	cpi	r24, 0x04	; 4
    1758:	08 f4       	brcc	.+2      	; 0x175c <PASSWORD_getData+0x162>
    175a:	6c cf       	rjmp	.-296    	; 0x1634 <PASSWORD_getData+0x3a>

		passwordCounter++; 					/* Increment to the next variable in the array. */
	}

	/* Waiting from user to press enter. */
	while(KEYPAD_getPressedKey() != ENTER){};
    175c:	0e 94 26 11 	call	0x224c	; 0x224c <KEYPAD_getPressedKey>
    1760:	8d 30       	cpi	r24, 0x0D	; 13
    1762:	e1 f7       	brne	.-8      	; 0x175c <PASSWORD_getData+0x162>
}
    1764:	61 96       	adiw	r28, 0x11	; 17
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	f8 94       	cli
    176a:	de bf       	out	0x3e, r29	; 62
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	cd bf       	out	0x3d, r28	; 61
    1770:	cf 91       	pop	r28
    1772:	df 91       	pop	r29
    1774:	1f 91       	pop	r17
    1776:	0f 91       	pop	r16
    1778:	08 95       	ret

0000177a <PASSWORD_sendData>:
/*
 * Description:
 * send password that the user entered to MC2 to check if the password is correct.
 */
void PASSWORD_sendData(uint8 *a_passwordEnterData_ptr)
{
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	00 d0       	rcall	.+0      	; 0x1780 <PASSWORD_sendData+0x6>
    1780:	0f 92       	push	r0
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
    1786:	9b 83       	std	Y+3, r25	; 0x03
    1788:	8a 83       	std	Y+2, r24	; 0x02
	uint8 passwordCounter = 0; 				/* To count the loop to send the values of the password. */
    178a:	19 82       	std	Y+1, r1	; 0x01

	/* Loop on each character from the password and send it to MC2 character by character. */
	for(passwordCounter = 0; passwordCounter < PASSWORD_SIZE; passwordCounter++)
    178c:	19 82       	std	Y+1, r1	; 0x01
    178e:	0e c0       	rjmp	.+28     	; 0x17ac <PASSWORD_sendData+0x32>
	{
		UART_sendByte(a_passwordEnterData_ptr[passwordCounter]); /* Send all 4 password Numbers to MC2. */
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	9b 81       	ldd	r25, Y+3	; 0x03
    179a:	fc 01       	movw	r30, r24
    179c:	e2 0f       	add	r30, r18
    179e:	f3 1f       	adc	r31, r19
    17a0:	80 81       	ld	r24, Z
    17a2:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <UART_sendByte>
void PASSWORD_sendData(uint8 *a_passwordEnterData_ptr)
{
	uint8 passwordCounter = 0; 				/* To count the loop to send the values of the password. */

	/* Loop on each character from the password and send it to MC2 character by character. */
	for(passwordCounter = 0; passwordCounter < PASSWORD_SIZE; passwordCounter++)
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	8f 5f       	subi	r24, 0xFF	; 255
    17aa:	89 83       	std	Y+1, r24	; 0x01
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	84 30       	cpi	r24, 0x04	; 4
    17b0:	78 f3       	brcs	.-34     	; 0x1790 <PASSWORD_sendData+0x16>
	{
		UART_sendByte(a_passwordEnterData_ptr[passwordCounter]); /* Send all 4 password Numbers to MC2. */
	}
}
    17b2:	0f 90       	pop	r0
    17b4:	0f 90       	pop	r0
    17b6:	0f 90       	pop	r0
    17b8:	cf 91       	pop	r28
    17ba:	df 91       	pop	r29
    17bc:	08 95       	ret

000017be <PASSWORD_saveData>:
/*
 * Description:
 * This function points to two arrays, and save to them the values of the passwords that the user write from the keypad.
 */
void PASSWORD_saveData(uint8 *a_passwordFirstSave_ptr, uint8 *a_passwordSecondSave_ptr)
{
    17be:	0f 93       	push	r16
    17c0:	1f 93       	push	r17
    17c2:	df 93       	push	r29
    17c4:	cf 93       	push	r28
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
    17ca:	a2 97       	sbiw	r28, 0x22	; 34
    17cc:	0f b6       	in	r0, 0x3f	; 63
    17ce:	f8 94       	cli
    17d0:	de bf       	out	0x3e, r29	; 62
    17d2:	0f be       	out	0x3f, r0	; 63
    17d4:	cd bf       	out	0x3d, r28	; 61
    17d6:	98 a3       	std	Y+32, r25	; 0x20
    17d8:	8f 8f       	std	Y+31, r24	; 0x1f
    17da:	7a a3       	std	Y+34, r23	; 0x22
    17dc:	69 a3       	std	Y+33, r22	; 0x21
	uint8 passwordFirstSaveCounter = 0; 	/* To count for the first array to save the first input password. */
    17de:	1e 8e       	std	Y+30, r1	; 0x1e
	uint8 passwordSecondSaveCounter = 0;	/* To count for the second array to save the second input password. */
    17e0:	1d 8e       	std	Y+29, r1	; 0x1d

	LCD_clearScreen();										/* Clear the screen to present new statement on it. */
    17e2:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Save Password:"); 	/* Display on LCD (Save Password:). */
    17e6:	24 e0       	ldi	r18, 0x04	; 4
    17e8:	31 e0       	ldi	r19, 0x01	; 1
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	60 e0       	ldi	r22, 0x00	; 0
    17ee:	a9 01       	movw	r20, r18
    17f0:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 0);									/* Move the cursor to the second line. */
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	60 e0       	ldi	r22, 0x00	; 0
    17f8:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <LCD_moveCursor>
    17fc:	90 c0       	rjmp	.+288    	; 0x191e <PASSWORD_saveData+0x160>

	/* This loop to save first input password. */
	while((passwordFirstSaveCounter < PASSWORD_SIZE))
	{
		a_passwordFirstSave_ptr[passwordFirstSaveCounter] = KEYPAD_getPressedKey();		/* Get each keypad input and save its value in a variable from the array. */
    17fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1800:	28 2f       	mov	r18, r24
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1806:	98 a1       	ldd	r25, Y+32	; 0x20
    1808:	8c 01       	movw	r16, r24
    180a:	02 0f       	add	r16, r18
    180c:	13 1f       	adc	r17, r19
    180e:	0e 94 26 11 	call	0x224c	; 0x224c <KEYPAD_getPressedKey>
    1812:	f8 01       	movw	r30, r16
    1814:	80 83       	st	Z, r24

		/*	Check if the input not a number from the keypad, repeat the loop until it get a number. */
		if((a_passwordFirstSave_ptr[passwordFirstSaveCounter]<0) || (a_passwordFirstSave_ptr[passwordFirstSaveCounter]>9))
    1816:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    181e:	98 a1       	ldd	r25, Y+32	; 0x20
    1820:	fc 01       	movw	r30, r24
    1822:	e2 0f       	add	r30, r18
    1824:	f3 1f       	adc	r31, r19
    1826:	80 81       	ld	r24, Z
    1828:	8a 30       	cpi	r24, 0x0A	; 10
    182a:	08 f0       	brcs	.+2      	; 0x182e <PASSWORD_saveData+0x70>
    182c:	78 c0       	rjmp	.+240    	; 0x191e <PASSWORD_saveData+0x160>
		{
			continue;
		}

		LCD_displayCharacter('*'); 		/* For each input form the keypad, the LCD will display (*). */
    182e:	8a e2       	ldi	r24, 0x2A	; 42
    1830:	0e 94 36 14 	call	0x286c	; 0x286c <LCD_displayCharacter>
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	aa ef       	ldi	r26, 0xFA	; 250
    183a:	b3 e4       	ldi	r27, 0x43	; 67
    183c:	89 8f       	std	Y+25, r24	; 0x19
    183e:	9a 8f       	std	Y+26, r25	; 0x1a
    1840:	ab 8f       	std	Y+27, r26	; 0x1b
    1842:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1844:	69 8d       	ldd	r22, Y+25	; 0x19
    1846:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1848:	8b 8d       	ldd	r24, Y+27	; 0x1b
    184a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	4a ef       	ldi	r20, 0xFA	; 250
    1852:	54 e4       	ldi	r21, 0x44	; 68
    1854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	8d 8b       	std	Y+21, r24	; 0x15
    185e:	9e 8b       	std	Y+22, r25	; 0x16
    1860:	af 8b       	std	Y+23, r26	; 0x17
    1862:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1864:	6d 89       	ldd	r22, Y+21	; 0x15
    1866:	7e 89       	ldd	r23, Y+22	; 0x16
    1868:	8f 89       	ldd	r24, Y+23	; 0x17
    186a:	98 8d       	ldd	r25, Y+24	; 0x18
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	40 e8       	ldi	r20, 0x80	; 128
    1872:	5f e3       	ldi	r21, 0x3F	; 63
    1874:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1878:	88 23       	and	r24, r24
    187a:	2c f4       	brge	.+10     	; 0x1886 <PASSWORD_saveData+0xc8>
		__ticks = 1;
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	9c 8b       	std	Y+20, r25	; 0x14
    1882:	8b 8b       	std	Y+19, r24	; 0x13
    1884:	3f c0       	rjmp	.+126    	; 0x1904 <PASSWORD_saveData+0x146>
	else if (__tmp > 65535)
    1886:	6d 89       	ldd	r22, Y+21	; 0x15
    1888:	7e 89       	ldd	r23, Y+22	; 0x16
    188a:	8f 89       	ldd	r24, Y+23	; 0x17
    188c:	98 8d       	ldd	r25, Y+24	; 0x18
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	3f ef       	ldi	r19, 0xFF	; 255
    1892:	4f e7       	ldi	r20, 0x7F	; 127
    1894:	57 e4       	ldi	r21, 0x47	; 71
    1896:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    189a:	18 16       	cp	r1, r24
    189c:	4c f5       	brge	.+82     	; 0x18f0 <PASSWORD_saveData+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189e:	69 8d       	ldd	r22, Y+25	; 0x19
    18a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	40 e2       	ldi	r20, 0x20	; 32
    18ac:	51 e4       	ldi	r21, 0x41	; 65
    18ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	bc 01       	movw	r22, r24
    18b8:	cd 01       	movw	r24, r26
    18ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	9c 8b       	std	Y+20, r25	; 0x14
    18c4:	8b 8b       	std	Y+19, r24	; 0x13
    18c6:	0f c0       	rjmp	.+30     	; 0x18e6 <PASSWORD_saveData+0x128>
    18c8:	88 ec       	ldi	r24, 0xC8	; 200
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	9a 8b       	std	Y+18, r25	; 0x12
    18ce:	89 8b       	std	Y+17, r24	; 0x11
    18d0:	89 89       	ldd	r24, Y+17	; 0x11
    18d2:	9a 89       	ldd	r25, Y+18	; 0x12
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	f1 f7       	brne	.-4      	; 0x18d4 <PASSWORD_saveData+0x116>
    18d8:	9a 8b       	std	Y+18, r25	; 0x12
    18da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18dc:	8b 89       	ldd	r24, Y+19	; 0x13
    18de:	9c 89       	ldd	r25, Y+20	; 0x14
    18e0:	01 97       	sbiw	r24, 0x01	; 1
    18e2:	9c 8b       	std	Y+20, r25	; 0x14
    18e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e6:	8b 89       	ldd	r24, Y+19	; 0x13
    18e8:	9c 89       	ldd	r25, Y+20	; 0x14
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	69 f7       	brne	.-38     	; 0x18c8 <PASSWORD_saveData+0x10a>
    18ee:	14 c0       	rjmp	.+40     	; 0x1918 <PASSWORD_saveData+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18f0:	6d 89       	ldd	r22, Y+21	; 0x15
    18f2:	7e 89       	ldd	r23, Y+22	; 0x16
    18f4:	8f 89       	ldd	r24, Y+23	; 0x17
    18f6:	98 8d       	ldd	r25, Y+24	; 0x18
    18f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	9c 8b       	std	Y+20, r25	; 0x14
    1902:	8b 8b       	std	Y+19, r24	; 0x13
    1904:	8b 89       	ldd	r24, Y+19	; 0x13
    1906:	9c 89       	ldd	r25, Y+20	; 0x14
    1908:	98 8b       	std	Y+16, r25	; 0x10
    190a:	8f 87       	std	Y+15, r24	; 0x0f
    190c:	8f 85       	ldd	r24, Y+15	; 0x0f
    190e:	98 89       	ldd	r25, Y+16	; 0x10
    1910:	01 97       	sbiw	r24, 0x01	; 1
    1912:	f1 f7       	brne	.-4      	; 0x1910 <PASSWORD_saveData+0x152>
    1914:	98 8b       	std	Y+16, r25	; 0x10
    1916:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500); 				/* delay for 0.5 second between each input from the keypad. */

		passwordFirstSaveCounter++; 	/* Increment to the next variable in the array. */
    1918:	8e 8d       	ldd	r24, Y+30	; 0x1e
    191a:	8f 5f       	subi	r24, 0xFF	; 255
    191c:	8e 8f       	std	Y+30, r24	; 0x1e
	LCD_clearScreen();										/* Clear the screen to present new statement on it. */
	LCD_displayStringRowColumn(0, 0, "Save Password:"); 	/* Display on LCD (Save Password:). */
	LCD_moveCursor(1, 0);									/* Move the cursor to the second line. */

	/* This loop to save first input password. */
	while((passwordFirstSaveCounter < PASSWORD_SIZE))
    191e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1920:	84 30       	cpi	r24, 0x04	; 4
    1922:	08 f4       	brcc	.+2      	; 0x1926 <PASSWORD_saveData+0x168>
    1924:	6c cf       	rjmp	.-296    	; 0x17fe <PASSWORD_saveData+0x40>

		passwordFirstSaveCounter++; 	/* Increment to the next variable in the array. */
	}

	/* Waiting from user to press enter */
	while(KEYPAD_getPressedKey() != ENTER){};
    1926:	0e 94 26 11 	call	0x224c	; 0x224c <KEYPAD_getPressedKey>
    192a:	8d 30       	cpi	r24, 0x0D	; 13
    192c:	e1 f7       	brne	.-8      	; 0x1926 <PASSWORD_saveData+0x168>

	/* clear the screen and present on screen (Repeat Password). */
	LCD_clearScreen();					/* Clear the screen to present new statement on it. */
    192e:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Repeat Password:");
    1932:	23 e1       	ldi	r18, 0x13	; 19
    1934:	31 e0       	ldi	r19, 0x01	; 1
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	60 e0       	ldi	r22, 0x00	; 0
    193a:	a9 01       	movw	r20, r18
    193c:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 0);
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	60 e0       	ldi	r22, 0x00	; 0
    1944:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <LCD_moveCursor>
    1948:	90 c0       	rjmp	.+288    	; 0x1a6a <PASSWORD_saveData+0x2ac>

	/* This loop to save second input password */
	while((passwordSecondSaveCounter < PASSWORD_SIZE))
	{
		a_passwordSecondSave_ptr[passwordSecondSaveCounter] = KEYPAD_getPressedKey();	/* Get each keypad input and save its value in a variable from the array. */
    194a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	89 a1       	ldd	r24, Y+33	; 0x21
    1952:	9a a1       	ldd	r25, Y+34	; 0x22
    1954:	8c 01       	movw	r16, r24
    1956:	02 0f       	add	r16, r18
    1958:	13 1f       	adc	r17, r19
    195a:	0e 94 26 11 	call	0x224c	; 0x224c <KEYPAD_getPressedKey>
    195e:	f8 01       	movw	r30, r16
    1960:	80 83       	st	Z, r24

		/*	Check if the input not a number from the keypad, repeat the loop until it get a number.	*/
		if((a_passwordSecondSave_ptr[passwordSecondSaveCounter]<0) || (a_passwordSecondSave_ptr[passwordSecondSaveCounter]>9))
    1962:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1964:	28 2f       	mov	r18, r24
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	89 a1       	ldd	r24, Y+33	; 0x21
    196a:	9a a1       	ldd	r25, Y+34	; 0x22
    196c:	fc 01       	movw	r30, r24
    196e:	e2 0f       	add	r30, r18
    1970:	f3 1f       	adc	r31, r19
    1972:	80 81       	ld	r24, Z
    1974:	8a 30       	cpi	r24, 0x0A	; 10
    1976:	08 f0       	brcs	.+2      	; 0x197a <PASSWORD_saveData+0x1bc>
    1978:	78 c0       	rjmp	.+240    	; 0x1a6a <PASSWORD_saveData+0x2ac>
		{
			continue;
		}

		LCD_displayCharacter('*');   		/* For each input form the keypad, the LCD will display (*). */
    197a:	8a e2       	ldi	r24, 0x2A	; 42
    197c:	0e 94 36 14 	call	0x286c	; 0x286c <LCD_displayCharacter>
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	aa ef       	ldi	r26, 0xFA	; 250
    1986:	b3 e4       	ldi	r27, 0x43	; 67
    1988:	8b 87       	std	Y+11, r24	; 0x0b
    198a:	9c 87       	std	Y+12, r25	; 0x0c
    198c:	ad 87       	std	Y+13, r26	; 0x0d
    198e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1990:	6b 85       	ldd	r22, Y+11	; 0x0b
    1992:	7c 85       	ldd	r23, Y+12	; 0x0c
    1994:	8d 85       	ldd	r24, Y+13	; 0x0d
    1996:	9e 85       	ldd	r25, Y+14	; 0x0e
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	4a ef       	ldi	r20, 0xFA	; 250
    199e:	54 e4       	ldi	r21, 0x44	; 68
    19a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	8f 83       	std	Y+7, r24	; 0x07
    19aa:	98 87       	std	Y+8, r25	; 0x08
    19ac:	a9 87       	std	Y+9, r26	; 0x09
    19ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19b0:	6f 81       	ldd	r22, Y+7	; 0x07
    19b2:	78 85       	ldd	r23, Y+8	; 0x08
    19b4:	89 85       	ldd	r24, Y+9	; 0x09
    19b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	40 e8       	ldi	r20, 0x80	; 128
    19be:	5f e3       	ldi	r21, 0x3F	; 63
    19c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19c4:	88 23       	and	r24, r24
    19c6:	2c f4       	brge	.+10     	; 0x19d2 <PASSWORD_saveData+0x214>
		__ticks = 1;
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	9e 83       	std	Y+6, r25	; 0x06
    19ce:	8d 83       	std	Y+5, r24	; 0x05
    19d0:	3f c0       	rjmp	.+126    	; 0x1a50 <PASSWORD_saveData+0x292>
	else if (__tmp > 65535)
    19d2:	6f 81       	ldd	r22, Y+7	; 0x07
    19d4:	78 85       	ldd	r23, Y+8	; 0x08
    19d6:	89 85       	ldd	r24, Y+9	; 0x09
    19d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	3f ef       	ldi	r19, 0xFF	; 255
    19de:	4f e7       	ldi	r20, 0x7F	; 127
    19e0:	57 e4       	ldi	r21, 0x47	; 71
    19e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19e6:	18 16       	cp	r1, r24
    19e8:	4c f5       	brge	.+82     	; 0x1a3c <PASSWORD_saveData+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	40 e2       	ldi	r20, 0x20	; 32
    19f8:	51 e4       	ldi	r21, 0x41	; 65
    19fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	bc 01       	movw	r22, r24
    1a04:	cd 01       	movw	r24, r26
    1a06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	9e 83       	std	Y+6, r25	; 0x06
    1a10:	8d 83       	std	Y+5, r24	; 0x05
    1a12:	0f c0       	rjmp	.+30     	; 0x1a32 <PASSWORD_saveData+0x274>
    1a14:	88 ec       	ldi	r24, 0xC8	; 200
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	9c 83       	std	Y+4, r25	; 0x04
    1a1a:	8b 83       	std	Y+3, r24	; 0x03
    1a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a20:	01 97       	sbiw	r24, 0x01	; 1
    1a22:	f1 f7       	brne	.-4      	; 0x1a20 <PASSWORD_saveData+0x262>
    1a24:	9c 83       	std	Y+4, r25	; 0x04
    1a26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a28:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	9e 83       	std	Y+6, r25	; 0x06
    1a30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a32:	8d 81       	ldd	r24, Y+5	; 0x05
    1a34:	9e 81       	ldd	r25, Y+6	; 0x06
    1a36:	00 97       	sbiw	r24, 0x00	; 0
    1a38:	69 f7       	brne	.-38     	; 0x1a14 <PASSWORD_saveData+0x256>
    1a3a:	14 c0       	rjmp	.+40     	; 0x1a64 <PASSWORD_saveData+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a3e:	78 85       	ldd	r23, Y+8	; 0x08
    1a40:	89 85       	ldd	r24, Y+9	; 0x09
    1a42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	9e 83       	std	Y+6, r25	; 0x06
    1a4e:	8d 83       	std	Y+5, r24	; 0x05
    1a50:	8d 81       	ldd	r24, Y+5	; 0x05
    1a52:	9e 81       	ldd	r25, Y+6	; 0x06
    1a54:	9a 83       	std	Y+2, r25	; 0x02
    1a56:	89 83       	std	Y+1, r24	; 0x01
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	f1 f7       	brne	.-4      	; 0x1a5c <PASSWORD_saveData+0x29e>
    1a60:	9a 83       	std	Y+2, r25	; 0x02
    1a62:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500); 			 		/* delay for 0.1 second between each input from the keypad. */

		passwordSecondSaveCounter++; 		/* Increment to the next variable in the array. */
    1a64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a66:	8f 5f       	subi	r24, 0xFF	; 255
    1a68:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_clearScreen();					/* Clear the screen to present new statement on it. */
	LCD_displayStringRowColumn(0, 0, "Repeat Password:");
	LCD_moveCursor(1, 0);

	/* This loop to save second input password */
	while((passwordSecondSaveCounter < PASSWORD_SIZE))
    1a6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a6c:	84 30       	cpi	r24, 0x04	; 4
    1a6e:	08 f4       	brcc	.+2      	; 0x1a72 <PASSWORD_saveData+0x2b4>
    1a70:	6c cf       	rjmp	.-296    	; 0x194a <PASSWORD_saveData+0x18c>

		passwordSecondSaveCounter++; 		/* Increment to the next variable in the array. */
	}

	/* Waiting from user to press enter. */
	while(KEYPAD_getPressedKey() != ENTER){};
    1a72:	0e 94 26 11 	call	0x224c	; 0x224c <KEYPAD_getPressedKey>
    1a76:	8d 30       	cpi	r24, 0x0D	; 13
    1a78:	e1 f7       	brne	.-8      	; 0x1a72 <PASSWORD_saveData+0x2b4>
}
    1a7a:	a2 96       	adiw	r28, 0x22	; 34
    1a7c:	0f b6       	in	r0, 0x3f	; 63
    1a7e:	f8 94       	cli
    1a80:	de bf       	out	0x3e, r29	; 62
    1a82:	0f be       	out	0x3f, r0	; 63
    1a84:	cd bf       	out	0x3d, r28	; 61
    1a86:	cf 91       	pop	r28
    1a88:	df 91       	pop	r29
    1a8a:	1f 91       	pop	r17
    1a8c:	0f 91       	pop	r16
    1a8e:	08 95       	ret

00001a90 <PASSWORD_compareFirstSecondValues>:
 * This function used to check if both first and second passwords are equal.
 * If the password is set correctly, start to send the password by UART to the MC2.
 * Else repeat the process.
 */
uint8 PASSWORD_compareFirstSecondValues(uint8 *a_passwordFirstTime_ptr, uint8 *a_passwordSecondTime_ptr)
{
    1a90:	df 93       	push	r29
    1a92:	cf 93       	push	r28
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
    1a98:	27 97       	sbiw	r28, 0x07	; 7
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	de bf       	out	0x3e, r29	; 62
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	9c 83       	std	Y+4, r25	; 0x04
    1aa6:	8b 83       	std	Y+3, r24	; 0x03
    1aa8:	7e 83       	std	Y+6, r23	; 0x06
    1aaa:	6d 83       	std	Y+5, r22	; 0x05
	uint8 counter 	= 0; 			/* to count values in both arrays. */
    1aac:	1a 82       	std	Y+2, r1	; 0x02
	uint8 reference = 0;			/* To take a decision according to the all values are correctly equal or not. */
    1aae:	19 82       	std	Y+1, r1	; 0x01
    1ab0:	1a c0       	rjmp	.+52     	; 0x1ae6 <PASSWORD_compareFirstSecondValues+0x56>

	/* Check if both first and second passwords are equal.  */
	while(counter < PASSWORD_SIZE)
	{
		if(a_passwordFirstTime_ptr[counter] == a_passwordSecondTime_ptr[counter])
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	28 2f       	mov	r18, r24
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	9c 81       	ldd	r25, Y+4	; 0x04
    1abc:	fc 01       	movw	r30, r24
    1abe:	e2 0f       	add	r30, r18
    1ac0:	f3 1f       	adc	r31, r19
    1ac2:	40 81       	ld	r20, Z
    1ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac6:	28 2f       	mov	r18, r24
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	8d 81       	ldd	r24, Y+5	; 0x05
    1acc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ace:	fc 01       	movw	r30, r24
    1ad0:	e2 0f       	add	r30, r18
    1ad2:	f3 1f       	adc	r31, r19
    1ad4:	80 81       	ld	r24, Z
    1ad6:	48 17       	cp	r20, r24
    1ad8:	19 f4       	brne	.+6      	; 0x1ae0 <PASSWORD_compareFirstSecondValues+0x50>
		{
			reference++; 			/* This reference will be indicator to check if 4 characters are equal. */
    1ada:	89 81       	ldd	r24, Y+1	; 0x01
    1adc:	8f 5f       	subi	r24, 0xFF	; 255
    1ade:	89 83       	std	Y+1, r24	; 0x01
		}
		counter++;
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	8f 5f       	subi	r24, 0xFF	; 255
    1ae4:	8a 83       	std	Y+2, r24	; 0x02
{
	uint8 counter 	= 0; 			/* to count values in both arrays. */
	uint8 reference = 0;			/* To take a decision according to the all values are correctly equal or not. */

	/* Check if both first and second passwords are equal.  */
	while(counter < PASSWORD_SIZE)
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	84 30       	cpi	r24, 0x04	; 4
    1aea:	18 f3       	brcs	.-58     	; 0x1ab2 <PASSWORD_compareFirstSecondValues+0x22>
		}
		counter++;
	}

	/* If the password is set correctly, start to send the password by UART to the MC2. */
	if(reference == PASSWORD_SIZE)
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
    1aee:	84 30       	cpi	r24, 0x04	; 4
    1af0:	19 f4       	brne	.+6      	; 0x1af8 <PASSWORD_compareFirstSecondValues+0x68>
	{
		return TRUE;
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	8f 83       	std	Y+7, r24	; 0x07
    1af6:	01 c0       	rjmp	.+2      	; 0x1afa <PASSWORD_compareFirstSecondValues+0x6a>
	}

	/* Return false to repeat the process. */
	else
	{
		return FALSE;
    1af8:	1f 82       	std	Y+7, r1	; 0x07
    1afa:	8f 81       	ldd	r24, Y+7	; 0x07
	}

}
    1afc:	27 96       	adiw	r28, 0x07	; 7
    1afe:	0f b6       	in	r0, 0x3f	; 63
    1b00:	f8 94       	cli
    1b02:	de bf       	out	0x3e, r29	; 62
    1b04:	0f be       	out	0x3f, r0	; 63
    1b06:	cd bf       	out	0x3d, r28	; 61
    1b08:	cf 91       	pop	r28
    1b0a:	df 91       	pop	r29
    1b0c:	08 95       	ret

00001b0e <TIMER0_delayOpenClose>:
/*
 * Description;
 * This function use Timer0 in AVR to delay display while opening and closing the door.
 */
void TIMER0_delayOpenClose(void)
{
    1b0e:	df 93       	push	r29
    1b10:	cf 93       	push	r28
    1b12:	cd b7       	in	r28, 0x3d	; 61
    1b14:	de b7       	in	r29, 0x3e	; 62
	g_timerCounter++;								/* For each interrupt this counter will increment by one. */
    1b16:	80 91 34 01 	lds	r24, 0x0134
    1b1a:	90 91 35 01 	lds	r25, 0x0135
    1b1e:	01 96       	adiw	r24, 0x01	; 1
    1b20:	90 93 35 01 	sts	0x0135, r25
    1b24:	80 93 34 01 	sts	0x0134, r24

	/* Check if the timer counter reach the required limit. */
    if(g_timerCounter == TIMER_OPEN_CLOSE_DOOR)
    1b28:	80 91 34 01 	lds	r24, 0x0134
    1b2c:	90 91 35 01 	lds	r25, 0x0135
    1b30:	89 3e       	cpi	r24, 0xE9	; 233
    1b32:	91 05       	cpc	r25, r1
    1b34:	49 f4       	brne	.+18     	; 0x1b48 <TIMER0_delayOpenClose+0x3a>
    {
    	TIMER_deinit();								/* After the number of required interrupt is ended, the timer will stop by this function. */
    1b36:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <TIMER_deinit>
    	g_timerFlag = 1;							/* Open this flag will make the delay stop, must be closed again by the developer if he wants to use the delay function again. */
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	80 93 36 01 	sts	0x0136, r24
        g_timerCounter = 0;							/* make timer counter zero again to be able to use it again and count up form zero. */
    1b40:	10 92 35 01 	sts	0x0135, r1
    1b44:	10 92 34 01 	sts	0x0134, r1
    }
}
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	08 95       	ret

00001b4e <TIMER0_delayHold>:
/*
 * Description;
 * This function use Timer0 in AVR to delay display while holding the door.
 */
void TIMER0_delayHold(void)
{
    1b4e:	df 93       	push	r29
    1b50:	cf 93       	push	r28
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
	g_timerCounter++;								/* For each interrupt this counter will increment by one. */
    1b56:	80 91 34 01 	lds	r24, 0x0134
    1b5a:	90 91 35 01 	lds	r25, 0x0135
    1b5e:	01 96       	adiw	r24, 0x01	; 1
    1b60:	90 93 35 01 	sts	0x0135, r25
    1b64:	80 93 34 01 	sts	0x0134, r24
    if(g_timerCounter == TIMER_HOLD_DOOR)
    1b68:	80 91 34 01 	lds	r24, 0x0134
    1b6c:	90 91 35 01 	lds	r25, 0x0135
    1b70:	8e 32       	cpi	r24, 0x2E	; 46
    1b72:	91 05       	cpc	r25, r1
    1b74:	49 f4       	brne	.+18     	; 0x1b88 <TIMER0_delayHold+0x3a>
    {
        TIMER_deinit();								/* After the number of required interrupt is ended, the timer will stop by this function. */
    1b76:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <TIMER_deinit>
    	g_timerFlag = 1;							/* Open this flag will make the delay stop, must be closed again by the developer if he wants to use the delay function again. */
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	80 93 36 01 	sts	0x0136, r24
        g_timerCounter = 0;							/* make timer counter zero again to be able to use it again and count up form zero. */
    1b80:	10 92 35 01 	sts	0x0135, r1
    1b84:	10 92 34 01 	sts	0x0134, r1
    }
}
    1b88:	cf 91       	pop	r28
    1b8a:	df 91       	pop	r29
    1b8c:	08 95       	ret

00001b8e <TIMER0_delayBuzzer>:
/*
 * Description;
 * This function use Timer0 in AVR to delay display while buzzer is activated.
 */
void TIMER0_delayBuzzer(void)
{
    1b8e:	df 93       	push	r29
    1b90:	cf 93       	push	r28
    1b92:	cd b7       	in	r28, 0x3d	; 61
    1b94:	de b7       	in	r29, 0x3e	; 62
	g_timerCounter++;								/* For each interrupt this counter will increment by one. */
    1b96:	80 91 34 01 	lds	r24, 0x0134
    1b9a:	90 91 35 01 	lds	r25, 0x0135
    1b9e:	01 96       	adiw	r24, 0x01	; 1
    1ba0:	90 93 35 01 	sts	0x0135, r25
    1ba4:	80 93 34 01 	sts	0x0134, r24
    if(g_timerCounter == TIMER_BUZZER)
    1ba8:	80 91 34 01 	lds	r24, 0x0134
    1bac:	90 91 35 01 	lds	r25, 0x0135
    1bb0:	23 e0       	ldi	r18, 0x03	; 3
    1bb2:	82 3a       	cpi	r24, 0xA2	; 162
    1bb4:	92 07       	cpc	r25, r18
    1bb6:	49 f4       	brne	.+18     	; 0x1bca <TIMER0_delayBuzzer+0x3c>
    {
        TIMER_deinit();								/* After the number of required interrupt is ended, the timer will stop by this function. */
    1bb8:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <TIMER_deinit>
    	g_timerFlag = 1;							/* Open this flag will make the delay stop, must be closed again by the developer if he wants to use the delay function again. */
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	80 93 36 01 	sts	0x0136, r24
        g_timerCounter = 0;							/* make timer counter zero again to be able to use it again and count up form zero. */
    1bc2:	10 92 35 01 	sts	0x0135, r1
    1bc6:	10 92 34 01 	sts	0x0134, r1
    }
}
    1bca:	cf 91       	pop	r28
    1bcc:	df 91       	pop	r29
    1bce:	08 95       	ret

00001bd0 <GPIO_setupPinDirection>:
 * Description:
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1bd0:	df 93       	push	r29
    1bd2:	cf 93       	push	r28
    1bd4:	00 d0       	rcall	.+0      	; 0x1bd6 <GPIO_setupPinDirection+0x6>
    1bd6:	00 d0       	rcall	.+0      	; 0x1bd8 <GPIO_setupPinDirection+0x8>
    1bd8:	0f 92       	push	r0
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
    1bde:	89 83       	std	Y+1, r24	; 0x01
    1be0:	6a 83       	std	Y+2, r22	; 0x02
    1be2:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	84 30       	cpi	r24, 0x04	; 4
    1be8:	08 f0       	brcs	.+2      	; 0x1bec <GPIO_setupPinDirection+0x1c>
    1bea:	d5 c0       	rjmp	.+426    	; 0x1d96 <GPIO_setupPinDirection+0x1c6>
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	88 30       	cpi	r24, 0x08	; 8
    1bf0:	08 f0       	brcs	.+2      	; 0x1bf4 <GPIO_setupPinDirection+0x24>
    1bf2:	d1 c0       	rjmp	.+418    	; 0x1d96 <GPIO_setupPinDirection+0x1c6>
	{
		/* DO NOTHING */
	}
	else
	{
		switch(port_num)
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	3d 83       	std	Y+5, r19	; 0x05
    1bfc:	2c 83       	std	Y+4, r18	; 0x04
    1bfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1c00:	9d 81       	ldd	r25, Y+5	; 0x05
    1c02:	81 30       	cpi	r24, 0x01	; 1
    1c04:	91 05       	cpc	r25, r1
    1c06:	09 f4       	brne	.+2      	; 0x1c0a <GPIO_setupPinDirection+0x3a>
    1c08:	43 c0       	rjmp	.+134    	; 0x1c90 <GPIO_setupPinDirection+0xc0>
    1c0a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c0c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c0e:	22 30       	cpi	r18, 0x02	; 2
    1c10:	31 05       	cpc	r19, r1
    1c12:	2c f4       	brge	.+10     	; 0x1c1e <GPIO_setupPinDirection+0x4e>
    1c14:	8c 81       	ldd	r24, Y+4	; 0x04
    1c16:	9d 81       	ldd	r25, Y+5	; 0x05
    1c18:	00 97       	sbiw	r24, 0x00	; 0
    1c1a:	71 f0       	breq	.+28     	; 0x1c38 <GPIO_setupPinDirection+0x68>
    1c1c:	bc c0       	rjmp	.+376    	; 0x1d96 <GPIO_setupPinDirection+0x1c6>
    1c1e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c20:	3d 81       	ldd	r19, Y+5	; 0x05
    1c22:	22 30       	cpi	r18, 0x02	; 2
    1c24:	31 05       	cpc	r19, r1
    1c26:	09 f4       	brne	.+2      	; 0x1c2a <GPIO_setupPinDirection+0x5a>
    1c28:	5f c0       	rjmp	.+190    	; 0x1ce8 <GPIO_setupPinDirection+0x118>
    1c2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c2e:	83 30       	cpi	r24, 0x03	; 3
    1c30:	91 05       	cpc	r25, r1
    1c32:	09 f4       	brne	.+2      	; 0x1c36 <GPIO_setupPinDirection+0x66>
    1c34:	85 c0       	rjmp	.+266    	; 0x1d40 <GPIO_setupPinDirection+0x170>
    1c36:	af c0       	rjmp	.+350    	; 0x1d96 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	81 30       	cpi	r24, 0x01	; 1
    1c3c:	a1 f4       	brne	.+40     	; 0x1c66 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1c3e:	aa e3       	ldi	r26, 0x3A	; 58
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	ea e3       	ldi	r30, 0x3A	; 58
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	48 2f       	mov	r20, r24
    1c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4c:	28 2f       	mov	r18, r24
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	02 2e       	mov	r0, r18
    1c56:	02 c0       	rjmp	.+4      	; 0x1c5c <GPIO_setupPinDirection+0x8c>
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	0a 94       	dec	r0
    1c5e:	e2 f7       	brpl	.-8      	; 0x1c58 <GPIO_setupPinDirection+0x88>
    1c60:	84 2b       	or	r24, r20
    1c62:	8c 93       	st	X, r24
    1c64:	98 c0       	rjmp	.+304    	; 0x1d96 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1c66:	aa e3       	ldi	r26, 0x3A	; 58
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	ea e3       	ldi	r30, 0x3A	; 58
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	48 2f       	mov	r20, r24
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	28 2f       	mov	r18, r24
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	02 2e       	mov	r0, r18
    1c7e:	02 c0       	rjmp	.+4      	; 0x1c84 <GPIO_setupPinDirection+0xb4>
    1c80:	88 0f       	add	r24, r24
    1c82:	99 1f       	adc	r25, r25
    1c84:	0a 94       	dec	r0
    1c86:	e2 f7       	brpl	.-8      	; 0x1c80 <GPIO_setupPinDirection+0xb0>
    1c88:	80 95       	com	r24
    1c8a:	84 23       	and	r24, r20
    1c8c:	8c 93       	st	X, r24
    1c8e:	83 c0       	rjmp	.+262    	; 0x1d96 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	81 30       	cpi	r24, 0x01	; 1
    1c94:	a1 f4       	brne	.+40     	; 0x1cbe <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1c96:	a7 e3       	ldi	r26, 0x37	; 55
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e7 e3       	ldi	r30, 0x37	; 55
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	48 2f       	mov	r20, r24
    1ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	02 2e       	mov	r0, r18
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <GPIO_setupPinDirection+0xe4>
    1cb0:	88 0f       	add	r24, r24
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	0a 94       	dec	r0
    1cb6:	e2 f7       	brpl	.-8      	; 0x1cb0 <GPIO_setupPinDirection+0xe0>
    1cb8:	84 2b       	or	r24, r20
    1cba:	8c 93       	st	X, r24
    1cbc:	6c c0       	rjmp	.+216    	; 0x1d96 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1cbe:	a7 e3       	ldi	r26, 0x37	; 55
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	e7 e3       	ldi	r30, 0x37	; 55
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	48 2f       	mov	r20, r24
    1cca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	02 2e       	mov	r0, r18
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <GPIO_setupPinDirection+0x10c>
    1cd8:	88 0f       	add	r24, r24
    1cda:	99 1f       	adc	r25, r25
    1cdc:	0a 94       	dec	r0
    1cde:	e2 f7       	brpl	.-8      	; 0x1cd8 <GPIO_setupPinDirection+0x108>
    1ce0:	80 95       	com	r24
    1ce2:	84 23       	and	r24, r20
    1ce4:	8c 93       	st	X, r24
    1ce6:	57 c0       	rjmp	.+174    	; 0x1d96 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	81 30       	cpi	r24, 0x01	; 1
    1cec:	a1 f4       	brne	.+40     	; 0x1d16 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1cee:	a4 e3       	ldi	r26, 0x34	; 52
    1cf0:	b0 e0       	ldi	r27, 0x00	; 0
    1cf2:	e4 e3       	ldi	r30, 0x34	; 52
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	48 2f       	mov	r20, r24
    1cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfc:	28 2f       	mov	r18, r24
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	02 2e       	mov	r0, r18
    1d06:	02 c0       	rjmp	.+4      	; 0x1d0c <GPIO_setupPinDirection+0x13c>
    1d08:	88 0f       	add	r24, r24
    1d0a:	99 1f       	adc	r25, r25
    1d0c:	0a 94       	dec	r0
    1d0e:	e2 f7       	brpl	.-8      	; 0x1d08 <GPIO_setupPinDirection+0x138>
    1d10:	84 2b       	or	r24, r20
    1d12:	8c 93       	st	X, r24
    1d14:	40 c0       	rjmp	.+128    	; 0x1d96 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1d16:	a4 e3       	ldi	r26, 0x34	; 52
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	e4 e3       	ldi	r30, 0x34	; 52
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	48 2f       	mov	r20, r24
    1d22:	8a 81       	ldd	r24, Y+2	; 0x02
    1d24:	28 2f       	mov	r18, r24
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	02 2e       	mov	r0, r18
    1d2e:	02 c0       	rjmp	.+4      	; 0x1d34 <GPIO_setupPinDirection+0x164>
    1d30:	88 0f       	add	r24, r24
    1d32:	99 1f       	adc	r25, r25
    1d34:	0a 94       	dec	r0
    1d36:	e2 f7       	brpl	.-8      	; 0x1d30 <GPIO_setupPinDirection+0x160>
    1d38:	80 95       	com	r24
    1d3a:	84 23       	and	r24, r20
    1d3c:	8c 93       	st	X, r24
    1d3e:	2b c0       	rjmp	.+86     	; 0x1d96 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1d40:	8b 81       	ldd	r24, Y+3	; 0x03
    1d42:	81 30       	cpi	r24, 0x01	; 1
    1d44:	a1 f4       	brne	.+40     	; 0x1d6e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1d46:	a1 e3       	ldi	r26, 0x31	; 49
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e1 e3       	ldi	r30, 0x31	; 49
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	48 2f       	mov	r20, r24
    1d52:	8a 81       	ldd	r24, Y+2	; 0x02
    1d54:	28 2f       	mov	r18, r24
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	02 2e       	mov	r0, r18
    1d5e:	02 c0       	rjmp	.+4      	; 0x1d64 <GPIO_setupPinDirection+0x194>
    1d60:	88 0f       	add	r24, r24
    1d62:	99 1f       	adc	r25, r25
    1d64:	0a 94       	dec	r0
    1d66:	e2 f7       	brpl	.-8      	; 0x1d60 <GPIO_setupPinDirection+0x190>
    1d68:	84 2b       	or	r24, r20
    1d6a:	8c 93       	st	X, r24
    1d6c:	14 c0       	rjmp	.+40     	; 0x1d96 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1d6e:	a1 e3       	ldi	r26, 0x31	; 49
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	e1 e3       	ldi	r30, 0x31	; 49
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	48 2f       	mov	r20, r24
    1d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7c:	28 2f       	mov	r18, r24
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	02 2e       	mov	r0, r18
    1d86:	02 c0       	rjmp	.+4      	; 0x1d8c <GPIO_setupPinDirection+0x1bc>
    1d88:	88 0f       	add	r24, r24
    1d8a:	99 1f       	adc	r25, r25
    1d8c:	0a 94       	dec	r0
    1d8e:	e2 f7       	brpl	.-8      	; 0x1d88 <GPIO_setupPinDirection+0x1b8>
    1d90:	80 95       	com	r24
    1d92:	84 23       	and	r24, r20
    1d94:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	0f 90       	pop	r0
    1d9c:	0f 90       	pop	r0
    1d9e:	0f 90       	pop	r0
    1da0:	cf 91       	pop	r28
    1da2:	df 91       	pop	r29
    1da4:	08 95       	ret

00001da6 <GPIO_writePin>:
 * Write the value logic high or logic low on the required pin.
 * if the input port number or pin number are not correct, the function will not handle the request.
 * if the pin input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1da6:	df 93       	push	r29
    1da8:	cf 93       	push	r28
    1daa:	00 d0       	rcall	.+0      	; 0x1dac <GPIO_writePin+0x6>
    1dac:	00 d0       	rcall	.+0      	; 0x1dae <GPIO_writePin+0x8>
    1dae:	0f 92       	push	r0
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	89 83       	std	Y+1, r24	; 0x01
    1db6:	6a 83       	std	Y+2, r22	; 0x02
    1db8:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
    1dba:	89 81       	ldd	r24, Y+1	; 0x01
    1dbc:	84 30       	cpi	r24, 0x04	; 4
    1dbe:	08 f0       	brcs	.+2      	; 0x1dc2 <GPIO_writePin+0x1c>
    1dc0:	d5 c0       	rjmp	.+426    	; 0x1f6c <GPIO_writePin+0x1c6>
    1dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc4:	88 30       	cpi	r24, 0x08	; 8
    1dc6:	08 f0       	brcs	.+2      	; 0x1dca <GPIO_writePin+0x24>
    1dc8:	d1 c0       	rjmp	.+418    	; 0x1f6c <GPIO_writePin+0x1c6>
	{
		/* DO NOTHING */
	}
	else
	{
		switch(port_num)
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
    1dcc:	28 2f       	mov	r18, r24
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	3d 83       	std	Y+5, r19	; 0x05
    1dd2:	2c 83       	std	Y+4, r18	; 0x04
    1dd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd6:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd8:	81 30       	cpi	r24, 0x01	; 1
    1dda:	91 05       	cpc	r25, r1
    1ddc:	09 f4       	brne	.+2      	; 0x1de0 <GPIO_writePin+0x3a>
    1dde:	43 c0       	rjmp	.+134    	; 0x1e66 <GPIO_writePin+0xc0>
    1de0:	2c 81       	ldd	r18, Y+4	; 0x04
    1de2:	3d 81       	ldd	r19, Y+5	; 0x05
    1de4:	22 30       	cpi	r18, 0x02	; 2
    1de6:	31 05       	cpc	r19, r1
    1de8:	2c f4       	brge	.+10     	; 0x1df4 <GPIO_writePin+0x4e>
    1dea:	8c 81       	ldd	r24, Y+4	; 0x04
    1dec:	9d 81       	ldd	r25, Y+5	; 0x05
    1dee:	00 97       	sbiw	r24, 0x00	; 0
    1df0:	71 f0       	breq	.+28     	; 0x1e0e <GPIO_writePin+0x68>
    1df2:	bc c0       	rjmp	.+376    	; 0x1f6c <GPIO_writePin+0x1c6>
    1df4:	2c 81       	ldd	r18, Y+4	; 0x04
    1df6:	3d 81       	ldd	r19, Y+5	; 0x05
    1df8:	22 30       	cpi	r18, 0x02	; 2
    1dfa:	31 05       	cpc	r19, r1
    1dfc:	09 f4       	brne	.+2      	; 0x1e00 <GPIO_writePin+0x5a>
    1dfe:	5f c0       	rjmp	.+190    	; 0x1ebe <GPIO_writePin+0x118>
    1e00:	8c 81       	ldd	r24, Y+4	; 0x04
    1e02:	9d 81       	ldd	r25, Y+5	; 0x05
    1e04:	83 30       	cpi	r24, 0x03	; 3
    1e06:	91 05       	cpc	r25, r1
    1e08:	09 f4       	brne	.+2      	; 0x1e0c <GPIO_writePin+0x66>
    1e0a:	85 c0       	rjmp	.+266    	; 0x1f16 <GPIO_writePin+0x170>
    1e0c:	af c0       	rjmp	.+350    	; 0x1f6c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e10:	81 30       	cpi	r24, 0x01	; 1
    1e12:	a1 f4       	brne	.+40     	; 0x1e3c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1e14:	ab e3       	ldi	r26, 0x3B	; 59
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	eb e3       	ldi	r30, 0x3B	; 59
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	48 2f       	mov	r20, r24
    1e20:	8a 81       	ldd	r24, Y+2	; 0x02
    1e22:	28 2f       	mov	r18, r24
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	02 2e       	mov	r0, r18
    1e2c:	02 c0       	rjmp	.+4      	; 0x1e32 <GPIO_writePin+0x8c>
    1e2e:	88 0f       	add	r24, r24
    1e30:	99 1f       	adc	r25, r25
    1e32:	0a 94       	dec	r0
    1e34:	e2 f7       	brpl	.-8      	; 0x1e2e <GPIO_writePin+0x88>
    1e36:	84 2b       	or	r24, r20
    1e38:	8c 93       	st	X, r24
    1e3a:	98 c0       	rjmp	.+304    	; 0x1f6c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1e3c:	ab e3       	ldi	r26, 0x3B	; 59
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	eb e3       	ldi	r30, 0x3B	; 59
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	48 2f       	mov	r20, r24
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4a:	28 2f       	mov	r18, r24
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	02 2e       	mov	r0, r18
    1e54:	02 c0       	rjmp	.+4      	; 0x1e5a <GPIO_writePin+0xb4>
    1e56:	88 0f       	add	r24, r24
    1e58:	99 1f       	adc	r25, r25
    1e5a:	0a 94       	dec	r0
    1e5c:	e2 f7       	brpl	.-8      	; 0x1e56 <GPIO_writePin+0xb0>
    1e5e:	80 95       	com	r24
    1e60:	84 23       	and	r24, r20
    1e62:	8c 93       	st	X, r24
    1e64:	83 c0       	rjmp	.+262    	; 0x1f6c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1e66:	8b 81       	ldd	r24, Y+3	; 0x03
    1e68:	81 30       	cpi	r24, 0x01	; 1
    1e6a:	a1 f4       	brne	.+40     	; 0x1e94 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1e6c:	a8 e3       	ldi	r26, 0x38	; 56
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	e8 e3       	ldi	r30, 0x38	; 56
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	80 81       	ld	r24, Z
    1e76:	48 2f       	mov	r20, r24
    1e78:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7a:	28 2f       	mov	r18, r24
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	02 2e       	mov	r0, r18
    1e84:	02 c0       	rjmp	.+4      	; 0x1e8a <GPIO_writePin+0xe4>
    1e86:	88 0f       	add	r24, r24
    1e88:	99 1f       	adc	r25, r25
    1e8a:	0a 94       	dec	r0
    1e8c:	e2 f7       	brpl	.-8      	; 0x1e86 <GPIO_writePin+0xe0>
    1e8e:	84 2b       	or	r24, r20
    1e90:	8c 93       	st	X, r24
    1e92:	6c c0       	rjmp	.+216    	; 0x1f6c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1e94:	a8 e3       	ldi	r26, 0x38	; 56
    1e96:	b0 e0       	ldi	r27, 0x00	; 0
    1e98:	e8 e3       	ldi	r30, 0x38	; 56
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 81       	ld	r24, Z
    1e9e:	48 2f       	mov	r20, r24
    1ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea2:	28 2f       	mov	r18, r24
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	02 2e       	mov	r0, r18
    1eac:	02 c0       	rjmp	.+4      	; 0x1eb2 <GPIO_writePin+0x10c>
    1eae:	88 0f       	add	r24, r24
    1eb0:	99 1f       	adc	r25, r25
    1eb2:	0a 94       	dec	r0
    1eb4:	e2 f7       	brpl	.-8      	; 0x1eae <GPIO_writePin+0x108>
    1eb6:	80 95       	com	r24
    1eb8:	84 23       	and	r24, r20
    1eba:	8c 93       	st	X, r24
    1ebc:	57 c0       	rjmp	.+174    	; 0x1f6c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec0:	81 30       	cpi	r24, 0x01	; 1
    1ec2:	a1 f4       	brne	.+40     	; 0x1eec <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1ec4:	a5 e3       	ldi	r26, 0x35	; 53
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	e5 e3       	ldi	r30, 0x35	; 53
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	48 2f       	mov	r20, r24
    1ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed2:	28 2f       	mov	r18, r24
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	02 2e       	mov	r0, r18
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <GPIO_writePin+0x13c>
    1ede:	88 0f       	add	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	0a 94       	dec	r0
    1ee4:	e2 f7       	brpl	.-8      	; 0x1ede <GPIO_writePin+0x138>
    1ee6:	84 2b       	or	r24, r20
    1ee8:	8c 93       	st	X, r24
    1eea:	40 c0       	rjmp	.+128    	; 0x1f6c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1eec:	a5 e3       	ldi	r26, 0x35	; 53
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	e5 e3       	ldi	r30, 0x35	; 53
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	48 2f       	mov	r20, r24
    1ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    1efa:	28 2f       	mov	r18, r24
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	02 2e       	mov	r0, r18
    1f04:	02 c0       	rjmp	.+4      	; 0x1f0a <GPIO_writePin+0x164>
    1f06:	88 0f       	add	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	0a 94       	dec	r0
    1f0c:	e2 f7       	brpl	.-8      	; 0x1f06 <GPIO_writePin+0x160>
    1f0e:	80 95       	com	r24
    1f10:	84 23       	and	r24, r20
    1f12:	8c 93       	st	X, r24
    1f14:	2b c0       	rjmp	.+86     	; 0x1f6c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1f16:	8b 81       	ldd	r24, Y+3	; 0x03
    1f18:	81 30       	cpi	r24, 0x01	; 1
    1f1a:	a1 f4       	brne	.+40     	; 0x1f44 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1f1c:	a2 e3       	ldi	r26, 0x32	; 50
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	e2 e3       	ldi	r30, 0x32	; 50
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	48 2f       	mov	r20, r24
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	28 2f       	mov	r18, r24
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	02 2e       	mov	r0, r18
    1f34:	02 c0       	rjmp	.+4      	; 0x1f3a <GPIO_writePin+0x194>
    1f36:	88 0f       	add	r24, r24
    1f38:	99 1f       	adc	r25, r25
    1f3a:	0a 94       	dec	r0
    1f3c:	e2 f7       	brpl	.-8      	; 0x1f36 <GPIO_writePin+0x190>
    1f3e:	84 2b       	or	r24, r20
    1f40:	8c 93       	st	X, r24
    1f42:	14 c0       	rjmp	.+40     	; 0x1f6c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1f44:	a2 e3       	ldi	r26, 0x32	; 50
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	e2 e3       	ldi	r30, 0x32	; 50
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	48 2f       	mov	r20, r24
    1f50:	8a 81       	ldd	r24, Y+2	; 0x02
    1f52:	28 2f       	mov	r18, r24
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	02 2e       	mov	r0, r18
    1f5c:	02 c0       	rjmp	.+4      	; 0x1f62 <GPIO_writePin+0x1bc>
    1f5e:	88 0f       	add	r24, r24
    1f60:	99 1f       	adc	r25, r25
    1f62:	0a 94       	dec	r0
    1f64:	e2 f7       	brpl	.-8      	; 0x1f5e <GPIO_writePin+0x1b8>
    1f66:	80 95       	com	r24
    1f68:	84 23       	and	r24, r20
    1f6a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1f6c:	0f 90       	pop	r0
    1f6e:	0f 90       	pop	r0
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	08 95       	ret

00001f7c <GPIO_readPin>:
 * Description:
 * Read and return the value for the  required pin, it should be logic high or logic low.
 * if the input port number or pin number are not correct, the function will return logic low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1f7c:	df 93       	push	r29
    1f7e:	cf 93       	push	r28
    1f80:	00 d0       	rcall	.+0      	; 0x1f82 <GPIO_readPin+0x6>
    1f82:	00 d0       	rcall	.+0      	; 0x1f84 <GPIO_readPin+0x8>
    1f84:	0f 92       	push	r0
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
    1f8a:	8a 83       	std	Y+2, r24	; 0x02
    1f8c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1f8e:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
    1f90:	8a 81       	ldd	r24, Y+2	; 0x02
    1f92:	84 30       	cpi	r24, 0x04	; 4
    1f94:	08 f0       	brcs	.+2      	; 0x1f98 <GPIO_readPin+0x1c>
    1f96:	84 c0       	rjmp	.+264    	; 0x20a0 <GPIO_readPin+0x124>
    1f98:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9a:	88 30       	cpi	r24, 0x08	; 8
    1f9c:	08 f0       	brcs	.+2      	; 0x1fa0 <GPIO_readPin+0x24>
    1f9e:	80 c0       	rjmp	.+256    	; 0x20a0 <GPIO_readPin+0x124>
	{
		/* DO NOTHING */
	}
	else
	{
		switch(port_num)
    1fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa2:	28 2f       	mov	r18, r24
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	3d 83       	std	Y+5, r19	; 0x05
    1fa8:	2c 83       	std	Y+4, r18	; 0x04
    1faa:	4c 81       	ldd	r20, Y+4	; 0x04
    1fac:	5d 81       	ldd	r21, Y+5	; 0x05
    1fae:	41 30       	cpi	r20, 0x01	; 1
    1fb0:	51 05       	cpc	r21, r1
    1fb2:	79 f1       	breq	.+94     	; 0x2012 <GPIO_readPin+0x96>
    1fb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb8:	82 30       	cpi	r24, 0x02	; 2
    1fba:	91 05       	cpc	r25, r1
    1fbc:	34 f4       	brge	.+12     	; 0x1fca <GPIO_readPin+0x4e>
    1fbe:	2c 81       	ldd	r18, Y+4	; 0x04
    1fc0:	3d 81       	ldd	r19, Y+5	; 0x05
    1fc2:	21 15       	cp	r18, r1
    1fc4:	31 05       	cpc	r19, r1
    1fc6:	69 f0       	breq	.+26     	; 0x1fe2 <GPIO_readPin+0x66>
    1fc8:	6b c0       	rjmp	.+214    	; 0x20a0 <GPIO_readPin+0x124>
    1fca:	4c 81       	ldd	r20, Y+4	; 0x04
    1fcc:	5d 81       	ldd	r21, Y+5	; 0x05
    1fce:	42 30       	cpi	r20, 0x02	; 2
    1fd0:	51 05       	cpc	r21, r1
    1fd2:	b9 f1       	breq	.+110    	; 0x2042 <GPIO_readPin+0xc6>
    1fd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd8:	83 30       	cpi	r24, 0x03	; 3
    1fda:	91 05       	cpc	r25, r1
    1fdc:	09 f4       	brne	.+2      	; 0x1fe0 <GPIO_readPin+0x64>
    1fde:	49 c0       	rjmp	.+146    	; 0x2072 <GPIO_readPin+0xf6>
    1fe0:	5f c0       	rjmp	.+190    	; 0x20a0 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1fe2:	e9 e3       	ldi	r30, 0x39	; 57
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	80 81       	ld	r24, Z
    1fe8:	28 2f       	mov	r18, r24
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	8b 81       	ldd	r24, Y+3	; 0x03
    1fee:	88 2f       	mov	r24, r24
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	a9 01       	movw	r20, r18
    1ff4:	02 c0       	rjmp	.+4      	; 0x1ffa <GPIO_readPin+0x7e>
    1ff6:	55 95       	asr	r21
    1ff8:	47 95       	ror	r20
    1ffa:	8a 95       	dec	r24
    1ffc:	e2 f7       	brpl	.-8      	; 0x1ff6 <GPIO_readPin+0x7a>
    1ffe:	ca 01       	movw	r24, r20
    2000:	81 70       	andi	r24, 0x01	; 1
    2002:	90 70       	andi	r25, 0x00	; 0
    2004:	88 23       	and	r24, r24
    2006:	19 f0       	breq	.+6      	; 0x200e <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	89 83       	std	Y+1, r24	; 0x01
    200c:	49 c0       	rjmp	.+146    	; 0x20a0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    200e:	19 82       	std	Y+1, r1	; 0x01
    2010:	47 c0       	rjmp	.+142    	; 0x20a0 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2012:	e6 e3       	ldi	r30, 0x36	; 54
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	80 81       	ld	r24, Z
    2018:	28 2f       	mov	r18, r24
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	8b 81       	ldd	r24, Y+3	; 0x03
    201e:	88 2f       	mov	r24, r24
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	a9 01       	movw	r20, r18
    2024:	02 c0       	rjmp	.+4      	; 0x202a <GPIO_readPin+0xae>
    2026:	55 95       	asr	r21
    2028:	47 95       	ror	r20
    202a:	8a 95       	dec	r24
    202c:	e2 f7       	brpl	.-8      	; 0x2026 <GPIO_readPin+0xaa>
    202e:	ca 01       	movw	r24, r20
    2030:	81 70       	andi	r24, 0x01	; 1
    2032:	90 70       	andi	r25, 0x00	; 0
    2034:	88 23       	and	r24, r24
    2036:	19 f0       	breq	.+6      	; 0x203e <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	89 83       	std	Y+1, r24	; 0x01
    203c:	31 c0       	rjmp	.+98     	; 0x20a0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    203e:	19 82       	std	Y+1, r1	; 0x01
    2040:	2f c0       	rjmp	.+94     	; 0x20a0 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2042:	e3 e3       	ldi	r30, 0x33	; 51
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	80 81       	ld	r24, Z
    2048:	28 2f       	mov	r18, r24
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	8b 81       	ldd	r24, Y+3	; 0x03
    204e:	88 2f       	mov	r24, r24
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	a9 01       	movw	r20, r18
    2054:	02 c0       	rjmp	.+4      	; 0x205a <GPIO_readPin+0xde>
    2056:	55 95       	asr	r21
    2058:	47 95       	ror	r20
    205a:	8a 95       	dec	r24
    205c:	e2 f7       	brpl	.-8      	; 0x2056 <GPIO_readPin+0xda>
    205e:	ca 01       	movw	r24, r20
    2060:	81 70       	andi	r24, 0x01	; 1
    2062:	90 70       	andi	r25, 0x00	; 0
    2064:	88 23       	and	r24, r24
    2066:	19 f0       	breq	.+6      	; 0x206e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	89 83       	std	Y+1, r24	; 0x01
    206c:	19 c0       	rjmp	.+50     	; 0x20a0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    206e:	19 82       	std	Y+1, r1	; 0x01
    2070:	17 c0       	rjmp	.+46     	; 0x20a0 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2072:	e0 e3       	ldi	r30, 0x30	; 48
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	80 81       	ld	r24, Z
    2078:	28 2f       	mov	r18, r24
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	8b 81       	ldd	r24, Y+3	; 0x03
    207e:	88 2f       	mov	r24, r24
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	a9 01       	movw	r20, r18
    2084:	02 c0       	rjmp	.+4      	; 0x208a <GPIO_readPin+0x10e>
    2086:	55 95       	asr	r21
    2088:	47 95       	ror	r20
    208a:	8a 95       	dec	r24
    208c:	e2 f7       	brpl	.-8      	; 0x2086 <GPIO_readPin+0x10a>
    208e:	ca 01       	movw	r24, r20
    2090:	81 70       	andi	r24, 0x01	; 1
    2092:	90 70       	andi	r25, 0x00	; 0
    2094:	88 23       	and	r24, r24
    2096:	19 f0       	breq	.+6      	; 0x209e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	89 83       	std	Y+1, r24	; 0x01
    209c:	01 c0       	rjmp	.+2      	; 0x20a0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    209e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_value;
    20a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	0f 90       	pop	r0
    20aa:	0f 90       	pop	r0
    20ac:	cf 91       	pop	r28
    20ae:	df 91       	pop	r29
    20b0:	08 95       	ret

000020b2 <GPIO_setupPortDirection>:
 * if the direction value id PORT_INPUT all pins in the port should be input pins.
 * if the direction value id PORT_OUTPUT all pins in the port should be output pins.
 * if the input port number is not correct, the function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    20b2:	df 93       	push	r29
    20b4:	cf 93       	push	r28
    20b6:	00 d0       	rcall	.+0      	; 0x20b8 <GPIO_setupPortDirection+0x6>
    20b8:	00 d0       	rcall	.+0      	; 0x20ba <GPIO_setupPortDirection+0x8>
    20ba:	cd b7       	in	r28, 0x3d	; 61
    20bc:	de b7       	in	r29, 0x3e	; 62
    20be:	89 83       	std	Y+1, r24	; 0x01
    20c0:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	84 30       	cpi	r24, 0x04	; 4
    20c6:	90 f5       	brcc	.+100    	; 0x212c <GPIO_setupPortDirection+0x7a>
	{
		/* DO NOTHING */
	}
	else
	{
		switch(port_num)
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	28 2f       	mov	r18, r24
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	3c 83       	std	Y+4, r19	; 0x04
    20d0:	2b 83       	std	Y+3, r18	; 0x03
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	9c 81       	ldd	r25, Y+4	; 0x04
    20d6:	81 30       	cpi	r24, 0x01	; 1
    20d8:	91 05       	cpc	r25, r1
    20da:	d1 f0       	breq	.+52     	; 0x2110 <GPIO_setupPortDirection+0x5e>
    20dc:	2b 81       	ldd	r18, Y+3	; 0x03
    20de:	3c 81       	ldd	r19, Y+4	; 0x04
    20e0:	22 30       	cpi	r18, 0x02	; 2
    20e2:	31 05       	cpc	r19, r1
    20e4:	2c f4       	brge	.+10     	; 0x20f0 <GPIO_setupPortDirection+0x3e>
    20e6:	8b 81       	ldd	r24, Y+3	; 0x03
    20e8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ea:	00 97       	sbiw	r24, 0x00	; 0
    20ec:	61 f0       	breq	.+24     	; 0x2106 <GPIO_setupPortDirection+0x54>
    20ee:	1e c0       	rjmp	.+60     	; 0x212c <GPIO_setupPortDirection+0x7a>
    20f0:	2b 81       	ldd	r18, Y+3	; 0x03
    20f2:	3c 81       	ldd	r19, Y+4	; 0x04
    20f4:	22 30       	cpi	r18, 0x02	; 2
    20f6:	31 05       	cpc	r19, r1
    20f8:	81 f0       	breq	.+32     	; 0x211a <GPIO_setupPortDirection+0x68>
    20fa:	8b 81       	ldd	r24, Y+3	; 0x03
    20fc:	9c 81       	ldd	r25, Y+4	; 0x04
    20fe:	83 30       	cpi	r24, 0x03	; 3
    2100:	91 05       	cpc	r25, r1
    2102:	81 f0       	breq	.+32     	; 0x2124 <GPIO_setupPortDirection+0x72>
    2104:	13 c0       	rjmp	.+38     	; 0x212c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2106:	ea e3       	ldi	r30, 0x3A	; 58
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	8a 81       	ldd	r24, Y+2	; 0x02
    210c:	80 83       	st	Z, r24
    210e:	0e c0       	rjmp	.+28     	; 0x212c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2110:	e7 e3       	ldi	r30, 0x37	; 55
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	8a 81       	ldd	r24, Y+2	; 0x02
    2116:	80 83       	st	Z, r24
    2118:	09 c0       	rjmp	.+18     	; 0x212c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    211a:	e4 e3       	ldi	r30, 0x34	; 52
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	8a 81       	ldd	r24, Y+2	; 0x02
    2120:	80 83       	st	Z, r24
    2122:	04 c0       	rjmp	.+8      	; 0x212c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2124:	e1 e3       	ldi	r30, 0x31	; 49
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	8a 81       	ldd	r24, Y+2	; 0x02
    212a:	80 83       	st	Z, r24
			break;
		}
	}
}
    212c:	0f 90       	pop	r0
    212e:	0f 90       	pop	r0
    2130:	0f 90       	pop	r0
    2132:	0f 90       	pop	r0
    2134:	cf 91       	pop	r28
    2136:	df 91       	pop	r29
    2138:	08 95       	ret

0000213a <GPIO_writePort>:
 * If any pin in port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * if the input port number is not correct, the function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    213a:	df 93       	push	r29
    213c:	cf 93       	push	r28
    213e:	00 d0       	rcall	.+0      	; 0x2140 <GPIO_writePort+0x6>
    2140:	00 d0       	rcall	.+0      	; 0x2142 <GPIO_writePort+0x8>
    2142:	cd b7       	in	r28, 0x3d	; 61
    2144:	de b7       	in	r29, 0x3e	; 62
    2146:	89 83       	std	Y+1, r24	; 0x01
    2148:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    214a:	89 81       	ldd	r24, Y+1	; 0x01
    214c:	84 30       	cpi	r24, 0x04	; 4
    214e:	90 f5       	brcc	.+100    	; 0x21b4 <GPIO_writePort+0x7a>
	{
		/* Do nothing */
	}
	else
	{
		switch(port_num)
    2150:	89 81       	ldd	r24, Y+1	; 0x01
    2152:	28 2f       	mov	r18, r24
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	3c 83       	std	Y+4, r19	; 0x04
    2158:	2b 83       	std	Y+3, r18	; 0x03
    215a:	8b 81       	ldd	r24, Y+3	; 0x03
    215c:	9c 81       	ldd	r25, Y+4	; 0x04
    215e:	81 30       	cpi	r24, 0x01	; 1
    2160:	91 05       	cpc	r25, r1
    2162:	d1 f0       	breq	.+52     	; 0x2198 <GPIO_writePort+0x5e>
    2164:	2b 81       	ldd	r18, Y+3	; 0x03
    2166:	3c 81       	ldd	r19, Y+4	; 0x04
    2168:	22 30       	cpi	r18, 0x02	; 2
    216a:	31 05       	cpc	r19, r1
    216c:	2c f4       	brge	.+10     	; 0x2178 <GPIO_writePort+0x3e>
    216e:	8b 81       	ldd	r24, Y+3	; 0x03
    2170:	9c 81       	ldd	r25, Y+4	; 0x04
    2172:	00 97       	sbiw	r24, 0x00	; 0
    2174:	61 f0       	breq	.+24     	; 0x218e <GPIO_writePort+0x54>
    2176:	1e c0       	rjmp	.+60     	; 0x21b4 <GPIO_writePort+0x7a>
    2178:	2b 81       	ldd	r18, Y+3	; 0x03
    217a:	3c 81       	ldd	r19, Y+4	; 0x04
    217c:	22 30       	cpi	r18, 0x02	; 2
    217e:	31 05       	cpc	r19, r1
    2180:	81 f0       	breq	.+32     	; 0x21a2 <GPIO_writePort+0x68>
    2182:	8b 81       	ldd	r24, Y+3	; 0x03
    2184:	9c 81       	ldd	r25, Y+4	; 0x04
    2186:	83 30       	cpi	r24, 0x03	; 3
    2188:	91 05       	cpc	r25, r1
    218a:	81 f0       	breq	.+32     	; 0x21ac <GPIO_writePort+0x72>
    218c:	13 c0       	rjmp	.+38     	; 0x21b4 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    218e:	eb e3       	ldi	r30, 0x3B	; 59
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	8a 81       	ldd	r24, Y+2	; 0x02
    2194:	80 83       	st	Z, r24
    2196:	0e c0       	rjmp	.+28     	; 0x21b4 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2198:	e8 e3       	ldi	r30, 0x38	; 56
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	8a 81       	ldd	r24, Y+2	; 0x02
    219e:	80 83       	st	Z, r24
    21a0:	09 c0       	rjmp	.+18     	; 0x21b4 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    21a2:	e5 e3       	ldi	r30, 0x35	; 53
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	8a 81       	ldd	r24, Y+2	; 0x02
    21a8:	80 83       	st	Z, r24
    21aa:	04 c0       	rjmp	.+8      	; 0x21b4 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    21ac:	e2 e3       	ldi	r30, 0x32	; 50
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	8a 81       	ldd	r24, Y+2	; 0x02
    21b2:	80 83       	st	Z, r24
			break;
		}
	}
}
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0
    21ba:	0f 90       	pop	r0
    21bc:	cf 91       	pop	r28
    21be:	df 91       	pop	r29
    21c0:	08 95       	ret

000021c2 <GPIO_readPort>:
 * Description:
 * Read and return the value of the required port.
 * If the input port number is not correct, the function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    21c2:	df 93       	push	r29
    21c4:	cf 93       	push	r28
    21c6:	00 d0       	rcall	.+0      	; 0x21c8 <GPIO_readPort+0x6>
    21c8:	00 d0       	rcall	.+0      	; 0x21ca <GPIO_readPort+0x8>
    21ca:	cd b7       	in	r28, 0x3d	; 61
    21cc:	de b7       	in	r29, 0x3e	; 62
    21ce:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_value = 0;
    21d0:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    21d2:	8a 81       	ldd	r24, Y+2	; 0x02
    21d4:	84 30       	cpi	r24, 0x04	; 4
    21d6:	90 f5       	brcc	.+100    	; 0x223c <GPIO_readPort+0x7a>
	{
		/* Do nothing */
	}
	else
	{
		switch(port_num)
    21d8:	8a 81       	ldd	r24, Y+2	; 0x02
    21da:	28 2f       	mov	r18, r24
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	3c 83       	std	Y+4, r19	; 0x04
    21e0:	2b 83       	std	Y+3, r18	; 0x03
    21e2:	8b 81       	ldd	r24, Y+3	; 0x03
    21e4:	9c 81       	ldd	r25, Y+4	; 0x04
    21e6:	81 30       	cpi	r24, 0x01	; 1
    21e8:	91 05       	cpc	r25, r1
    21ea:	d1 f0       	breq	.+52     	; 0x2220 <GPIO_readPort+0x5e>
    21ec:	2b 81       	ldd	r18, Y+3	; 0x03
    21ee:	3c 81       	ldd	r19, Y+4	; 0x04
    21f0:	22 30       	cpi	r18, 0x02	; 2
    21f2:	31 05       	cpc	r19, r1
    21f4:	2c f4       	brge	.+10     	; 0x2200 <GPIO_readPort+0x3e>
    21f6:	8b 81       	ldd	r24, Y+3	; 0x03
    21f8:	9c 81       	ldd	r25, Y+4	; 0x04
    21fa:	00 97       	sbiw	r24, 0x00	; 0
    21fc:	61 f0       	breq	.+24     	; 0x2216 <GPIO_readPort+0x54>
    21fe:	1e c0       	rjmp	.+60     	; 0x223c <GPIO_readPort+0x7a>
    2200:	2b 81       	ldd	r18, Y+3	; 0x03
    2202:	3c 81       	ldd	r19, Y+4	; 0x04
    2204:	22 30       	cpi	r18, 0x02	; 2
    2206:	31 05       	cpc	r19, r1
    2208:	81 f0       	breq	.+32     	; 0x222a <GPIO_readPort+0x68>
    220a:	8b 81       	ldd	r24, Y+3	; 0x03
    220c:	9c 81       	ldd	r25, Y+4	; 0x04
    220e:	83 30       	cpi	r24, 0x03	; 3
    2210:	91 05       	cpc	r25, r1
    2212:	81 f0       	breq	.+32     	; 0x2234 <GPIO_readPort+0x72>
    2214:	13 c0       	rjmp	.+38     	; 0x223c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			port_value = PINA;
    2216:	e9 e3       	ldi	r30, 0x39	; 57
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	89 83       	std	Y+1, r24	; 0x01
    221e:	0e c0       	rjmp	.+28     	; 0x223c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			port_value = PINB;
    2220:	e6 e3       	ldi	r30, 0x36	; 54
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	89 83       	std	Y+1, r24	; 0x01
    2228:	09 c0       	rjmp	.+18     	; 0x223c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			port_value = PINC;
    222a:	e3 e3       	ldi	r30, 0x33	; 51
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	89 83       	std	Y+1, r24	; 0x01
    2232:	04 c0       	rjmp	.+8      	; 0x223c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			port_value = PIND;
    2234:	e0 e3       	ldi	r30, 0x30	; 48
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return port_value;
    223c:	89 81       	ldd	r24, Y+1	; 0x01
}
    223e:	0f 90       	pop	r0
    2240:	0f 90       	pop	r0
    2242:	0f 90       	pop	r0
    2244:	0f 90       	pop	r0
    2246:	cf 91       	pop	r28
    2248:	df 91       	pop	r29
    224a:	08 95       	ret

0000224c <KEYPAD_getPressedKey>:
 * Description:
 * This function is used to get the value of the button that pressed by the user.
 * this function loop on columns and rows to get the value of the button that the user pressed.
 */
uint8 KEYPAD_getPressedKey(void)
{
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	00 d0       	rcall	.+0      	; 0x2252 <KEYPAD_getPressedKey+0x6>
    2252:	0f 92       	push	r0
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
	uint8 col, row;
	uint8 keypad_port_value = 0;
    2258:	19 82       	std	Y+1, r1	; 0x01

	while(1)
	{
		/* This will loop on the keypad columns */
		for(col=0;col<NUMBER_OF_COLUMNS;col++)
    225a:	1b 82       	std	Y+3, r1	; 0x03
    225c:	43 c0       	rjmp	.+134    	; 0x22e4 <KEYPAD_getPressedKey+0x98>
		{
			/* Make the whole port output and change direction of a certain pin each loop to output */
			GPIO_setupPortDirection(KEYPAD_PORT_ID , PORT_INPUT);
    225e:	80 e0       	ldi	r24, 0x00	; 0
    2260:	60 e0       	ldi	r22, 0x00	; 0
    2262:	0e 94 59 10 	call	0x20b2	; 0x20b2 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID , col + PIN4_ID, PIN_OUTPUT);
    2266:	8b 81       	ldd	r24, Y+3	; 0x03
    2268:	98 2f       	mov	r25, r24
    226a:	9c 5f       	subi	r25, 0xFC	; 252
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	69 2f       	mov	r22, r25
    2270:	41 e0       	ldi	r20, 0x01	; 1
    2272:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <GPIO_setupPinDirection>
			/*
			 * This value will make that certain pin value equal to 0 while the other values of the whole port equal to 1
			 * The AVR open internal pull up when we put ones in pins 0 ~ 3
			 */
#if(BUTTON_IS_PRESSED == LOGIC_LOW)
			keypad_port_value = ~(1<<(col + PIN4_ID));
    2276:	8b 81       	ldd	r24, Y+3	; 0x03
    2278:	88 2f       	mov	r24, r24
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	9c 01       	movw	r18, r24
    227e:	2c 5f       	subi	r18, 0xFC	; 252
    2280:	3f 4f       	sbci	r19, 0xFF	; 255
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	02 c0       	rjmp	.+4      	; 0x228c <KEYPAD_getPressedKey+0x40>
    2288:	88 0f       	add	r24, r24
    228a:	99 1f       	adc	r25, r25
    228c:	2a 95       	dec	r18
    228e:	e2 f7       	brpl	.-8      	; 0x2288 <KEYPAD_getPressedKey+0x3c>
    2290:	80 95       	com	r24
    2292:	89 83       	std	Y+1, r24	; 0x01
#elif(BUTTON_IS_PRESSED == LOGIC_HIGH)
			keypad_port_value = (1<<(col + PIN4_ID));
#endif
			/* Write the value in the port */
			GPIO_writePort(KEYPAD_PORT_ID , keypad_port_value);
    2294:	80 e0       	ldi	r24, 0x00	; 0
    2296:	69 81       	ldd	r22, Y+1	; 0x01
    2298:	0e 94 9d 10 	call	0x213a	; 0x213a <GPIO_writePort>

			/* This will loop on keypad rows */
			for(row=0;row<NUMBER_OF_ROW;row++)
    229c:	1a 82       	std	Y+2, r1	; 0x02
    229e:	1c c0       	rjmp	.+56     	; 0x22d8 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check for each row if the button is pressed */
				if(GPIO_readPin(KEYPAD_PORT_ID ,row) == BUTTON_IS_PRESSED)
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	6a 81       	ldd	r22, Y+2	; 0x02
    22a4:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <GPIO_readPin>
    22a8:	88 23       	and	r24, r24
    22aa:	99 f4       	brne	.+38     	; 0x22d2 <KEYPAD_getPressedKey+0x86>
				{
					/* Return button number */
#if(NUMBER_OF_COLUMNS == 3)
					return KEYPAD_4x3_adjustKeyNumber((row*NUMBER_OF_COLUMNS)+col+1);
#elif (NUMBER_OF_COLUMNS == 4)
					return KEYPAD_4x4_adjustKeyNumber((row*NUMBER_OF_COLUMNS)+col+1);
    22ac:	8a 81       	ldd	r24, Y+2	; 0x02
    22ae:	88 2f       	mov	r24, r24
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	88 0f       	add	r24, r24
    22b4:	99 1f       	adc	r25, r25
    22b6:	88 0f       	add	r24, r24
    22b8:	99 1f       	adc	r25, r25
    22ba:	98 2f       	mov	r25, r24
    22bc:	8b 81       	ldd	r24, Y+3	; 0x03
    22be:	89 0f       	add	r24, r25
    22c0:	8f 5f       	subi	r24, 0xFF	; 255
    22c2:	0e 94 77 11 	call	0x22ee	; 0x22ee <KEYPAD_4x4_adjustKeyNumber>

				}
			}
		}
	}
}
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	0f 90       	pop	r0
    22cc:	cf 91       	pop	r28
    22ce:	df 91       	pop	r29
    22d0:	08 95       	ret
#endif
			/* Write the value in the port */
			GPIO_writePort(KEYPAD_PORT_ID , keypad_port_value);

			/* This will loop on keypad rows */
			for(row=0;row<NUMBER_OF_ROW;row++)
    22d2:	8a 81       	ldd	r24, Y+2	; 0x02
    22d4:	8f 5f       	subi	r24, 0xFF	; 255
    22d6:	8a 83       	std	Y+2, r24	; 0x02
    22d8:	8a 81       	ldd	r24, Y+2	; 0x02
    22da:	84 30       	cpi	r24, 0x04	; 4
    22dc:	08 f3       	brcs	.-62     	; 0x22a0 <KEYPAD_getPressedKey+0x54>
	uint8 keypad_port_value = 0;

	while(1)
	{
		/* This will loop on the keypad columns */
		for(col=0;col<NUMBER_OF_COLUMNS;col++)
    22de:	8b 81       	ldd	r24, Y+3	; 0x03
    22e0:	8f 5f       	subi	r24, 0xFF	; 255
    22e2:	8b 83       	std	Y+3, r24	; 0x03
    22e4:	8b 81       	ldd	r24, Y+3	; 0x03
    22e6:	84 30       	cpi	r24, 0x04	; 4
    22e8:	08 f4       	brcc	.+2      	; 0x22ec <KEYPAD_getPressedKey+0xa0>
    22ea:	b9 cf       	rjmp	.-142    	; 0x225e <KEYPAD_getPressedKey+0x12>
    22ec:	b6 cf       	rjmp	.-148    	; 0x225a <KEYPAD_getPressedKey+0xe>

000022ee <KEYPAD_4x4_adjustKeyNumber>:
#elif (NUMBER_OF_COLUMNS == 4)
/*
 * This function used to adjust the buttons in 4x4 keypad to its right presentation.
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    22ee:	df 93       	push	r29
    22f0:	cf 93       	push	r28
    22f2:	00 d0       	rcall	.+0      	; 0x22f4 <KEYPAD_4x4_adjustKeyNumber+0x6>
    22f4:	00 d0       	rcall	.+0      	; 0x22f6 <KEYPAD_4x4_adjustKeyNumber+0x8>
    22f6:	cd b7       	in	r28, 0x3d	; 61
    22f8:	de b7       	in	r29, 0x3e	; 62
    22fa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    22fc:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    22fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2300:	28 2f       	mov	r18, r24
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	3c 83       	std	Y+4, r19	; 0x04
    2306:	2b 83       	std	Y+3, r18	; 0x03
    2308:	8b 81       	ldd	r24, Y+3	; 0x03
    230a:	9c 81       	ldd	r25, Y+4	; 0x04
    230c:	88 30       	cpi	r24, 0x08	; 8
    230e:	91 05       	cpc	r25, r1
    2310:	09 f4       	brne	.+2      	; 0x2314 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2312:	70 c0       	rjmp	.+224    	; 0x23f4 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2314:	2b 81       	ldd	r18, Y+3	; 0x03
    2316:	3c 81       	ldd	r19, Y+4	; 0x04
    2318:	29 30       	cpi	r18, 0x09	; 9
    231a:	31 05       	cpc	r19, r1
    231c:	5c f5       	brge	.+86     	; 0x2374 <KEYPAD_4x4_adjustKeyNumber+0x86>
    231e:	8b 81       	ldd	r24, Y+3	; 0x03
    2320:	9c 81       	ldd	r25, Y+4	; 0x04
    2322:	84 30       	cpi	r24, 0x04	; 4
    2324:	91 05       	cpc	r25, r1
    2326:	09 f4       	brne	.+2      	; 0x232a <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2328:	59 c0       	rjmp	.+178    	; 0x23dc <KEYPAD_4x4_adjustKeyNumber+0xee>
    232a:	2b 81       	ldd	r18, Y+3	; 0x03
    232c:	3c 81       	ldd	r19, Y+4	; 0x04
    232e:	25 30       	cpi	r18, 0x05	; 5
    2330:	31 05       	cpc	r19, r1
    2332:	9c f4       	brge	.+38     	; 0x235a <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2334:	8b 81       	ldd	r24, Y+3	; 0x03
    2336:	9c 81       	ldd	r25, Y+4	; 0x04
    2338:	82 30       	cpi	r24, 0x02	; 2
    233a:	91 05       	cpc	r25, r1
    233c:	09 f4       	brne	.+2      	; 0x2340 <KEYPAD_4x4_adjustKeyNumber+0x52>
    233e:	48 c0       	rjmp	.+144    	; 0x23d0 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2340:	2b 81       	ldd	r18, Y+3	; 0x03
    2342:	3c 81       	ldd	r19, Y+4	; 0x04
    2344:	23 30       	cpi	r18, 0x03	; 3
    2346:	31 05       	cpc	r19, r1
    2348:	0c f0       	brlt	.+2      	; 0x234c <KEYPAD_4x4_adjustKeyNumber+0x5e>
    234a:	45 c0       	rjmp	.+138    	; 0x23d6 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    234c:	8b 81       	ldd	r24, Y+3	; 0x03
    234e:	9c 81       	ldd	r25, Y+4	; 0x04
    2350:	81 30       	cpi	r24, 0x01	; 1
    2352:	91 05       	cpc	r25, r1
    2354:	09 f4       	brne	.+2      	; 0x2358 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2356:	39 c0       	rjmp	.+114    	; 0x23ca <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2358:	67 c0       	rjmp	.+206    	; 0x2428 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    235a:	2b 81       	ldd	r18, Y+3	; 0x03
    235c:	3c 81       	ldd	r19, Y+4	; 0x04
    235e:	26 30       	cpi	r18, 0x06	; 6
    2360:	31 05       	cpc	r19, r1
    2362:	09 f4       	brne	.+2      	; 0x2366 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2364:	41 c0       	rjmp	.+130    	; 0x23e8 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2366:	8b 81       	ldd	r24, Y+3	; 0x03
    2368:	9c 81       	ldd	r25, Y+4	; 0x04
    236a:	87 30       	cpi	r24, 0x07	; 7
    236c:	91 05       	cpc	r25, r1
    236e:	0c f0       	brlt	.+2      	; 0x2372 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2370:	3e c0       	rjmp	.+124    	; 0x23ee <KEYPAD_4x4_adjustKeyNumber+0x100>
    2372:	37 c0       	rjmp	.+110    	; 0x23e2 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2374:	2b 81       	ldd	r18, Y+3	; 0x03
    2376:	3c 81       	ldd	r19, Y+4	; 0x04
    2378:	2c 30       	cpi	r18, 0x0C	; 12
    237a:	31 05       	cpc	r19, r1
    237c:	09 f4       	brne	.+2      	; 0x2380 <KEYPAD_4x4_adjustKeyNumber+0x92>
    237e:	46 c0       	rjmp	.+140    	; 0x240c <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2380:	8b 81       	ldd	r24, Y+3	; 0x03
    2382:	9c 81       	ldd	r25, Y+4	; 0x04
    2384:	8d 30       	cpi	r24, 0x0D	; 13
    2386:	91 05       	cpc	r25, r1
    2388:	5c f4       	brge	.+22     	; 0x23a0 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    238a:	2b 81       	ldd	r18, Y+3	; 0x03
    238c:	3c 81       	ldd	r19, Y+4	; 0x04
    238e:	2a 30       	cpi	r18, 0x0A	; 10
    2390:	31 05       	cpc	r19, r1
    2392:	b1 f1       	breq	.+108    	; 0x2400 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2394:	8b 81       	ldd	r24, Y+3	; 0x03
    2396:	9c 81       	ldd	r25, Y+4	; 0x04
    2398:	8b 30       	cpi	r24, 0x0B	; 11
    239a:	91 05       	cpc	r25, r1
    239c:	a4 f5       	brge	.+104    	; 0x2406 <KEYPAD_4x4_adjustKeyNumber+0x118>
    239e:	2d c0       	rjmp	.+90     	; 0x23fa <KEYPAD_4x4_adjustKeyNumber+0x10c>
    23a0:	2b 81       	ldd	r18, Y+3	; 0x03
    23a2:	3c 81       	ldd	r19, Y+4	; 0x04
    23a4:	2e 30       	cpi	r18, 0x0E	; 14
    23a6:	31 05       	cpc	r19, r1
    23a8:	b9 f1       	breq	.+110    	; 0x2418 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    23aa:	8b 81       	ldd	r24, Y+3	; 0x03
    23ac:	9c 81       	ldd	r25, Y+4	; 0x04
    23ae:	8e 30       	cpi	r24, 0x0E	; 14
    23b0:	91 05       	cpc	r25, r1
    23b2:	7c f1       	brlt	.+94     	; 0x2412 <KEYPAD_4x4_adjustKeyNumber+0x124>
    23b4:	2b 81       	ldd	r18, Y+3	; 0x03
    23b6:	3c 81       	ldd	r19, Y+4	; 0x04
    23b8:	2f 30       	cpi	r18, 0x0F	; 15
    23ba:	31 05       	cpc	r19, r1
    23bc:	79 f1       	breq	.+94     	; 0x241c <KEYPAD_4x4_adjustKeyNumber+0x12e>
    23be:	8b 81       	ldd	r24, Y+3	; 0x03
    23c0:	9c 81       	ldd	r25, Y+4	; 0x04
    23c2:	80 31       	cpi	r24, 0x10	; 16
    23c4:	91 05       	cpc	r25, r1
    23c6:	69 f1       	breq	.+90     	; 0x2422 <KEYPAD_4x4_adjustKeyNumber+0x134>
    23c8:	2f c0       	rjmp	.+94     	; 0x2428 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
	case 1:
		keypad_button = 7;
    23ca:	87 e0       	ldi	r24, 0x07	; 7
    23cc:	89 83       	std	Y+1, r24	; 0x01
    23ce:	2e c0       	rjmp	.+92     	; 0x242c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 2:
		keypad_button = 8;
    23d0:	88 e0       	ldi	r24, 0x08	; 8
    23d2:	89 83       	std	Y+1, r24	; 0x01
    23d4:	2b c0       	rjmp	.+86     	; 0x242c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 3:
		keypad_button = 9;
    23d6:	89 e0       	ldi	r24, 0x09	; 9
    23d8:	89 83       	std	Y+1, r24	; 0x01
    23da:	28 c0       	rjmp	.+80     	; 0x242c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 4:
		keypad_button = '%';  /* ASCII of "%" */
    23dc:	85 e2       	ldi	r24, 0x25	; 37
    23de:	89 83       	std	Y+1, r24	; 0x01
    23e0:	25 c0       	rjmp	.+74     	; 0x242c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 5:
		keypad_button = 4;
    23e2:	84 e0       	ldi	r24, 0x04	; 4
    23e4:	89 83       	std	Y+1, r24	; 0x01
    23e6:	22 c0       	rjmp	.+68     	; 0x242c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 6:
		keypad_button = 5;
    23e8:	85 e0       	ldi	r24, 0x05	; 5
    23ea:	89 83       	std	Y+1, r24	; 0x01
    23ec:	1f c0       	rjmp	.+62     	; 0x242c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 7:
		keypad_button = 6;
    23ee:	86 e0       	ldi	r24, 0x06	; 6
    23f0:	89 83       	std	Y+1, r24	; 0x01
    23f2:	1c c0       	rjmp	.+56     	; 0x242c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 8:
		keypad_button = '*';  /* ASCII of "*" */
    23f4:	8a e2       	ldi	r24, 0x2A	; 42
    23f6:	89 83       	std	Y+1, r24	; 0x01
    23f8:	19 c0       	rjmp	.+50     	; 0x242c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 9:
		keypad_button = 1;
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	89 83       	std	Y+1, r24	; 0x01
    23fe:	16 c0       	rjmp	.+44     	; 0x242c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 10:
		keypad_button = 2;
    2400:	82 e0       	ldi	r24, 0x02	; 2
    2402:	89 83       	std	Y+1, r24	; 0x01
    2404:	13 c0       	rjmp	.+38     	; 0x242c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 11:
		keypad_button = 3;
    2406:	83 e0       	ldi	r24, 0x03	; 3
    2408:	89 83       	std	Y+1, r24	; 0x01
    240a:	10 c0       	rjmp	.+32     	; 0x242c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 12:
		keypad_button = '-';
    240c:	8d e2       	ldi	r24, 0x2D	; 45
    240e:	89 83       	std	Y+1, r24	; 0x01
    2410:	0d c0       	rjmp	.+26     	; 0x242c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 13:
		keypad_button = 13; /* ASCII of enter */
    2412:	8d e0       	ldi	r24, 0x0D	; 13
    2414:	89 83       	std	Y+1, r24	; 0x01
    2416:	0a c0       	rjmp	.+20     	; 0x242c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 14:
		keypad_button = 0;
    2418:	19 82       	std	Y+1, r1	; 0x01
    241a:	08 c0       	rjmp	.+16     	; 0x242c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 15:
		keypad_button = '=';  /* ASCII of "=" */
    241c:	8d e3       	ldi	r24, 0x3D	; 61
    241e:	89 83       	std	Y+1, r24	; 0x01
    2420:	05 c0       	rjmp	.+10     	; 0x242c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 16:
		keypad_button = '+';  /* ASCII of "+" */
    2422:	8b e2       	ldi	r24, 0x2B	; 43
    2424:	89 83       	std	Y+1, r24	; 0x01
    2426:	02 c0       	rjmp	.+4      	; 0x242c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	default:
		keypad_button = button_number;
    2428:	8a 81       	ldd	r24, Y+2	; 0x02
    242a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return keypad_button;
    242c:	89 81       	ldd	r24, Y+1	; 0x01
}
    242e:	0f 90       	pop	r0
    2430:	0f 90       	pop	r0
    2432:	0f 90       	pop	r0
    2434:	0f 90       	pop	r0
    2436:	cf 91       	pop	r28
    2438:	df 91       	pop	r29
    243a:	08 95       	ret

0000243c <LCD_init>:
/*
 * Description:
 * This function activate LCD pins and start the LCD by identify LCD mode and clear the screen.
 */
void LCD_init(void)
{
    243c:	df 93       	push	r29
    243e:	cf 93       	push	r28
    2440:	cd b7       	in	r28, 0x3d	; 61
    2442:	de b7       	in	r29, 0x3e	; 62
	/* Make control pins output */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    2444:	83 e0       	ldi	r24, 0x03	; 3
    2446:	64 e0       	ldi	r22, 0x04	; 4
    2448:	41 e0       	ldi	r20, 0x01	; 1
    244a:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID, LCD_RW_PIN_ID, PIN_OUTPUT);
    244e:	83 e0       	ldi	r24, 0x03	; 3
    2450:	65 e0       	ldi	r22, 0x05	; 5
    2452:	41 e0       	ldi	r20, 0x01	; 1
    2454:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    2458:	83 e0       	ldi	r24, 0x03	; 3
    245a:	66 e0       	ldi	r22, 0x06	; 6
    245c:	41 e0       	ldi	r20, 0x01	; 1
    245e:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <GPIO_setupPinDirection>
#if(LCD_DATA_BITS_MODE == 8)
	/* Make Data port output */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    2462:	82 e0       	ldi	r24, 0x02	; 2
    2464:	6f ef       	ldi	r22, 0xFF	; 255
    2466:	0e 94 59 10 	call	0x20b2	; 0x20b2 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* Two lines 8-bit mode */
    246a:	88 e3       	ldi	r24, 0x38	; 56
    246c:	0e 94 41 12 	call	0x2482	; 0x2482 <LCD_sendCommand>

	LCD_sendCommand(LCD_RETURN_HOME	);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* Two lines 4-bit mode */
#endif
	/* Send initial commands */
	LCD_sendCommand(LCD_CURSOR_OFF); /* Cursor off*/
    2470:	8c e0       	ldi	r24, 0x0C	; 12
    2472:	0e 94 41 12 	call	0x2482	; 0x2482 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_SCREEN ); /* Clear Screen */
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	0e 94 41 12 	call	0x2482	; 0x2482 <LCD_sendCommand>
}
    247c:	cf 91       	pop	r28
    247e:	df 91       	pop	r29
    2480:	08 95       	ret

00002482 <LCD_sendCommand>:
/*
 * Description:
 * This function send commands to the LCD.
 */
void LCD_sendCommand(uint8 command)
{
    2482:	df 93       	push	r29
    2484:	cf 93       	push	r28
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62
    248a:	ea 97       	sbiw	r28, 0x3a	; 58
    248c:	0f b6       	in	r0, 0x3f	; 63
    248e:	f8 94       	cli
    2490:	de bf       	out	0x3e, r29	; 62
    2492:	0f be       	out	0x3f, r0	; 63
    2494:	cd bf       	out	0x3d, r28	; 61
    2496:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    2498:	19 ae       	std	Y+57, r1	; 0x39
	/* RS = 0  (to send command) and R/W = 0 (to write value) */
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    249a:	83 e0       	ldi	r24, 0x03	; 3
    249c:	64 e0       	ldi	r22, 0x04	; 4
    249e:	40 e0       	ldi	r20, 0x00	; 0
    24a0:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);
    24a4:	83 e0       	ldi	r24, 0x03	; 3
    24a6:	65 e0       	ldi	r22, 0x05	; 5
    24a8:	40 e0       	ldi	r20, 0x00	; 0
    24aa:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <GPIO_writePin>
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	a0 e8       	ldi	r26, 0x80	; 128
    24b4:	bf e3       	ldi	r27, 0x3F	; 63
    24b6:	8d ab       	std	Y+53, r24	; 0x35
    24b8:	9e ab       	std	Y+54, r25	; 0x36
    24ba:	af ab       	std	Y+55, r26	; 0x37
    24bc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24be:	6d a9       	ldd	r22, Y+53	; 0x35
    24c0:	7e a9       	ldd	r23, Y+54	; 0x36
    24c2:	8f a9       	ldd	r24, Y+55	; 0x37
    24c4:	98 ad       	ldd	r25, Y+56	; 0x38
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	4a e7       	ldi	r20, 0x7A	; 122
    24cc:	53 e4       	ldi	r21, 0x43	; 67
    24ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	89 ab       	std	Y+49, r24	; 0x31
    24d8:	9a ab       	std	Y+50, r25	; 0x32
    24da:	ab ab       	std	Y+51, r26	; 0x33
    24dc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24de:	69 a9       	ldd	r22, Y+49	; 0x31
    24e0:	7a a9       	ldd	r23, Y+50	; 0x32
    24e2:	8b a9       	ldd	r24, Y+51	; 0x33
    24e4:	9c a9       	ldd	r25, Y+52	; 0x34
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	40 e8       	ldi	r20, 0x80	; 128
    24ec:	5f e3       	ldi	r21, 0x3F	; 63
    24ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24f2:	88 23       	and	r24, r24
    24f4:	2c f4       	brge	.+10     	; 0x2500 <LCD_sendCommand+0x7e>
		__ticks = 1;
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	98 ab       	std	Y+48, r25	; 0x30
    24fc:	8f a7       	std	Y+47, r24	; 0x2f
    24fe:	3f c0       	rjmp	.+126    	; 0x257e <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    2500:	69 a9       	ldd	r22, Y+49	; 0x31
    2502:	7a a9       	ldd	r23, Y+50	; 0x32
    2504:	8b a9       	ldd	r24, Y+51	; 0x33
    2506:	9c a9       	ldd	r25, Y+52	; 0x34
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	3f ef       	ldi	r19, 0xFF	; 255
    250c:	4f e7       	ldi	r20, 0x7F	; 127
    250e:	57 e4       	ldi	r21, 0x47	; 71
    2510:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2514:	18 16       	cp	r1, r24
    2516:	4c f5       	brge	.+82     	; 0x256a <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2518:	6d a9       	ldd	r22, Y+53	; 0x35
    251a:	7e a9       	ldd	r23, Y+54	; 0x36
    251c:	8f a9       	ldd	r24, Y+55	; 0x37
    251e:	98 ad       	ldd	r25, Y+56	; 0x38
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	40 e2       	ldi	r20, 0x20	; 32
    2526:	51 e4       	ldi	r21, 0x41	; 65
    2528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	bc 01       	movw	r22, r24
    2532:	cd 01       	movw	r24, r26
    2534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	98 ab       	std	Y+48, r25	; 0x30
    253e:	8f a7       	std	Y+47, r24	; 0x2f
    2540:	0f c0       	rjmp	.+30     	; 0x2560 <LCD_sendCommand+0xde>
    2542:	89 e1       	ldi	r24, 0x19	; 25
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	9e a7       	std	Y+46, r25	; 0x2e
    2548:	8d a7       	std	Y+45, r24	; 0x2d
    254a:	8d a5       	ldd	r24, Y+45	; 0x2d
    254c:	9e a5       	ldd	r25, Y+46	; 0x2e
    254e:	01 97       	sbiw	r24, 0x01	; 1
    2550:	f1 f7       	brne	.-4      	; 0x254e <LCD_sendCommand+0xcc>
    2552:	9e a7       	std	Y+46, r25	; 0x2e
    2554:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2556:	8f a5       	ldd	r24, Y+47	; 0x2f
    2558:	98 a9       	ldd	r25, Y+48	; 0x30
    255a:	01 97       	sbiw	r24, 0x01	; 1
    255c:	98 ab       	std	Y+48, r25	; 0x30
    255e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2560:	8f a5       	ldd	r24, Y+47	; 0x2f
    2562:	98 a9       	ldd	r25, Y+48	; 0x30
    2564:	00 97       	sbiw	r24, 0x00	; 0
    2566:	69 f7       	brne	.-38     	; 0x2542 <LCD_sendCommand+0xc0>
    2568:	14 c0       	rjmp	.+40     	; 0x2592 <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    256a:	69 a9       	ldd	r22, Y+49	; 0x31
    256c:	7a a9       	ldd	r23, Y+50	; 0x32
    256e:	8b a9       	ldd	r24, Y+51	; 0x33
    2570:	9c a9       	ldd	r25, Y+52	; 0x34
    2572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2576:	dc 01       	movw	r26, r24
    2578:	cb 01       	movw	r24, r22
    257a:	98 ab       	std	Y+48, r25	; 0x30
    257c:	8f a7       	std	Y+47, r24	; 0x2f
    257e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2580:	98 a9       	ldd	r25, Y+48	; 0x30
    2582:	9c a7       	std	Y+44, r25	; 0x2c
    2584:	8b a7       	std	Y+43, r24	; 0x2b
    2586:	8b a5       	ldd	r24, Y+43	; 0x2b
    2588:	9c a5       	ldd	r25, Y+44	; 0x2c
    258a:	01 97       	sbiw	r24, 0x01	; 1
    258c:	f1 f7       	brne	.-4      	; 0x258a <LCD_sendCommand+0x108>
    258e:	9c a7       	std	Y+44, r25	; 0x2c
    2590:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable(E) = 1 */
    2592:	83 e0       	ldi	r24, 0x03	; 3
    2594:	66 e0       	ldi	r22, 0x06	; 6
    2596:	41 e0       	ldi	r20, 0x01	; 1
    2598:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <GPIO_writePin>
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	a0 e8       	ldi	r26, 0x80	; 128
    25a2:	bf e3       	ldi	r27, 0x3F	; 63
    25a4:	8f a3       	std	Y+39, r24	; 0x27
    25a6:	98 a7       	std	Y+40, r25	; 0x28
    25a8:	a9 a7       	std	Y+41, r26	; 0x29
    25aa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ac:	6f a1       	ldd	r22, Y+39	; 0x27
    25ae:	78 a5       	ldd	r23, Y+40	; 0x28
    25b0:	89 a5       	ldd	r24, Y+41	; 0x29
    25b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	4a e7       	ldi	r20, 0x7A	; 122
    25ba:	53 e4       	ldi	r21, 0x43	; 67
    25bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	8b a3       	std	Y+35, r24	; 0x23
    25c6:	9c a3       	std	Y+36, r25	; 0x24
    25c8:	ad a3       	std	Y+37, r26	; 0x25
    25ca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25cc:	6b a1       	ldd	r22, Y+35	; 0x23
    25ce:	7c a1       	ldd	r23, Y+36	; 0x24
    25d0:	8d a1       	ldd	r24, Y+37	; 0x25
    25d2:	9e a1       	ldd	r25, Y+38	; 0x26
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	40 e8       	ldi	r20, 0x80	; 128
    25da:	5f e3       	ldi	r21, 0x3F	; 63
    25dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25e0:	88 23       	and	r24, r24
    25e2:	2c f4       	brge	.+10     	; 0x25ee <LCD_sendCommand+0x16c>
		__ticks = 1;
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	9a a3       	std	Y+34, r25	; 0x22
    25ea:	89 a3       	std	Y+33, r24	; 0x21
    25ec:	3f c0       	rjmp	.+126    	; 0x266c <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    25ee:	6b a1       	ldd	r22, Y+35	; 0x23
    25f0:	7c a1       	ldd	r23, Y+36	; 0x24
    25f2:	8d a1       	ldd	r24, Y+37	; 0x25
    25f4:	9e a1       	ldd	r25, Y+38	; 0x26
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	3f ef       	ldi	r19, 0xFF	; 255
    25fa:	4f e7       	ldi	r20, 0x7F	; 127
    25fc:	57 e4       	ldi	r21, 0x47	; 71
    25fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2602:	18 16       	cp	r1, r24
    2604:	4c f5       	brge	.+82     	; 0x2658 <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2606:	6f a1       	ldd	r22, Y+39	; 0x27
    2608:	78 a5       	ldd	r23, Y+40	; 0x28
    260a:	89 a5       	ldd	r24, Y+41	; 0x29
    260c:	9a a5       	ldd	r25, Y+42	; 0x2a
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	40 e2       	ldi	r20, 0x20	; 32
    2614:	51 e4       	ldi	r21, 0x41	; 65
    2616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	bc 01       	movw	r22, r24
    2620:	cd 01       	movw	r24, r26
    2622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	9a a3       	std	Y+34, r25	; 0x22
    262c:	89 a3       	std	Y+33, r24	; 0x21
    262e:	0f c0       	rjmp	.+30     	; 0x264e <LCD_sendCommand+0x1cc>
    2630:	89 e1       	ldi	r24, 0x19	; 25
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	98 a3       	std	Y+32, r25	; 0x20
    2636:	8f 8f       	std	Y+31, r24	; 0x1f
    2638:	8f 8d       	ldd	r24, Y+31	; 0x1f
    263a:	98 a1       	ldd	r25, Y+32	; 0x20
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	f1 f7       	brne	.-4      	; 0x263c <LCD_sendCommand+0x1ba>
    2640:	98 a3       	std	Y+32, r25	; 0x20
    2642:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2644:	89 a1       	ldd	r24, Y+33	; 0x21
    2646:	9a a1       	ldd	r25, Y+34	; 0x22
    2648:	01 97       	sbiw	r24, 0x01	; 1
    264a:	9a a3       	std	Y+34, r25	; 0x22
    264c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    264e:	89 a1       	ldd	r24, Y+33	; 0x21
    2650:	9a a1       	ldd	r25, Y+34	; 0x22
    2652:	00 97       	sbiw	r24, 0x00	; 0
    2654:	69 f7       	brne	.-38     	; 0x2630 <LCD_sendCommand+0x1ae>
    2656:	14 c0       	rjmp	.+40     	; 0x2680 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2658:	6b a1       	ldd	r22, Y+35	; 0x23
    265a:	7c a1       	ldd	r23, Y+36	; 0x24
    265c:	8d a1       	ldd	r24, Y+37	; 0x25
    265e:	9e a1       	ldd	r25, Y+38	; 0x26
    2660:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	9a a3       	std	Y+34, r25	; 0x22
    266a:	89 a3       	std	Y+33, r24	; 0x21
    266c:	89 a1       	ldd	r24, Y+33	; 0x21
    266e:	9a a1       	ldd	r25, Y+34	; 0x22
    2670:	9e 8f       	std	Y+30, r25	; 0x1e
    2672:	8d 8f       	std	Y+29, r24	; 0x1d
    2674:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2676:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2678:	01 97       	sbiw	r24, 0x01	; 1
    267a:	f1 f7       	brne	.-4      	; 0x2678 <LCD_sendCommand+0x1f6>
    267c:	9e 8f       	std	Y+30, r25	; 0x1e
    267e:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1);

#if(LCD_DATA_BITS_MODE == 8)
	/* Send command */
	GPIO_writePort(LCD_DATA_PORT_ID, command);
    2680:	82 e0       	ldi	r24, 0x02	; 2
    2682:	6a ad       	ldd	r22, Y+58	; 0x3a
    2684:	0e 94 9d 10 	call	0x213a	; 0x213a <GPIO_writePort>
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	a0 e8       	ldi	r26, 0x80	; 128
    268e:	bf e3       	ldi	r27, 0x3F	; 63
    2690:	89 8f       	std	Y+25, r24	; 0x19
    2692:	9a 8f       	std	Y+26, r25	; 0x1a
    2694:	ab 8f       	std	Y+27, r26	; 0x1b
    2696:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2698:	69 8d       	ldd	r22, Y+25	; 0x19
    269a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    269c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    269e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	4a e7       	ldi	r20, 0x7A	; 122
    26a6:	53 e4       	ldi	r21, 0x43	; 67
    26a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	8d 8b       	std	Y+21, r24	; 0x15
    26b2:	9e 8b       	std	Y+22, r25	; 0x16
    26b4:	af 8b       	std	Y+23, r26	; 0x17
    26b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26b8:	6d 89       	ldd	r22, Y+21	; 0x15
    26ba:	7e 89       	ldd	r23, Y+22	; 0x16
    26bc:	8f 89       	ldd	r24, Y+23	; 0x17
    26be:	98 8d       	ldd	r25, Y+24	; 0x18
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	40 e8       	ldi	r20, 0x80	; 128
    26c6:	5f e3       	ldi	r21, 0x3F	; 63
    26c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26cc:	88 23       	and	r24, r24
    26ce:	2c f4       	brge	.+10     	; 0x26da <LCD_sendCommand+0x258>
		__ticks = 1;
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	9c 8b       	std	Y+20, r25	; 0x14
    26d6:	8b 8b       	std	Y+19, r24	; 0x13
    26d8:	3f c0       	rjmp	.+126    	; 0x2758 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    26da:	6d 89       	ldd	r22, Y+21	; 0x15
    26dc:	7e 89       	ldd	r23, Y+22	; 0x16
    26de:	8f 89       	ldd	r24, Y+23	; 0x17
    26e0:	98 8d       	ldd	r25, Y+24	; 0x18
    26e2:	20 e0       	ldi	r18, 0x00	; 0
    26e4:	3f ef       	ldi	r19, 0xFF	; 255
    26e6:	4f e7       	ldi	r20, 0x7F	; 127
    26e8:	57 e4       	ldi	r21, 0x47	; 71
    26ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26ee:	18 16       	cp	r1, r24
    26f0:	4c f5       	brge	.+82     	; 0x2744 <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f2:	69 8d       	ldd	r22, Y+25	; 0x19
    26f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	40 e2       	ldi	r20, 0x20	; 32
    2700:	51 e4       	ldi	r21, 0x41	; 65
    2702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	bc 01       	movw	r22, r24
    270c:	cd 01       	movw	r24, r26
    270e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	9c 8b       	std	Y+20, r25	; 0x14
    2718:	8b 8b       	std	Y+19, r24	; 0x13
    271a:	0f c0       	rjmp	.+30     	; 0x273a <LCD_sendCommand+0x2b8>
    271c:	89 e1       	ldi	r24, 0x19	; 25
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	9a 8b       	std	Y+18, r25	; 0x12
    2722:	89 8b       	std	Y+17, r24	; 0x11
    2724:	89 89       	ldd	r24, Y+17	; 0x11
    2726:	9a 89       	ldd	r25, Y+18	; 0x12
    2728:	01 97       	sbiw	r24, 0x01	; 1
    272a:	f1 f7       	brne	.-4      	; 0x2728 <LCD_sendCommand+0x2a6>
    272c:	9a 8b       	std	Y+18, r25	; 0x12
    272e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2730:	8b 89       	ldd	r24, Y+19	; 0x13
    2732:	9c 89       	ldd	r25, Y+20	; 0x14
    2734:	01 97       	sbiw	r24, 0x01	; 1
    2736:	9c 8b       	std	Y+20, r25	; 0x14
    2738:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    273a:	8b 89       	ldd	r24, Y+19	; 0x13
    273c:	9c 89       	ldd	r25, Y+20	; 0x14
    273e:	00 97       	sbiw	r24, 0x00	; 0
    2740:	69 f7       	brne	.-38     	; 0x271c <LCD_sendCommand+0x29a>
    2742:	14 c0       	rjmp	.+40     	; 0x276c <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2744:	6d 89       	ldd	r22, Y+21	; 0x15
    2746:	7e 89       	ldd	r23, Y+22	; 0x16
    2748:	8f 89       	ldd	r24, Y+23	; 0x17
    274a:	98 8d       	ldd	r25, Y+24	; 0x18
    274c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	9c 8b       	std	Y+20, r25	; 0x14
    2756:	8b 8b       	std	Y+19, r24	; 0x13
    2758:	8b 89       	ldd	r24, Y+19	; 0x13
    275a:	9c 89       	ldd	r25, Y+20	; 0x14
    275c:	98 8b       	std	Y+16, r25	; 0x10
    275e:	8f 87       	std	Y+15, r24	; 0x0f
    2760:	8f 85       	ldd	r24, Y+15	; 0x0f
    2762:	98 89       	ldd	r25, Y+16	; 0x10
    2764:	01 97       	sbiw	r24, 0x01	; 1
    2766:	f1 f7       	brne	.-4      	; 0x2764 <LCD_sendCommand+0x2e2>
    2768:	98 8b       	std	Y+16, r25	; 0x10
    276a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Enable(E) = 0 */
    276c:	83 e0       	ldi	r24, 0x03	; 3
    276e:	66 e0       	ldi	r22, 0x06	; 6
    2770:	40 e0       	ldi	r20, 0x00	; 0
    2772:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <GPIO_writePin>
    2776:	80 e0       	ldi	r24, 0x00	; 0
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	a0 e8       	ldi	r26, 0x80	; 128
    277c:	bf e3       	ldi	r27, 0x3F	; 63
    277e:	8b 87       	std	Y+11, r24	; 0x0b
    2780:	9c 87       	std	Y+12, r25	; 0x0c
    2782:	ad 87       	std	Y+13, r26	; 0x0d
    2784:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2786:	6b 85       	ldd	r22, Y+11	; 0x0b
    2788:	7c 85       	ldd	r23, Y+12	; 0x0c
    278a:	8d 85       	ldd	r24, Y+13	; 0x0d
    278c:	9e 85       	ldd	r25, Y+14	; 0x0e
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	4a e7       	ldi	r20, 0x7A	; 122
    2794:	53 e4       	ldi	r21, 0x43	; 67
    2796:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    279a:	dc 01       	movw	r26, r24
    279c:	cb 01       	movw	r24, r22
    279e:	8f 83       	std	Y+7, r24	; 0x07
    27a0:	98 87       	std	Y+8, r25	; 0x08
    27a2:	a9 87       	std	Y+9, r26	; 0x09
    27a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27a6:	6f 81       	ldd	r22, Y+7	; 0x07
    27a8:	78 85       	ldd	r23, Y+8	; 0x08
    27aa:	89 85       	ldd	r24, Y+9	; 0x09
    27ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ae:	20 e0       	ldi	r18, 0x00	; 0
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	40 e8       	ldi	r20, 0x80	; 128
    27b4:	5f e3       	ldi	r21, 0x3F	; 63
    27b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27ba:	88 23       	and	r24, r24
    27bc:	2c f4       	brge	.+10     	; 0x27c8 <LCD_sendCommand+0x346>
		__ticks = 1;
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	9e 83       	std	Y+6, r25	; 0x06
    27c4:	8d 83       	std	Y+5, r24	; 0x05
    27c6:	3f c0       	rjmp	.+126    	; 0x2846 <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    27c8:	6f 81       	ldd	r22, Y+7	; 0x07
    27ca:	78 85       	ldd	r23, Y+8	; 0x08
    27cc:	89 85       	ldd	r24, Y+9	; 0x09
    27ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d0:	20 e0       	ldi	r18, 0x00	; 0
    27d2:	3f ef       	ldi	r19, 0xFF	; 255
    27d4:	4f e7       	ldi	r20, 0x7F	; 127
    27d6:	57 e4       	ldi	r21, 0x47	; 71
    27d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27dc:	18 16       	cp	r1, r24
    27de:	4c f5       	brge	.+82     	; 0x2832 <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    27e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    27e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	40 e2       	ldi	r20, 0x20	; 32
    27ee:	51 e4       	ldi	r21, 0x41	; 65
    27f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	bc 01       	movw	r22, r24
    27fa:	cd 01       	movw	r24, r26
    27fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2800:	dc 01       	movw	r26, r24
    2802:	cb 01       	movw	r24, r22
    2804:	9e 83       	std	Y+6, r25	; 0x06
    2806:	8d 83       	std	Y+5, r24	; 0x05
    2808:	0f c0       	rjmp	.+30     	; 0x2828 <LCD_sendCommand+0x3a6>
    280a:	89 e1       	ldi	r24, 0x19	; 25
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	9c 83       	std	Y+4, r25	; 0x04
    2810:	8b 83       	std	Y+3, r24	; 0x03
    2812:	8b 81       	ldd	r24, Y+3	; 0x03
    2814:	9c 81       	ldd	r25, Y+4	; 0x04
    2816:	01 97       	sbiw	r24, 0x01	; 1
    2818:	f1 f7       	brne	.-4      	; 0x2816 <LCD_sendCommand+0x394>
    281a:	9c 83       	std	Y+4, r25	; 0x04
    281c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    281e:	8d 81       	ldd	r24, Y+5	; 0x05
    2820:	9e 81       	ldd	r25, Y+6	; 0x06
    2822:	01 97       	sbiw	r24, 0x01	; 1
    2824:	9e 83       	std	Y+6, r25	; 0x06
    2826:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2828:	8d 81       	ldd	r24, Y+5	; 0x05
    282a:	9e 81       	ldd	r25, Y+6	; 0x06
    282c:	00 97       	sbiw	r24, 0x00	; 0
    282e:	69 f7       	brne	.-38     	; 0x280a <LCD_sendCommand+0x388>
    2830:	14 c0       	rjmp	.+40     	; 0x285a <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2832:	6f 81       	ldd	r22, Y+7	; 0x07
    2834:	78 85       	ldd	r23, Y+8	; 0x08
    2836:	89 85       	ldd	r24, Y+9	; 0x09
    2838:	9a 85       	ldd	r25, Y+10	; 0x0a
    283a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    283e:	dc 01       	movw	r26, r24
    2840:	cb 01       	movw	r24, r22
    2842:	9e 83       	std	Y+6, r25	; 0x06
    2844:	8d 83       	std	Y+5, r24	; 0x05
    2846:	8d 81       	ldd	r24, Y+5	; 0x05
    2848:	9e 81       	ldd	r25, Y+6	; 0x06
    284a:	9a 83       	std	Y+2, r25	; 0x02
    284c:	89 83       	std	Y+1, r24	; 0x01
    284e:	89 81       	ldd	r24, Y+1	; 0x01
    2850:	9a 81       	ldd	r25, Y+2	; 0x02
    2852:	01 97       	sbiw	r24, 0x01	; 1
    2854:	f1 f7       	brne	.-4      	; 0x2852 <LCD_sendCommand+0x3d0>
    2856:	9a 83       	std	Y+2, r25	; 0x02
    2858:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1);

#endif

}
    285a:	ea 96       	adiw	r28, 0x3a	; 58
    285c:	0f b6       	in	r0, 0x3f	; 63
    285e:	f8 94       	cli
    2860:	de bf       	out	0x3e, r29	; 62
    2862:	0f be       	out	0x3f, r0	; 63
    2864:	cd bf       	out	0x3d, r28	; 61
    2866:	cf 91       	pop	r28
    2868:	df 91       	pop	r29
    286a:	08 95       	ret

0000286c <LCD_displayCharacter>:
/*
 * Description:
 * This function send character to the LCD.
 */
void LCD_displayCharacter(uint8 character)
{
    286c:	df 93       	push	r29
    286e:	cf 93       	push	r28
    2870:	cd b7       	in	r28, 0x3d	; 61
    2872:	de b7       	in	r29, 0x3e	; 62
    2874:	ea 97       	sbiw	r28, 0x3a	; 58
    2876:	0f b6       	in	r0, 0x3f	; 63
    2878:	f8 94       	cli
    287a:	de bf       	out	0x3e, r29	; 62
    287c:	0f be       	out	0x3f, r0	; 63
    287e:	cd bf       	out	0x3d, r28	; 61
    2880:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    2882:	19 ae       	std	Y+57, r1	; 0x39
	/* RS = 1 (to send character) and R/W = 0 (to write value) */
	/* RS = 0  (to send command) and R/W = 0 (to write value) */
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    2884:	83 e0       	ldi	r24, 0x03	; 3
    2886:	64 e0       	ldi	r22, 0x04	; 4
    2888:	41 e0       	ldi	r20, 0x01	; 1
    288a:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);
    288e:	83 e0       	ldi	r24, 0x03	; 3
    2890:	65 e0       	ldi	r22, 0x05	; 5
    2892:	40 e0       	ldi	r20, 0x00	; 0
    2894:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <GPIO_writePin>
    2898:	80 e0       	ldi	r24, 0x00	; 0
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	a0 e8       	ldi	r26, 0x80	; 128
    289e:	bf e3       	ldi	r27, 0x3F	; 63
    28a0:	8d ab       	std	Y+53, r24	; 0x35
    28a2:	9e ab       	std	Y+54, r25	; 0x36
    28a4:	af ab       	std	Y+55, r26	; 0x37
    28a6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28a8:	6d a9       	ldd	r22, Y+53	; 0x35
    28aa:	7e a9       	ldd	r23, Y+54	; 0x36
    28ac:	8f a9       	ldd	r24, Y+55	; 0x37
    28ae:	98 ad       	ldd	r25, Y+56	; 0x38
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	4a e7       	ldi	r20, 0x7A	; 122
    28b6:	53 e4       	ldi	r21, 0x43	; 67
    28b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	89 ab       	std	Y+49, r24	; 0x31
    28c2:	9a ab       	std	Y+50, r25	; 0x32
    28c4:	ab ab       	std	Y+51, r26	; 0x33
    28c6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28c8:	69 a9       	ldd	r22, Y+49	; 0x31
    28ca:	7a a9       	ldd	r23, Y+50	; 0x32
    28cc:	8b a9       	ldd	r24, Y+51	; 0x33
    28ce:	9c a9       	ldd	r25, Y+52	; 0x34
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	40 e8       	ldi	r20, 0x80	; 128
    28d6:	5f e3       	ldi	r21, 0x3F	; 63
    28d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28dc:	88 23       	and	r24, r24
    28de:	2c f4       	brge	.+10     	; 0x28ea <LCD_displayCharacter+0x7e>
		__ticks = 1;
    28e0:	81 e0       	ldi	r24, 0x01	; 1
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	98 ab       	std	Y+48, r25	; 0x30
    28e6:	8f a7       	std	Y+47, r24	; 0x2f
    28e8:	3f c0       	rjmp	.+126    	; 0x2968 <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    28ea:	69 a9       	ldd	r22, Y+49	; 0x31
    28ec:	7a a9       	ldd	r23, Y+50	; 0x32
    28ee:	8b a9       	ldd	r24, Y+51	; 0x33
    28f0:	9c a9       	ldd	r25, Y+52	; 0x34
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	3f ef       	ldi	r19, 0xFF	; 255
    28f6:	4f e7       	ldi	r20, 0x7F	; 127
    28f8:	57 e4       	ldi	r21, 0x47	; 71
    28fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28fe:	18 16       	cp	r1, r24
    2900:	4c f5       	brge	.+82     	; 0x2954 <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2902:	6d a9       	ldd	r22, Y+53	; 0x35
    2904:	7e a9       	ldd	r23, Y+54	; 0x36
    2906:	8f a9       	ldd	r24, Y+55	; 0x37
    2908:	98 ad       	ldd	r25, Y+56	; 0x38
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	40 e2       	ldi	r20, 0x20	; 32
    2910:	51 e4       	ldi	r21, 0x41	; 65
    2912:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2916:	dc 01       	movw	r26, r24
    2918:	cb 01       	movw	r24, r22
    291a:	bc 01       	movw	r22, r24
    291c:	cd 01       	movw	r24, r26
    291e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	98 ab       	std	Y+48, r25	; 0x30
    2928:	8f a7       	std	Y+47, r24	; 0x2f
    292a:	0f c0       	rjmp	.+30     	; 0x294a <LCD_displayCharacter+0xde>
    292c:	89 e1       	ldi	r24, 0x19	; 25
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	9e a7       	std	Y+46, r25	; 0x2e
    2932:	8d a7       	std	Y+45, r24	; 0x2d
    2934:	8d a5       	ldd	r24, Y+45	; 0x2d
    2936:	9e a5       	ldd	r25, Y+46	; 0x2e
    2938:	01 97       	sbiw	r24, 0x01	; 1
    293a:	f1 f7       	brne	.-4      	; 0x2938 <LCD_displayCharacter+0xcc>
    293c:	9e a7       	std	Y+46, r25	; 0x2e
    293e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2940:	8f a5       	ldd	r24, Y+47	; 0x2f
    2942:	98 a9       	ldd	r25, Y+48	; 0x30
    2944:	01 97       	sbiw	r24, 0x01	; 1
    2946:	98 ab       	std	Y+48, r25	; 0x30
    2948:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    294a:	8f a5       	ldd	r24, Y+47	; 0x2f
    294c:	98 a9       	ldd	r25, Y+48	; 0x30
    294e:	00 97       	sbiw	r24, 0x00	; 0
    2950:	69 f7       	brne	.-38     	; 0x292c <LCD_displayCharacter+0xc0>
    2952:	14 c0       	rjmp	.+40     	; 0x297c <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2954:	69 a9       	ldd	r22, Y+49	; 0x31
    2956:	7a a9       	ldd	r23, Y+50	; 0x32
    2958:	8b a9       	ldd	r24, Y+51	; 0x33
    295a:	9c a9       	ldd	r25, Y+52	; 0x34
    295c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	98 ab       	std	Y+48, r25	; 0x30
    2966:	8f a7       	std	Y+47, r24	; 0x2f
    2968:	8f a5       	ldd	r24, Y+47	; 0x2f
    296a:	98 a9       	ldd	r25, Y+48	; 0x30
    296c:	9c a7       	std	Y+44, r25	; 0x2c
    296e:	8b a7       	std	Y+43, r24	; 0x2b
    2970:	8b a5       	ldd	r24, Y+43	; 0x2b
    2972:	9c a5       	ldd	r25, Y+44	; 0x2c
    2974:	01 97       	sbiw	r24, 0x01	; 1
    2976:	f1 f7       	brne	.-4      	; 0x2974 <LCD_displayCharacter+0x108>
    2978:	9c a7       	std	Y+44, r25	; 0x2c
    297a:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	/* Enable(E) = 1 */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    297c:	83 e0       	ldi	r24, 0x03	; 3
    297e:	66 e0       	ldi	r22, 0x06	; 6
    2980:	41 e0       	ldi	r20, 0x01	; 1
    2982:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <GPIO_writePin>
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	a0 e8       	ldi	r26, 0x80	; 128
    298c:	bf e3       	ldi	r27, 0x3F	; 63
    298e:	8f a3       	std	Y+39, r24	; 0x27
    2990:	98 a7       	std	Y+40, r25	; 0x28
    2992:	a9 a7       	std	Y+41, r26	; 0x29
    2994:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2996:	6f a1       	ldd	r22, Y+39	; 0x27
    2998:	78 a5       	ldd	r23, Y+40	; 0x28
    299a:	89 a5       	ldd	r24, Y+41	; 0x29
    299c:	9a a5       	ldd	r25, Y+42	; 0x2a
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	4a e7       	ldi	r20, 0x7A	; 122
    29a4:	53 e4       	ldi	r21, 0x43	; 67
    29a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	8b a3       	std	Y+35, r24	; 0x23
    29b0:	9c a3       	std	Y+36, r25	; 0x24
    29b2:	ad a3       	std	Y+37, r26	; 0x25
    29b4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29b6:	6b a1       	ldd	r22, Y+35	; 0x23
    29b8:	7c a1       	ldd	r23, Y+36	; 0x24
    29ba:	8d a1       	ldd	r24, Y+37	; 0x25
    29bc:	9e a1       	ldd	r25, Y+38	; 0x26
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	40 e8       	ldi	r20, 0x80	; 128
    29c4:	5f e3       	ldi	r21, 0x3F	; 63
    29c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29ca:	88 23       	and	r24, r24
    29cc:	2c f4       	brge	.+10     	; 0x29d8 <LCD_displayCharacter+0x16c>
		__ticks = 1;
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	9a a3       	std	Y+34, r25	; 0x22
    29d4:	89 a3       	std	Y+33, r24	; 0x21
    29d6:	3f c0       	rjmp	.+126    	; 0x2a56 <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    29d8:	6b a1       	ldd	r22, Y+35	; 0x23
    29da:	7c a1       	ldd	r23, Y+36	; 0x24
    29dc:	8d a1       	ldd	r24, Y+37	; 0x25
    29de:	9e a1       	ldd	r25, Y+38	; 0x26
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	3f ef       	ldi	r19, 0xFF	; 255
    29e4:	4f e7       	ldi	r20, 0x7F	; 127
    29e6:	57 e4       	ldi	r21, 0x47	; 71
    29e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29ec:	18 16       	cp	r1, r24
    29ee:	4c f5       	brge	.+82     	; 0x2a42 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f0:	6f a1       	ldd	r22, Y+39	; 0x27
    29f2:	78 a5       	ldd	r23, Y+40	; 0x28
    29f4:	89 a5       	ldd	r24, Y+41	; 0x29
    29f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	40 e2       	ldi	r20, 0x20	; 32
    29fe:	51 e4       	ldi	r21, 0x41	; 65
    2a00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	bc 01       	movw	r22, r24
    2a0a:	cd 01       	movw	r24, r26
    2a0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a10:	dc 01       	movw	r26, r24
    2a12:	cb 01       	movw	r24, r22
    2a14:	9a a3       	std	Y+34, r25	; 0x22
    2a16:	89 a3       	std	Y+33, r24	; 0x21
    2a18:	0f c0       	rjmp	.+30     	; 0x2a38 <LCD_displayCharacter+0x1cc>
    2a1a:	89 e1       	ldi	r24, 0x19	; 25
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	98 a3       	std	Y+32, r25	; 0x20
    2a20:	8f 8f       	std	Y+31, r24	; 0x1f
    2a22:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a24:	98 a1       	ldd	r25, Y+32	; 0x20
    2a26:	01 97       	sbiw	r24, 0x01	; 1
    2a28:	f1 f7       	brne	.-4      	; 0x2a26 <LCD_displayCharacter+0x1ba>
    2a2a:	98 a3       	std	Y+32, r25	; 0x20
    2a2c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a2e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a30:	9a a1       	ldd	r25, Y+34	; 0x22
    2a32:	01 97       	sbiw	r24, 0x01	; 1
    2a34:	9a a3       	std	Y+34, r25	; 0x22
    2a36:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a38:	89 a1       	ldd	r24, Y+33	; 0x21
    2a3a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a3c:	00 97       	sbiw	r24, 0x00	; 0
    2a3e:	69 f7       	brne	.-38     	; 0x2a1a <LCD_displayCharacter+0x1ae>
    2a40:	14 c0       	rjmp	.+40     	; 0x2a6a <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a42:	6b a1       	ldd	r22, Y+35	; 0x23
    2a44:	7c a1       	ldd	r23, Y+36	; 0x24
    2a46:	8d a1       	ldd	r24, Y+37	; 0x25
    2a48:	9e a1       	ldd	r25, Y+38	; 0x26
    2a4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a4e:	dc 01       	movw	r26, r24
    2a50:	cb 01       	movw	r24, r22
    2a52:	9a a3       	std	Y+34, r25	; 0x22
    2a54:	89 a3       	std	Y+33, r24	; 0x21
    2a56:	89 a1       	ldd	r24, Y+33	; 0x21
    2a58:	9a a1       	ldd	r25, Y+34	; 0x22
    2a5a:	9e 8f       	std	Y+30, r25	; 0x1e
    2a5c:	8d 8f       	std	Y+29, r24	; 0x1d
    2a5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a60:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a62:	01 97       	sbiw	r24, 0x01	; 1
    2a64:	f1 f7       	brne	.-4      	; 0x2a62 <LCD_displayCharacter+0x1f6>
    2a66:	9e 8f       	std	Y+30, r25	; 0x1e
    2a68:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1);

#if(LCD_DATA_BITS_MODE == 8)
	/* Send character */
	GPIO_writePort(LCD_DATA_PORT_ID, character);
    2a6a:	82 e0       	ldi	r24, 0x02	; 2
    2a6c:	6a ad       	ldd	r22, Y+58	; 0x3a
    2a6e:	0e 94 9d 10 	call	0x213a	; 0x213a <GPIO_writePort>
    2a72:	80 e0       	ldi	r24, 0x00	; 0
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	a0 e8       	ldi	r26, 0x80	; 128
    2a78:	bf e3       	ldi	r27, 0x3F	; 63
    2a7a:	89 8f       	std	Y+25, r24	; 0x19
    2a7c:	9a 8f       	std	Y+26, r25	; 0x1a
    2a7e:	ab 8f       	std	Y+27, r26	; 0x1b
    2a80:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a82:	69 8d       	ldd	r22, Y+25	; 0x19
    2a84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	4a e7       	ldi	r20, 0x7A	; 122
    2a90:	53 e4       	ldi	r21, 0x43	; 67
    2a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	8d 8b       	std	Y+21, r24	; 0x15
    2a9c:	9e 8b       	std	Y+22, r25	; 0x16
    2a9e:	af 8b       	std	Y+23, r26	; 0x17
    2aa0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2aa2:	6d 89       	ldd	r22, Y+21	; 0x15
    2aa4:	7e 89       	ldd	r23, Y+22	; 0x16
    2aa6:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa8:	98 8d       	ldd	r25, Y+24	; 0x18
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	40 e8       	ldi	r20, 0x80	; 128
    2ab0:	5f e3       	ldi	r21, 0x3F	; 63
    2ab2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ab6:	88 23       	and	r24, r24
    2ab8:	2c f4       	brge	.+10     	; 0x2ac4 <LCD_displayCharacter+0x258>
		__ticks = 1;
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	9c 8b       	std	Y+20, r25	; 0x14
    2ac0:	8b 8b       	std	Y+19, r24	; 0x13
    2ac2:	3f c0       	rjmp	.+126    	; 0x2b42 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2ac4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ac6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ac8:	8f 89       	ldd	r24, Y+23	; 0x17
    2aca:	98 8d       	ldd	r25, Y+24	; 0x18
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	3f ef       	ldi	r19, 0xFF	; 255
    2ad0:	4f e7       	ldi	r20, 0x7F	; 127
    2ad2:	57 e4       	ldi	r21, 0x47	; 71
    2ad4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ad8:	18 16       	cp	r1, r24
    2ada:	4c f5       	brge	.+82     	; 0x2b2e <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2adc:	69 8d       	ldd	r22, Y+25	; 0x19
    2ade:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ae0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ae2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	40 e2       	ldi	r20, 0x20	; 32
    2aea:	51 e4       	ldi	r21, 0x41	; 65
    2aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	bc 01       	movw	r22, r24
    2af6:	cd 01       	movw	r24, r26
    2af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	9c 8b       	std	Y+20, r25	; 0x14
    2b02:	8b 8b       	std	Y+19, r24	; 0x13
    2b04:	0f c0       	rjmp	.+30     	; 0x2b24 <LCD_displayCharacter+0x2b8>
    2b06:	89 e1       	ldi	r24, 0x19	; 25
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	9a 8b       	std	Y+18, r25	; 0x12
    2b0c:	89 8b       	std	Y+17, r24	; 0x11
    2b0e:	89 89       	ldd	r24, Y+17	; 0x11
    2b10:	9a 89       	ldd	r25, Y+18	; 0x12
    2b12:	01 97       	sbiw	r24, 0x01	; 1
    2b14:	f1 f7       	brne	.-4      	; 0x2b12 <LCD_displayCharacter+0x2a6>
    2b16:	9a 8b       	std	Y+18, r25	; 0x12
    2b18:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b1a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b1c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b1e:	01 97       	sbiw	r24, 0x01	; 1
    2b20:	9c 8b       	std	Y+20, r25	; 0x14
    2b22:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b24:	8b 89       	ldd	r24, Y+19	; 0x13
    2b26:	9c 89       	ldd	r25, Y+20	; 0x14
    2b28:	00 97       	sbiw	r24, 0x00	; 0
    2b2a:	69 f7       	brne	.-38     	; 0x2b06 <LCD_displayCharacter+0x29a>
    2b2c:	14 c0       	rjmp	.+40     	; 0x2b56 <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b2e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b30:	7e 89       	ldd	r23, Y+22	; 0x16
    2b32:	8f 89       	ldd	r24, Y+23	; 0x17
    2b34:	98 8d       	ldd	r25, Y+24	; 0x18
    2b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	cb 01       	movw	r24, r22
    2b3e:	9c 8b       	std	Y+20, r25	; 0x14
    2b40:	8b 8b       	std	Y+19, r24	; 0x13
    2b42:	8b 89       	ldd	r24, Y+19	; 0x13
    2b44:	9c 89       	ldd	r25, Y+20	; 0x14
    2b46:	98 8b       	std	Y+16, r25	; 0x10
    2b48:	8f 87       	std	Y+15, r24	; 0x0f
    2b4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b4c:	98 89       	ldd	r25, Y+16	; 0x10
    2b4e:	01 97       	sbiw	r24, 0x01	; 1
    2b50:	f1 f7       	brne	.-4      	; 0x2b4e <LCD_displayCharacter+0x2e2>
    2b52:	98 8b       	std	Y+16, r25	; 0x10
    2b54:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Enable(E) = 0 */
    2b56:	83 e0       	ldi	r24, 0x03	; 3
    2b58:	66 e0       	ldi	r22, 0x06	; 6
    2b5a:	40 e0       	ldi	r20, 0x00	; 0
    2b5c:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <GPIO_writePin>
    2b60:	80 e0       	ldi	r24, 0x00	; 0
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	a0 e8       	ldi	r26, 0x80	; 128
    2b66:	bf e3       	ldi	r27, 0x3F	; 63
    2b68:	8b 87       	std	Y+11, r24	; 0x0b
    2b6a:	9c 87       	std	Y+12, r25	; 0x0c
    2b6c:	ad 87       	std	Y+13, r26	; 0x0d
    2b6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b70:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b72:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	4a e7       	ldi	r20, 0x7A	; 122
    2b7e:	53 e4       	ldi	r21, 0x43	; 67
    2b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	8f 83       	std	Y+7, r24	; 0x07
    2b8a:	98 87       	std	Y+8, r25	; 0x08
    2b8c:	a9 87       	std	Y+9, r26	; 0x09
    2b8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b90:	6f 81       	ldd	r22, Y+7	; 0x07
    2b92:	78 85       	ldd	r23, Y+8	; 0x08
    2b94:	89 85       	ldd	r24, Y+9	; 0x09
    2b96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	40 e8       	ldi	r20, 0x80	; 128
    2b9e:	5f e3       	ldi	r21, 0x3F	; 63
    2ba0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ba4:	88 23       	and	r24, r24
    2ba6:	2c f4       	brge	.+10     	; 0x2bb2 <LCD_displayCharacter+0x346>
		__ticks = 1;
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	9e 83       	std	Y+6, r25	; 0x06
    2bae:	8d 83       	std	Y+5, r24	; 0x05
    2bb0:	3f c0       	rjmp	.+126    	; 0x2c30 <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    2bb2:	6f 81       	ldd	r22, Y+7	; 0x07
    2bb4:	78 85       	ldd	r23, Y+8	; 0x08
    2bb6:	89 85       	ldd	r24, Y+9	; 0x09
    2bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	3f ef       	ldi	r19, 0xFF	; 255
    2bbe:	4f e7       	ldi	r20, 0x7F	; 127
    2bc0:	57 e4       	ldi	r21, 0x47	; 71
    2bc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bc6:	18 16       	cp	r1, r24
    2bc8:	4c f5       	brge	.+82     	; 0x2c1c <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	40 e2       	ldi	r20, 0x20	; 32
    2bd8:	51 e4       	ldi	r21, 0x41	; 65
    2bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	bc 01       	movw	r22, r24
    2be4:	cd 01       	movw	r24, r26
    2be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bea:	dc 01       	movw	r26, r24
    2bec:	cb 01       	movw	r24, r22
    2bee:	9e 83       	std	Y+6, r25	; 0x06
    2bf0:	8d 83       	std	Y+5, r24	; 0x05
    2bf2:	0f c0       	rjmp	.+30     	; 0x2c12 <LCD_displayCharacter+0x3a6>
    2bf4:	89 e1       	ldi	r24, 0x19	; 25
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	9c 83       	std	Y+4, r25	; 0x04
    2bfa:	8b 83       	std	Y+3, r24	; 0x03
    2bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    2c00:	01 97       	sbiw	r24, 0x01	; 1
    2c02:	f1 f7       	brne	.-4      	; 0x2c00 <LCD_displayCharacter+0x394>
    2c04:	9c 83       	std	Y+4, r25	; 0x04
    2c06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c08:	8d 81       	ldd	r24, Y+5	; 0x05
    2c0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c0c:	01 97       	sbiw	r24, 0x01	; 1
    2c0e:	9e 83       	std	Y+6, r25	; 0x06
    2c10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c12:	8d 81       	ldd	r24, Y+5	; 0x05
    2c14:	9e 81       	ldd	r25, Y+6	; 0x06
    2c16:	00 97       	sbiw	r24, 0x00	; 0
    2c18:	69 f7       	brne	.-38     	; 0x2bf4 <LCD_displayCharacter+0x388>
    2c1a:	14 c0       	rjmp	.+40     	; 0x2c44 <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c1c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c1e:	78 85       	ldd	r23, Y+8	; 0x08
    2c20:	89 85       	ldd	r24, Y+9	; 0x09
    2c22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c28:	dc 01       	movw	r26, r24
    2c2a:	cb 01       	movw	r24, r22
    2c2c:	9e 83       	std	Y+6, r25	; 0x06
    2c2e:	8d 83       	std	Y+5, r24	; 0x05
    2c30:	8d 81       	ldd	r24, Y+5	; 0x05
    2c32:	9e 81       	ldd	r25, Y+6	; 0x06
    2c34:	9a 83       	std	Y+2, r25	; 0x02
    2c36:	89 83       	std	Y+1, r24	; 0x01
    2c38:	89 81       	ldd	r24, Y+1	; 0x01
    2c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c3c:	01 97       	sbiw	r24, 0x01	; 1
    2c3e:	f1 f7       	brne	.-4      	; 0x2c3c <LCD_displayCharacter+0x3d0>
    2c40:	9a 83       	std	Y+2, r25	; 0x02
    2c42:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1);
#endif
}
    2c44:	ea 96       	adiw	r28, 0x3a	; 58
    2c46:	0f b6       	in	r0, 0x3f	; 63
    2c48:	f8 94       	cli
    2c4a:	de bf       	out	0x3e, r29	; 62
    2c4c:	0f be       	out	0x3f, r0	; 63
    2c4e:	cd bf       	out	0x3d, r28	; 61
    2c50:	cf 91       	pop	r28
    2c52:	df 91       	pop	r29
    2c54:	08 95       	ret

00002c56 <LCD_displayString>:
/*
 * Description:
 * This function send a string to the LCD by loop on that string.
 */
void LCD_displayString(const uint8* string)
{
    2c56:	df 93       	push	r29
    2c58:	cf 93       	push	r28
    2c5a:	00 d0       	rcall	.+0      	; 0x2c5c <LCD_displayString+0x6>
    2c5c:	0f 92       	push	r0
    2c5e:	cd b7       	in	r28, 0x3d	; 61
    2c60:	de b7       	in	r29, 0x3e	; 62
    2c62:	9b 83       	std	Y+3, r25	; 0x03
    2c64:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i; /*counter*/
	/* This will loop on the string to display characters beside each other on LCD */
	for(i=0;(*string) != '\0';i++)
    2c66:	19 82       	std	Y+1, r1	; 0x01
    2c68:	0d c0       	rjmp	.+26     	; 0x2c84 <LCD_displayString+0x2e>
	{
		/* Display character on the LCD */
		LCD_displayCharacter (*string);
    2c6a:	ea 81       	ldd	r30, Y+2	; 0x02
    2c6c:	fb 81       	ldd	r31, Y+3	; 0x03
    2c6e:	80 81       	ld	r24, Z
    2c70:	0e 94 36 14 	call	0x286c	; 0x286c <LCD_displayCharacter>
		/* Jump to the next character */
		string++;
    2c74:	8a 81       	ldd	r24, Y+2	; 0x02
    2c76:	9b 81       	ldd	r25, Y+3	; 0x03
    2c78:	01 96       	adiw	r24, 0x01	; 1
    2c7a:	9b 83       	std	Y+3, r25	; 0x03
    2c7c:	8a 83       	std	Y+2, r24	; 0x02
 */
void LCD_displayString(const uint8* string)
{
	uint8 i; /*counter*/
	/* This will loop on the string to display characters beside each other on LCD */
	for(i=0;(*string) != '\0';i++)
    2c7e:	89 81       	ldd	r24, Y+1	; 0x01
    2c80:	8f 5f       	subi	r24, 0xFF	; 255
    2c82:	89 83       	std	Y+1, r24	; 0x01
    2c84:	ea 81       	ldd	r30, Y+2	; 0x02
    2c86:	fb 81       	ldd	r31, Y+3	; 0x03
    2c88:	80 81       	ld	r24, Z
    2c8a:	88 23       	and	r24, r24
    2c8c:	71 f7       	brne	.-36     	; 0x2c6a <LCD_displayString+0x14>
		/* Display character on the LCD */
		LCD_displayCharacter (*string);
		/* Jump to the next character */
		string++;
	}
}
    2c8e:	0f 90       	pop	r0
    2c90:	0f 90       	pop	r0
    2c92:	0f 90       	pop	r0
    2c94:	cf 91       	pop	r28
    2c96:	df 91       	pop	r29
    2c98:	08 95       	ret

00002c9a <LCD_moveCursor>:
/*
 * Description:
 * This function move the cursor in memory to choose position on LCD to start with.
 */
void LCD_moveCursor(uint8 row, uint8 col)
{
    2c9a:	df 93       	push	r29
    2c9c:	cf 93       	push	r28
    2c9e:	00 d0       	rcall	.+0      	; 0x2ca0 <LCD_moveCursor+0x6>
    2ca0:	00 d0       	rcall	.+0      	; 0x2ca2 <LCD_moveCursor+0x8>
    2ca2:	0f 92       	push	r0
    2ca4:	cd b7       	in	r28, 0x3d	; 61
    2ca6:	de b7       	in	r29, 0x3e	; 62
    2ca8:	8a 83       	std	Y+2, r24	; 0x02
    2caa:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2cac:	8a 81       	ldd	r24, Y+2	; 0x02
    2cae:	28 2f       	mov	r18, r24
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	3d 83       	std	Y+5, r19	; 0x05
    2cb4:	2c 83       	std	Y+4, r18	; 0x04
    2cb6:	8c 81       	ldd	r24, Y+4	; 0x04
    2cb8:	9d 81       	ldd	r25, Y+5	; 0x05
    2cba:	81 30       	cpi	r24, 0x01	; 1
    2cbc:	91 05       	cpc	r25, r1
    2cbe:	c1 f0       	breq	.+48     	; 0x2cf0 <LCD_moveCursor+0x56>
    2cc0:	2c 81       	ldd	r18, Y+4	; 0x04
    2cc2:	3d 81       	ldd	r19, Y+5	; 0x05
    2cc4:	22 30       	cpi	r18, 0x02	; 2
    2cc6:	31 05       	cpc	r19, r1
    2cc8:	2c f4       	brge	.+10     	; 0x2cd4 <LCD_moveCursor+0x3a>
    2cca:	8c 81       	ldd	r24, Y+4	; 0x04
    2ccc:	9d 81       	ldd	r25, Y+5	; 0x05
    2cce:	00 97       	sbiw	r24, 0x00	; 0
    2cd0:	61 f0       	breq	.+24     	; 0x2cea <LCD_moveCursor+0x50>
    2cd2:	19 c0       	rjmp	.+50     	; 0x2d06 <LCD_moveCursor+0x6c>
    2cd4:	2c 81       	ldd	r18, Y+4	; 0x04
    2cd6:	3d 81       	ldd	r19, Y+5	; 0x05
    2cd8:	22 30       	cpi	r18, 0x02	; 2
    2cda:	31 05       	cpc	r19, r1
    2cdc:	69 f0       	breq	.+26     	; 0x2cf8 <LCD_moveCursor+0x5e>
    2cde:	8c 81       	ldd	r24, Y+4	; 0x04
    2ce0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ce2:	83 30       	cpi	r24, 0x03	; 3
    2ce4:	91 05       	cpc	r25, r1
    2ce6:	61 f0       	breq	.+24     	; 0x2d00 <LCD_moveCursor+0x66>
    2ce8:	0e c0       	rjmp	.+28     	; 0x2d06 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2cea:	8b 81       	ldd	r24, Y+3	; 0x03
    2cec:	89 83       	std	Y+1, r24	; 0x01
    2cee:	0b c0       	rjmp	.+22     	; 0x2d06 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf2:	80 5c       	subi	r24, 0xC0	; 192
    2cf4:	89 83       	std	Y+1, r24	; 0x01
    2cf6:	07 c0       	rjmp	.+14     	; 0x2d06 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfa:	80 5f       	subi	r24, 0xF0	; 240
    2cfc:	89 83       	std	Y+1, r24	; 0x01
    2cfe:	03 c0       	rjmp	.+6      	; 0x2d06 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2d00:	8b 81       	ldd	r24, Y+3	; 0x03
    2d02:	80 5b       	subi	r24, 0xB0	; 176
    2d04:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION); /*1000 0000 | memory address*/
    2d06:	89 81       	ldd	r24, Y+1	; 0x01
    2d08:	80 68       	ori	r24, 0x80	; 128
    2d0a:	0e 94 41 12 	call	0x2482	; 0x2482 <LCD_sendCommand>
}
    2d0e:	0f 90       	pop	r0
    2d10:	0f 90       	pop	r0
    2d12:	0f 90       	pop	r0
    2d14:	0f 90       	pop	r0
    2d16:	0f 90       	pop	r0
    2d18:	cf 91       	pop	r28
    2d1a:	df 91       	pop	r29
    2d1c:	08 95       	ret

00002d1e <LCD_displayStringRowColumn>:
/*
 * Description:
 * This function can select the position of the cursor and and write a string directly.
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const uint8* string)
{
    2d1e:	df 93       	push	r29
    2d20:	cf 93       	push	r28
    2d22:	00 d0       	rcall	.+0      	; 0x2d24 <LCD_displayStringRowColumn+0x6>
    2d24:	00 d0       	rcall	.+0      	; 0x2d26 <LCD_displayStringRowColumn+0x8>
    2d26:	cd b7       	in	r28, 0x3d	; 61
    2d28:	de b7       	in	r29, 0x3e	; 62
    2d2a:	89 83       	std	Y+1, r24	; 0x01
    2d2c:	6a 83       	std	Y+2, r22	; 0x02
    2d2e:	5c 83       	std	Y+4, r21	; 0x04
    2d30:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col);  /* Go to the required LCD position */
    2d32:	89 81       	ldd	r24, Y+1	; 0x01
    2d34:	6a 81       	ldd	r22, Y+2	; 0x02
    2d36:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <LCD_moveCursor>
	LCD_displayString(string); /* Display the string */
    2d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d3e:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <LCD_displayString>

}
    2d42:	0f 90       	pop	r0
    2d44:	0f 90       	pop	r0
    2d46:	0f 90       	pop	r0
    2d48:	0f 90       	pop	r0
    2d4a:	cf 91       	pop	r28
    2d4c:	df 91       	pop	r29
    2d4e:	08 95       	ret

00002d50 <LCD_intgerToString>:
/*
 * Description:
 * This function convert integer number into ASSCI to present the value on the LCD.
 */
void LCD_intgerToString(int intiger)
{
    2d50:	df 93       	push	r29
    2d52:	cf 93       	push	r28
    2d54:	cd b7       	in	r28, 0x3d	; 61
    2d56:	de b7       	in	r29, 0x3e	; 62
    2d58:	62 97       	sbiw	r28, 0x12	; 18
    2d5a:	0f b6       	in	r0, 0x3f	; 63
    2d5c:	f8 94       	cli
    2d5e:	de bf       	out	0x3e, r29	; 62
    2d60:	0f be       	out	0x3f, r0	; 63
    2d62:	cd bf       	out	0x3d, r28	; 61
    2d64:	9a 8b       	std	Y+18, r25	; 0x12
    2d66:	89 8b       	std	Y+17, r24	; 0x11
	   uint8 buff[16]; /* String to hold the ASCII result */
	   itoa(intiger,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2d68:	89 89       	ldd	r24, Y+17	; 0x11
    2d6a:	9a 89       	ldd	r25, Y+18	; 0x12
    2d6c:	9e 01       	movw	r18, r28
    2d6e:	2f 5f       	subi	r18, 0xFF	; 255
    2d70:	3f 4f       	sbci	r19, 0xFF	; 255
    2d72:	b9 01       	movw	r22, r18
    2d74:	4a e0       	ldi	r20, 0x0A	; 10
    2d76:	50 e0       	ldi	r21, 0x00	; 0
    2d78:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <itoa>
	   LCD_displayString(buff); /* Display the string */
    2d7c:	ce 01       	movw	r24, r28
    2d7e:	01 96       	adiw	r24, 0x01	; 1
    2d80:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <LCD_displayString>
}
    2d84:	62 96       	adiw	r28, 0x12	; 18
    2d86:	0f b6       	in	r0, 0x3f	; 63
    2d88:	f8 94       	cli
    2d8a:	de bf       	out	0x3e, r29	; 62
    2d8c:	0f be       	out	0x3f, r0	; 63
    2d8e:	cd bf       	out	0x3d, r28	; 61
    2d90:	cf 91       	pop	r28
    2d92:	df 91       	pop	r29
    2d94:	08 95       	ret

00002d96 <LCD_clearScreen>:
/*
 * Description:
 * This function clear the LCD screen.
 */
void LCD_clearScreen(void)
{
    2d96:	df 93       	push	r29
    2d98:	cf 93       	push	r28
    2d9a:	cd b7       	in	r28, 0x3d	; 61
    2d9c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_SCREEN ); /* Clear Screen */
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	0e 94 41 12 	call	0x2482	; 0x2482 <LCD_sendCommand>
}
    2da4:	cf 91       	pop	r28
    2da6:	df 91       	pop	r29
    2da8:	08 95       	ret

00002daa <TIMER_init>:
/*
 * Description:
 * Initiate the timer with any mode required (CTC OR Normal) mode with required frequency.
 */
void TIMER_init(TIMER0_ConfigType *config_ptr)
{
    2daa:	df 93       	push	r29
    2dac:	cf 93       	push	r28
    2dae:	00 d0       	rcall	.+0      	; 0x2db0 <TIMER_init+0x6>
    2db0:	cd b7       	in	r28, 0x3d	; 61
    2db2:	de b7       	in	r29, 0x3e	; 62
    2db4:	9a 83       	std	Y+2, r25	; 0x02
    2db6:	89 83       	std	Y+1, r24	; 0x01
	/*************************************************************************
	 								Timer0
	 *************************************************************************/
	TCCR0 |= (1<< FOC0); /* The FOC0 bit is only active when the WGM00 bit specifies a non-PWM mode */
    2db8:	a3 e5       	ldi	r26, 0x53	; 83
    2dba:	b0 e0       	ldi	r27, 0x00	; 0
    2dbc:	e3 e5       	ldi	r30, 0x53	; 83
    2dbe:	f0 e0       	ldi	r31, 0x00	; 0
    2dc0:	80 81       	ld	r24, Z
    2dc2:	80 68       	ori	r24, 0x80	; 128
    2dc4:	8c 93       	st	X, r24
	/* Select wave generation mode */
	TCCR0 = (TCCR0 & 0xB7) | ((((config_ptr->waveGenerationMode & 0x02)>>1)<<6) | ((config_ptr->waveGenerationMode & 0x01)<<3));
    2dc6:	a3 e5       	ldi	r26, 0x53	; 83
    2dc8:	b0 e0       	ldi	r27, 0x00	; 0
    2dca:	e3 e5       	ldi	r30, 0x53	; 83
    2dcc:	f0 e0       	ldi	r31, 0x00	; 0
    2dce:	80 81       	ld	r24, Z
    2dd0:	38 2f       	mov	r19, r24
    2dd2:	37 7b       	andi	r19, 0xB7	; 183
    2dd4:	e9 81       	ldd	r30, Y+1	; 0x01
    2dd6:	fa 81       	ldd	r31, Y+2	; 0x02
    2dd8:	80 81       	ld	r24, Z
    2dda:	88 2f       	mov	r24, r24
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	82 70       	andi	r24, 0x02	; 2
    2de0:	90 70       	andi	r25, 0x00	; 0
    2de2:	95 95       	asr	r25
    2de4:	87 95       	ror	r24
    2de6:	00 24       	eor	r0, r0
    2de8:	96 95       	lsr	r25
    2dea:	87 95       	ror	r24
    2dec:	07 94       	ror	r0
    2dee:	96 95       	lsr	r25
    2df0:	87 95       	ror	r24
    2df2:	07 94       	ror	r0
    2df4:	98 2f       	mov	r25, r24
    2df6:	80 2d       	mov	r24, r0
    2df8:	28 2f       	mov	r18, r24
    2dfa:	e9 81       	ldd	r30, Y+1	; 0x01
    2dfc:	fa 81       	ldd	r31, Y+2	; 0x02
    2dfe:	80 81       	ld	r24, Z
    2e00:	88 2f       	mov	r24, r24
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	81 70       	andi	r24, 0x01	; 1
    2e06:	90 70       	andi	r25, 0x00	; 0
    2e08:	88 0f       	add	r24, r24
    2e0a:	99 1f       	adc	r25, r25
    2e0c:	88 0f       	add	r24, r24
    2e0e:	99 1f       	adc	r25, r25
    2e10:	88 0f       	add	r24, r24
    2e12:	99 1f       	adc	r25, r25
    2e14:	82 2b       	or	r24, r18
    2e16:	83 2b       	or	r24, r19
    2e18:	8c 93       	st	X, r24
	/* Select Compare Match Output Mode*/
	TCCR0 = (TCCR0 & 0xCF) | ((config_ptr->compareMatchOutputMode & 0x03)<<4);
    2e1a:	a3 e5       	ldi	r26, 0x53	; 83
    2e1c:	b0 e0       	ldi	r27, 0x00	; 0
    2e1e:	e3 e5       	ldi	r30, 0x53	; 83
    2e20:	f0 e0       	ldi	r31, 0x00	; 0
    2e22:	80 81       	ld	r24, Z
    2e24:	28 2f       	mov	r18, r24
    2e26:	2f 7c       	andi	r18, 0xCF	; 207
    2e28:	e9 81       	ldd	r30, Y+1	; 0x01
    2e2a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e2c:	81 81       	ldd	r24, Z+1	; 0x01
    2e2e:	88 2f       	mov	r24, r24
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	83 70       	andi	r24, 0x03	; 3
    2e34:	90 70       	andi	r25, 0x00	; 0
    2e36:	82 95       	swap	r24
    2e38:	92 95       	swap	r25
    2e3a:	90 7f       	andi	r25, 0xF0	; 240
    2e3c:	98 27       	eor	r25, r24
    2e3e:	80 7f       	andi	r24, 0xF0	; 240
    2e40:	98 27       	eor	r25, r24
    2e42:	82 2b       	or	r24, r18
    2e44:	8c 93       	st	X, r24

	/* Select prescaler */
	TCCR0 = (TCCR0 & 0xF8) | ((config_ptr->prescaler & 0x07)<<0);
    2e46:	a3 e5       	ldi	r26, 0x53	; 83
    2e48:	b0 e0       	ldi	r27, 0x00	; 0
    2e4a:	e3 e5       	ldi	r30, 0x53	; 83
    2e4c:	f0 e0       	ldi	r31, 0x00	; 0
    2e4e:	80 81       	ld	r24, Z
    2e50:	98 2f       	mov	r25, r24
    2e52:	98 7f       	andi	r25, 0xF8	; 248
    2e54:	e9 81       	ldd	r30, Y+1	; 0x01
    2e56:	fa 81       	ldd	r31, Y+2	; 0x02
    2e58:	82 81       	ldd	r24, Z+2	; 0x02
    2e5a:	87 70       	andi	r24, 0x07	; 7
    2e5c:	89 2b       	or	r24, r25
    2e5e:	8c 93       	st	X, r24

	TCNT0 = 0;     					/*Set Timer initial value to 0*/
    2e60:	e2 e5       	ldi	r30, 0x52	; 82
    2e62:	f0 e0       	ldi	r31, 0x00	; 0
    2e64:	10 82       	st	Z, r1
	OCR0  = config_ptr->CTC_VALUE;  /*Set Compare Value*/
    2e66:	ac e5       	ldi	r26, 0x5C	; 92
    2e68:	b0 e0       	ldi	r27, 0x00	; 0
    2e6a:	e9 81       	ldd	r30, Y+1	; 0x01
    2e6c:	fa 81       	ldd	r31, Y+2	; 0x02
    2e6e:	85 81       	ldd	r24, Z+5	; 0x05
    2e70:	96 81       	ldd	r25, Z+6	; 0x06
    2e72:	8c 93       	st	X, r24
	TIMSK = (TIMSK & 0xFE) | ((config_ptr->OVERFLOW_Interrupt & 0x01)<<0); /*Enable Timer Overflow Interrupt*/
    2e74:	a9 e5       	ldi	r26, 0x59	; 89
    2e76:	b0 e0       	ldi	r27, 0x00	; 0
    2e78:	e9 e5       	ldi	r30, 0x59	; 89
    2e7a:	f0 e0       	ldi	r31, 0x00	; 0
    2e7c:	80 81       	ld	r24, Z
    2e7e:	98 2f       	mov	r25, r24
    2e80:	9e 7f       	andi	r25, 0xFE	; 254
    2e82:	e9 81       	ldd	r30, Y+1	; 0x01
    2e84:	fa 81       	ldd	r31, Y+2	; 0x02
    2e86:	84 81       	ldd	r24, Z+4	; 0x04
    2e88:	81 70       	andi	r24, 0x01	; 1
    2e8a:	89 2b       	or	r24, r25
    2e8c:	8c 93       	st	X, r24
	TIMSK = (TIMSK & 0xFD) | ((config_ptr->CTC_Interrupt & 0x01)<<1);   /*Enable Timer Compare Interrupt*/
    2e8e:	a9 e5       	ldi	r26, 0x59	; 89
    2e90:	b0 e0       	ldi	r27, 0x00	; 0
    2e92:	e9 e5       	ldi	r30, 0x59	; 89
    2e94:	f0 e0       	ldi	r31, 0x00	; 0
    2e96:	80 81       	ld	r24, Z
    2e98:	28 2f       	mov	r18, r24
    2e9a:	2d 7f       	andi	r18, 0xFD	; 253
    2e9c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e9e:	fa 81       	ldd	r31, Y+2	; 0x02
    2ea0:	83 81       	ldd	r24, Z+3	; 0x03
    2ea2:	88 2f       	mov	r24, r24
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	81 70       	andi	r24, 0x01	; 1
    2ea8:	90 70       	andi	r25, 0x00	; 0
    2eaa:	88 0f       	add	r24, r24
    2eac:	99 1f       	adc	r25, r25
    2eae:	82 2b       	or	r24, r18
    2eb0:	8c 93       	st	X, r24

}
    2eb2:	0f 90       	pop	r0
    2eb4:	0f 90       	pop	r0
    2eb6:	cf 91       	pop	r28
    2eb8:	df 91       	pop	r29
    2eba:	08 95       	ret

00002ebc <TIMER_setCallBack>:
/*
 * Description:
 * This function will call a required function to do a cretin thing when the timer finish counting.
 */
void TIMER_setCallBack(void(*a_ptr)(void))
{
    2ebc:	df 93       	push	r29
    2ebe:	cf 93       	push	r28
    2ec0:	00 d0       	rcall	.+0      	; 0x2ec2 <TIMER_setCallBack+0x6>
    2ec2:	cd b7       	in	r28, 0x3d	; 61
    2ec4:	de b7       	in	r29, 0x3e	; 62
    2ec6:	9a 83       	std	Y+2, r25	; 0x02
    2ec8:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    2eca:	89 81       	ldd	r24, Y+1	; 0x01
    2ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ece:	90 93 39 01 	sts	0x0139, r25
    2ed2:	80 93 38 01 	sts	0x0138, r24
}
    2ed6:	0f 90       	pop	r0
    2ed8:	0f 90       	pop	r0
    2eda:	cf 91       	pop	r28
    2edc:	df 91       	pop	r29
    2ede:	08 95       	ret

00002ee0 <TIMER_deinit>:
/*
 * Description:
 * Deactivate all registers in the timer
 */
void TIMER_deinit(void)
{
    2ee0:	df 93       	push	r29
    2ee2:	cf 93       	push	r28
    2ee4:	cd b7       	in	r28, 0x3d	; 61
    2ee6:	de b7       	in	r29, 0x3e	; 62
	/*************************************************************************
	  						Clear All Timer0 Registers
	 *************************************************************************/
	TCCR0 = 0;
    2ee8:	e3 e5       	ldi	r30, 0x53	; 83
    2eea:	f0 e0       	ldi	r31, 0x00	; 0
    2eec:	10 82       	st	Z, r1
	TCNT0 = 0;
    2eee:	e2 e5       	ldi	r30, 0x52	; 82
    2ef0:	f0 e0       	ldi	r31, 0x00	; 0
    2ef2:	10 82       	st	Z, r1
	OCR0 = 0;
    2ef4:	ec e5       	ldi	r30, 0x5C	; 92
    2ef6:	f0 e0       	ldi	r31, 0x00	; 0
    2ef8:	10 82       	st	Z, r1
	/* Disable interrupt for both normal and compare mode */
	TIMSK &= ~(1<< TOIE0) & (1<< OCIE0);;
    2efa:	a9 e5       	ldi	r26, 0x59	; 89
    2efc:	b0 e0       	ldi	r27, 0x00	; 0
    2efe:	e9 e5       	ldi	r30, 0x59	; 89
    2f00:	f0 e0       	ldi	r31, 0x00	; 0
    2f02:	80 81       	ld	r24, Z
    2f04:	82 70       	andi	r24, 0x02	; 2
    2f06:	8c 93       	st	X, r24

}
    2f08:	cf 91       	pop	r28
    2f0a:	df 91       	pop	r29
    2f0c:	08 95       	ret

00002f0e <__vector_9>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER0_OVF_vect)
{
    2f0e:	1f 92       	push	r1
    2f10:	0f 92       	push	r0
    2f12:	0f b6       	in	r0, 0x3f	; 63
    2f14:	0f 92       	push	r0
    2f16:	11 24       	eor	r1, r1
    2f18:	2f 93       	push	r18
    2f1a:	3f 93       	push	r19
    2f1c:	4f 93       	push	r20
    2f1e:	5f 93       	push	r21
    2f20:	6f 93       	push	r22
    2f22:	7f 93       	push	r23
    2f24:	8f 93       	push	r24
    2f26:	9f 93       	push	r25
    2f28:	af 93       	push	r26
    2f2a:	bf 93       	push	r27
    2f2c:	ef 93       	push	r30
    2f2e:	ff 93       	push	r31
    2f30:	df 93       	push	r29
    2f32:	cf 93       	push	r28
    2f34:	cd b7       	in	r28, 0x3d	; 61
    2f36:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2f38:	80 91 38 01 	lds	r24, 0x0138
    2f3c:	90 91 39 01 	lds	r25, 0x0139
    2f40:	00 97       	sbiw	r24, 0x00	; 0
    2f42:	29 f0       	breq	.+10     	; 0x2f4e <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the overflow occur in timer0 */
		(*g_callBackPtr)();
    2f44:	e0 91 38 01 	lds	r30, 0x0138
    2f48:	f0 91 39 01 	lds	r31, 0x0139
    2f4c:	09 95       	icall
	}
}
    2f4e:	cf 91       	pop	r28
    2f50:	df 91       	pop	r29
    2f52:	ff 91       	pop	r31
    2f54:	ef 91       	pop	r30
    2f56:	bf 91       	pop	r27
    2f58:	af 91       	pop	r26
    2f5a:	9f 91       	pop	r25
    2f5c:	8f 91       	pop	r24
    2f5e:	7f 91       	pop	r23
    2f60:	6f 91       	pop	r22
    2f62:	5f 91       	pop	r21
    2f64:	4f 91       	pop	r20
    2f66:	3f 91       	pop	r19
    2f68:	2f 91       	pop	r18
    2f6a:	0f 90       	pop	r0
    2f6c:	0f be       	out	0x3f, r0	; 63
    2f6e:	0f 90       	pop	r0
    2f70:	1f 90       	pop	r1
    2f72:	18 95       	reti

00002f74 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    2f74:	1f 92       	push	r1
    2f76:	0f 92       	push	r0
    2f78:	0f b6       	in	r0, 0x3f	; 63
    2f7a:	0f 92       	push	r0
    2f7c:	11 24       	eor	r1, r1
    2f7e:	2f 93       	push	r18
    2f80:	3f 93       	push	r19
    2f82:	4f 93       	push	r20
    2f84:	5f 93       	push	r21
    2f86:	6f 93       	push	r22
    2f88:	7f 93       	push	r23
    2f8a:	8f 93       	push	r24
    2f8c:	9f 93       	push	r25
    2f8e:	af 93       	push	r26
    2f90:	bf 93       	push	r27
    2f92:	ef 93       	push	r30
    2f94:	ff 93       	push	r31
    2f96:	df 93       	push	r29
    2f98:	cf 93       	push	r28
    2f9a:	cd b7       	in	r28, 0x3d	; 61
    2f9c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2f9e:	80 91 38 01 	lds	r24, 0x0138
    2fa2:	90 91 39 01 	lds	r25, 0x0139
    2fa6:	00 97       	sbiw	r24, 0x00	; 0
    2fa8:	29 f0       	breq	.+10     	; 0x2fb4 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the compare occur in timer0*/
		(*g_callBackPtr)();
    2faa:	e0 91 38 01 	lds	r30, 0x0138
    2fae:	f0 91 39 01 	lds	r31, 0x0139
    2fb2:	09 95       	icall
	}
}
    2fb4:	cf 91       	pop	r28
    2fb6:	df 91       	pop	r29
    2fb8:	ff 91       	pop	r31
    2fba:	ef 91       	pop	r30
    2fbc:	bf 91       	pop	r27
    2fbe:	af 91       	pop	r26
    2fc0:	9f 91       	pop	r25
    2fc2:	8f 91       	pop	r24
    2fc4:	7f 91       	pop	r23
    2fc6:	6f 91       	pop	r22
    2fc8:	5f 91       	pop	r21
    2fca:	4f 91       	pop	r20
    2fcc:	3f 91       	pop	r19
    2fce:	2f 91       	pop	r18
    2fd0:	0f 90       	pop	r0
    2fd2:	0f be       	out	0x3f, r0	; 63
    2fd4:	0f 90       	pop	r0
    2fd6:	1f 90       	pop	r1
    2fd8:	18 95       	reti

00002fda <UART_init>:
 * Description:
 * UART_init work with double baud rate and enable receive and transfer with 8-bits data.
 * bandRate ranged from 10bps to 256000bps
 */
void UART_init(uint32 a_bandRate, const UART_ConfigType *config_ptr)
{
    2fda:	df 93       	push	r29
    2fdc:	cf 93       	push	r28
    2fde:	cd b7       	in	r28, 0x3d	; 61
    2fe0:	de b7       	in	r29, 0x3e	; 62
    2fe2:	28 97       	sbiw	r28, 0x08	; 8
    2fe4:	0f b6       	in	r0, 0x3f	; 63
    2fe6:	f8 94       	cli
    2fe8:	de bf       	out	0x3e, r29	; 62
    2fea:	0f be       	out	0x3f, r0	; 63
    2fec:	cd bf       	out	0x3d, r28	; 61
    2fee:	6b 83       	std	Y+3, r22	; 0x03
    2ff0:	7c 83       	std	Y+4, r23	; 0x04
    2ff2:	8d 83       	std	Y+5, r24	; 0x05
    2ff4:	9e 83       	std	Y+6, r25	; 0x06
    2ff6:	58 87       	std	Y+8, r21	; 0x08
    2ff8:	4f 83       	std	Y+7, r20	; 0x07
	uint16 ubrr_value = 0;
    2ffa:	1a 82       	std	Y+2, r1	; 0x02
    2ffc:	19 82       	std	Y+1, r1	; 0x01
	 * RXC, TXC, and UDRE are flag bits that set when a certain action occur.
	 * FE, DOR, and PE are flags that set when a certain error occur.
	 * U2X configured by the developer, USART Transmission Speed.
	 * MPCM = 0;
	 */
	 UCSRA = (UCSRA & 0xFD) | (config_ptr->transmissionSpeed << 1); /* transmission Speed select */
    2ffe:	ab e2       	ldi	r26, 0x2B	; 43
    3000:	b0 e0       	ldi	r27, 0x00	; 0
    3002:	eb e2       	ldi	r30, 0x2B	; 43
    3004:	f0 e0       	ldi	r31, 0x00	; 0
    3006:	80 81       	ld	r24, Z
    3008:	28 2f       	mov	r18, r24
    300a:	2d 7f       	andi	r18, 0xFD	; 253
    300c:	ef 81       	ldd	r30, Y+7	; 0x07
    300e:	f8 85       	ldd	r31, Y+8	; 0x08
    3010:	80 81       	ld	r24, Z
    3012:	88 2f       	mov	r24, r24
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	88 0f       	add	r24, r24
    3018:	99 1f       	adc	r25, r25
    301a:	82 2b       	or	r24, r18
    301c:	8c 93       	st	X, r24
	  * RX, TXCIE, and UDRIE are interrupt enable bits. not required since the use of polling.
	  * RXEN = 1, TXEN = 1. To enable Receiver and Transmitter.
	  * RXB8 and TXB8 not required because no need for the ninth bit.
	  * UCSZ2, configured by the developer, Character Size.
	  */
	 UCSRB |= (1<< RXEN) | (1<< TXEN);
    301e:	aa e2       	ldi	r26, 0x2A	; 42
    3020:	b0 e0       	ldi	r27, 0x00	; 0
    3022:	ea e2       	ldi	r30, 0x2A	; 42
    3024:	f0 e0       	ldi	r31, 0x00	; 0
    3026:	80 81       	ld	r24, Z
    3028:	88 61       	ori	r24, 0x18	; 24
    302a:	8c 93       	st	X, r24
	 UCSRB = (UCSRB & 0xFB) | ((config_ptr->CharacterSize & 0x04>>2)<<2);/* select character size */
    302c:	aa e2       	ldi	r26, 0x2A	; 42
    302e:	b0 e0       	ldi	r27, 0x00	; 0
    3030:	ea e2       	ldi	r30, 0x2A	; 42
    3032:	f0 e0       	ldi	r31, 0x00	; 0
    3034:	80 81       	ld	r24, Z
    3036:	28 2f       	mov	r18, r24
    3038:	2b 7f       	andi	r18, 0xFB	; 251
    303a:	ef 81       	ldd	r30, Y+7	; 0x07
    303c:	f8 85       	ldd	r31, Y+8	; 0x08
    303e:	85 81       	ldd	r24, Z+5	; 0x05
    3040:	88 2f       	mov	r24, r24
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	81 70       	andi	r24, 0x01	; 1
    3046:	90 70       	andi	r25, 0x00	; 0
    3048:	88 0f       	add	r24, r24
    304a:	99 1f       	adc	r25, r25
    304c:	88 0f       	add	r24, r24
    304e:	99 1f       	adc	r25, r25
    3050:	82 2b       	or	r24, r18
    3052:	8c 93       	st	X, r24
	 UCSRB = (UCSRB & 0x7F) | (config_ptr->RXInterruptEnable<<7); /* RX Interrupt configure */
    3054:	aa e2       	ldi	r26, 0x2A	; 42
    3056:	b0 e0       	ldi	r27, 0x00	; 0
    3058:	ea e2       	ldi	r30, 0x2A	; 42
    305a:	f0 e0       	ldi	r31, 0x00	; 0
    305c:	80 81       	ld	r24, Z
    305e:	28 2f       	mov	r18, r24
    3060:	2f 77       	andi	r18, 0x7F	; 127
    3062:	ef 81       	ldd	r30, Y+7	; 0x07
    3064:	f8 85       	ldd	r31, Y+8	; 0x08
    3066:	86 81       	ldd	r24, Z+6	; 0x06
    3068:	88 2f       	mov	r24, r24
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	96 95       	lsr	r25
    306e:	98 2f       	mov	r25, r24
    3070:	88 27       	eor	r24, r24
    3072:	97 95       	ror	r25
    3074:	87 95       	ror	r24
    3076:	82 2b       	or	r24, r18
    3078:	8c 93       	st	X, r24
	 UCSRB = (UCSRB & 0xBF) | (config_ptr->TXInterruptEnable<<6); /* TX Interrupt configure */
    307a:	aa e2       	ldi	r26, 0x2A	; 42
    307c:	b0 e0       	ldi	r27, 0x00	; 0
    307e:	ea e2       	ldi	r30, 0x2A	; 42
    3080:	f0 e0       	ldi	r31, 0x00	; 0
    3082:	80 81       	ld	r24, Z
    3084:	28 2f       	mov	r18, r24
    3086:	2f 7b       	andi	r18, 0xBF	; 191
    3088:	ef 81       	ldd	r30, Y+7	; 0x07
    308a:	f8 85       	ldd	r31, Y+8	; 0x08
    308c:	87 81       	ldd	r24, Z+7	; 0x07
    308e:	88 2f       	mov	r24, r24
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	00 24       	eor	r0, r0
    3094:	96 95       	lsr	r25
    3096:	87 95       	ror	r24
    3098:	07 94       	ror	r0
    309a:	96 95       	lsr	r25
    309c:	87 95       	ror	r24
    309e:	07 94       	ror	r0
    30a0:	98 2f       	mov	r25, r24
    30a2:	80 2d       	mov	r24, r0
    30a4:	82 2b       	or	r24, r18
    30a6:	8c 93       	st	X, r24
	 * UPM0 , UPM1 , configured by the developer, Parity Mode.
	 * USBS configured by the developer,  stop bit = 1-bit
	 * UCSZ1, UCSZ0, configured by the developer, Character Size.
	 * UCPOL = 0, set when Asynchronous mode is used.D
	 */
	UCSRC |= (1<< URSEL);
    30a8:	a0 e4       	ldi	r26, 0x40	; 64
    30aa:	b0 e0       	ldi	r27, 0x00	; 0
    30ac:	e0 e4       	ldi	r30, 0x40	; 64
    30ae:	f0 e0       	ldi	r31, 0x00	; 0
    30b0:	80 81       	ld	r24, Z
    30b2:	80 68       	ori	r24, 0x80	; 128
    30b4:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xBF) | (config_ptr->mode << 6); /*  Asynchronous or  synchronous mode */
    30b6:	a0 e4       	ldi	r26, 0x40	; 64
    30b8:	b0 e0       	ldi	r27, 0x00	; 0
    30ba:	e0 e4       	ldi	r30, 0x40	; 64
    30bc:	f0 e0       	ldi	r31, 0x00	; 0
    30be:	80 81       	ld	r24, Z
    30c0:	28 2f       	mov	r18, r24
    30c2:	2f 7b       	andi	r18, 0xBF	; 191
    30c4:	ef 81       	ldd	r30, Y+7	; 0x07
    30c6:	f8 85       	ldd	r31, Y+8	; 0x08
    30c8:	81 81       	ldd	r24, Z+1	; 0x01
    30ca:	88 2f       	mov	r24, r24
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	00 24       	eor	r0, r0
    30d0:	96 95       	lsr	r25
    30d2:	87 95       	ror	r24
    30d4:	07 94       	ror	r0
    30d6:	96 95       	lsr	r25
    30d8:	87 95       	ror	r24
    30da:	07 94       	ror	r0
    30dc:	98 2f       	mov	r25, r24
    30de:	80 2d       	mov	r24, r0
    30e0:	82 2b       	or	r24, r18
    30e2:	8c 93       	st	X, r24
	/* If the developer use synchronous mode, he can configure Clock Polarity*/
	if(BIT_IS_SET(UCSRC, 6))
    30e4:	e0 e4       	ldi	r30, 0x40	; 64
    30e6:	f0 e0       	ldi	r31, 0x00	; 0
    30e8:	80 81       	ld	r24, Z
    30ea:	88 2f       	mov	r24, r24
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	80 74       	andi	r24, 0x40	; 64
    30f0:	90 70       	andi	r25, 0x00	; 0
    30f2:	00 97       	sbiw	r24, 0x00	; 0
    30f4:	61 f0       	breq	.+24     	; 0x310e <UART_init+0x134>
	{
		UCSRC = (UCSRC & 0xFE) | (config_ptr->clockPolarity << 0); /* Rising or falling edge */
    30f6:	a0 e4       	ldi	r26, 0x40	; 64
    30f8:	b0 e0       	ldi	r27, 0x00	; 0
    30fa:	e0 e4       	ldi	r30, 0x40	; 64
    30fc:	f0 e0       	ldi	r31, 0x00	; 0
    30fe:	80 81       	ld	r24, Z
    3100:	98 2f       	mov	r25, r24
    3102:	9e 7f       	andi	r25, 0xFE	; 254
    3104:	ef 81       	ldd	r30, Y+7	; 0x07
    3106:	f8 85       	ldd	r31, Y+8	; 0x08
    3108:	82 81       	ldd	r24, Z+2	; 0x02
    310a:	89 2b       	or	r24, r25
    310c:	8c 93       	st	X, r24
	}
	UCSRC = (UCSRC & 0xCF) | (config_ptr->parityMode << 4); /* Parity Mode select */
    310e:	a0 e4       	ldi	r26, 0x40	; 64
    3110:	b0 e0       	ldi	r27, 0x00	; 0
    3112:	e0 e4       	ldi	r30, 0x40	; 64
    3114:	f0 e0       	ldi	r31, 0x00	; 0
    3116:	80 81       	ld	r24, Z
    3118:	28 2f       	mov	r18, r24
    311a:	2f 7c       	andi	r18, 0xCF	; 207
    311c:	ef 81       	ldd	r30, Y+7	; 0x07
    311e:	f8 85       	ldd	r31, Y+8	; 0x08
    3120:	83 81       	ldd	r24, Z+3	; 0x03
    3122:	88 2f       	mov	r24, r24
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	82 95       	swap	r24
    3128:	92 95       	swap	r25
    312a:	90 7f       	andi	r25, 0xF0	; 240
    312c:	98 27       	eor	r25, r24
    312e:	80 7f       	andi	r24, 0xF0	; 240
    3130:	98 27       	eor	r25, r24
    3132:	82 2b       	or	r24, r18
    3134:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | (config_ptr->stopBit << 3); /* One or two parity bit */
    3136:	a0 e4       	ldi	r26, 0x40	; 64
    3138:	b0 e0       	ldi	r27, 0x00	; 0
    313a:	e0 e4       	ldi	r30, 0x40	; 64
    313c:	f0 e0       	ldi	r31, 0x00	; 0
    313e:	80 81       	ld	r24, Z
    3140:	28 2f       	mov	r18, r24
    3142:	27 7f       	andi	r18, 0xF7	; 247
    3144:	ef 81       	ldd	r30, Y+7	; 0x07
    3146:	f8 85       	ldd	r31, Y+8	; 0x08
    3148:	84 81       	ldd	r24, Z+4	; 0x04
    314a:	88 2f       	mov	r24, r24
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	88 0f       	add	r24, r24
    3150:	99 1f       	adc	r25, r25
    3152:	88 0f       	add	r24, r24
    3154:	99 1f       	adc	r25, r25
    3156:	88 0f       	add	r24, r24
    3158:	99 1f       	adc	r25, r25
    315a:	82 2b       	or	r24, r18
    315c:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | ((config_ptr->CharacterSize & 0x03)<<1); /* select character size */
    315e:	a0 e4       	ldi	r26, 0x40	; 64
    3160:	b0 e0       	ldi	r27, 0x00	; 0
    3162:	e0 e4       	ldi	r30, 0x40	; 64
    3164:	f0 e0       	ldi	r31, 0x00	; 0
    3166:	80 81       	ld	r24, Z
    3168:	28 2f       	mov	r18, r24
    316a:	29 7f       	andi	r18, 0xF9	; 249
    316c:	ef 81       	ldd	r30, Y+7	; 0x07
    316e:	f8 85       	ldd	r31, Y+8	; 0x08
    3170:	85 81       	ldd	r24, Z+5	; 0x05
    3172:	88 2f       	mov	r24, r24
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	83 70       	andi	r24, 0x03	; 3
    3178:	90 70       	andi	r25, 0x00	; 0
    317a:	88 0f       	add	r24, r24
    317c:	99 1f       	adc	r25, r25
    317e:	82 2b       	or	r24, r18
    3180:	8c 93       	st	X, r24


	 /* Calculate the UBRR register value */
	 ubrr_value = (uint16)((F_CPU/(a_bandRate * 8UL)) - 1);
    3182:	8b 81       	ldd	r24, Y+3	; 0x03
    3184:	9c 81       	ldd	r25, Y+4	; 0x04
    3186:	ad 81       	ldd	r26, Y+5	; 0x05
    3188:	be 81       	ldd	r27, Y+6	; 0x06
    318a:	88 0f       	add	r24, r24
    318c:	99 1f       	adc	r25, r25
    318e:	aa 1f       	adc	r26, r26
    3190:	bb 1f       	adc	r27, r27
    3192:	88 0f       	add	r24, r24
    3194:	99 1f       	adc	r25, r25
    3196:	aa 1f       	adc	r26, r26
    3198:	bb 1f       	adc	r27, r27
    319a:	88 0f       	add	r24, r24
    319c:	99 1f       	adc	r25, r25
    319e:	aa 1f       	adc	r26, r26
    31a0:	bb 1f       	adc	r27, r27
    31a2:	9c 01       	movw	r18, r24
    31a4:	ad 01       	movw	r20, r26
    31a6:	80 e4       	ldi	r24, 0x40	; 64
    31a8:	92 e4       	ldi	r25, 0x42	; 66
    31aa:	af e0       	ldi	r26, 0x0F	; 15
    31ac:	b0 e0       	ldi	r27, 0x00	; 0
    31ae:	bc 01       	movw	r22, r24
    31b0:	cd 01       	movw	r24, r26
    31b2:	0e 94 7f 19 	call	0x32fe	; 0x32fe <__udivmodsi4>
    31b6:	da 01       	movw	r26, r20
    31b8:	c9 01       	movw	r24, r18
    31ba:	01 97       	sbiw	r24, 0x01	; 1
    31bc:	9a 83       	std	Y+2, r25	; 0x02
    31be:	89 83       	std	Y+1, r24	; 0x01

	 /* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	 UBRRH = ubrr_value >> 8;
    31c0:	e0 e4       	ldi	r30, 0x40	; 64
    31c2:	f0 e0       	ldi	r31, 0x00	; 0
    31c4:	89 81       	ldd	r24, Y+1	; 0x01
    31c6:	9a 81       	ldd	r25, Y+2	; 0x02
    31c8:	89 2f       	mov	r24, r25
    31ca:	99 27       	eor	r25, r25
    31cc:	80 83       	st	Z, r24
	 UBRRL = ubrr_value;
    31ce:	e9 e2       	ldi	r30, 0x29	; 41
    31d0:	f0 e0       	ldi	r31, 0x00	; 0
    31d2:	89 81       	ldd	r24, Y+1	; 0x01
    31d4:	80 83       	st	Z, r24
}
    31d6:	28 96       	adiw	r28, 0x08	; 8
    31d8:	0f b6       	in	r0, 0x3f	; 63
    31da:	f8 94       	cli
    31dc:	de bf       	out	0x3e, r29	; 62
    31de:	0f be       	out	0x3f, r0	; 63
    31e0:	cd bf       	out	0x3d, r28	; 61
    31e2:	cf 91       	pop	r28
    31e4:	df 91       	pop	r29
    31e6:	08 95       	ret

000031e8 <UART_sendByte>:
 * Description:
 * wait until the UDR register is empty.
 * sent 8-bits data by put the data value in UDR register.
 */
void UART_sendByte(const uint8 data)
{
    31e8:	df 93       	push	r29
    31ea:	cf 93       	push	r28
    31ec:	0f 92       	push	r0
    31ee:	cd b7       	in	r28, 0x3d	; 61
    31f0:	de b7       	in	r29, 0x3e	; 62
    31f2:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA, UDRE)){}
    31f4:	eb e2       	ldi	r30, 0x2B	; 43
    31f6:	f0 e0       	ldi	r31, 0x00	; 0
    31f8:	80 81       	ld	r24, Z
    31fa:	88 2f       	mov	r24, r24
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	80 72       	andi	r24, 0x20	; 32
    3200:	90 70       	andi	r25, 0x00	; 0
    3202:	00 97       	sbiw	r24, 0x00	; 0
    3204:	b9 f3       	breq	.-18     	; 0x31f4 <UART_sendByte+0xc>
	UDR = data;
    3206:	ec e2       	ldi	r30, 0x2C	; 44
    3208:	f0 e0       	ldi	r31, 0x00	; 0
    320a:	89 81       	ldd	r24, Y+1	; 0x01
    320c:	80 83       	st	Z, r24
}
    320e:	0f 90       	pop	r0
    3210:	cf 91       	pop	r28
    3212:	df 91       	pop	r29
    3214:	08 95       	ret

00003216 <UART_recieveByte>:
 * Description:
 * wait until the UDR register receive all 8-bits data.
 * Return this data to be saved in another variable.
 */
uint8 UART_recieveByte(void)
{
    3216:	df 93       	push	r29
    3218:	cf 93       	push	r28
    321a:	cd b7       	in	r28, 0x3d	; 61
    321c:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA, RXC)){}
    321e:	eb e2       	ldi	r30, 0x2B	; 43
    3220:	f0 e0       	ldi	r31, 0x00	; 0
    3222:	80 81       	ld	r24, Z
    3224:	88 23       	and	r24, r24
    3226:	dc f7       	brge	.-10     	; 0x321e <UART_recieveByte+0x8>
	return UDR;
    3228:	ec e2       	ldi	r30, 0x2C	; 44
    322a:	f0 e0       	ldi	r31, 0x00	; 0
    322c:	80 81       	ld	r24, Z
}
    322e:	cf 91       	pop	r28
    3230:	df 91       	pop	r29
    3232:	08 95       	ret

00003234 <UART_sendString>:
 * Description:
 * This function take a string in a pointer.
 * Then loop on each character to send each one byte by byte.
 */
void UART_sendString(const uint8* a_str_ptr)
{
    3234:	df 93       	push	r29
    3236:	cf 93       	push	r28
    3238:	00 d0       	rcall	.+0      	; 0x323a <UART_sendString+0x6>
    323a:	0f 92       	push	r0
    323c:	cd b7       	in	r28, 0x3d	; 61
    323e:	de b7       	in	r29, 0x3e	; 62
    3240:	9b 83       	std	Y+3, r25	; 0x03
    3242:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	/* the pointer will point for each character and sent it individually until the pointer reach #*/
	for(i=0; *a_str_ptr != '\0'; i++)
    3244:	19 82       	std	Y+1, r1	; 0x01
    3246:	0d c0       	rjmp	.+26     	; 0x3262 <UART_sendString+0x2e>
	{
		UART_sendByte(*a_str_ptr);
    3248:	ea 81       	ldd	r30, Y+2	; 0x02
    324a:	fb 81       	ldd	r31, Y+3	; 0x03
    324c:	80 81       	ld	r24, Z
    324e:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <UART_sendByte>
		a_str_ptr++;
    3252:	8a 81       	ldd	r24, Y+2	; 0x02
    3254:	9b 81       	ldd	r25, Y+3	; 0x03
    3256:	01 96       	adiw	r24, 0x01	; 1
    3258:	9b 83       	std	Y+3, r25	; 0x03
    325a:	8a 83       	std	Y+2, r24	; 0x02
 */
void UART_sendString(const uint8* a_str_ptr)
{
	uint8 i;
	/* the pointer will point for each character and sent it individually until the pointer reach #*/
	for(i=0; *a_str_ptr != '\0'; i++)
    325c:	89 81       	ldd	r24, Y+1	; 0x01
    325e:	8f 5f       	subi	r24, 0xFF	; 255
    3260:	89 83       	std	Y+1, r24	; 0x01
    3262:	ea 81       	ldd	r30, Y+2	; 0x02
    3264:	fb 81       	ldd	r31, Y+3	; 0x03
    3266:	80 81       	ld	r24, Z
    3268:	88 23       	and	r24, r24
    326a:	71 f7       	brne	.-36     	; 0x3248 <UART_sendString+0x14>
	{
		UART_sendByte(*a_str_ptr);
		a_str_ptr++;
	}
}
    326c:	0f 90       	pop	r0
    326e:	0f 90       	pop	r0
    3270:	0f 90       	pop	r0
    3272:	cf 91       	pop	r28
    3274:	df 91       	pop	r29
    3276:	08 95       	ret

00003278 <UART_recieveString>:
 * This function receive first byte in a string by pointer to character.
 * Then if it is not equal #, receive the next byte in the pointer++ until the value became #.
 * At the end of this string, replace the # with NULL '0\'
 */
void UART_recieveString(uint8 *a_str_ptr)
{
    3278:	0f 93       	push	r16
    327a:	1f 93       	push	r17
    327c:	df 93       	push	r29
    327e:	cf 93       	push	r28
    3280:	00 d0       	rcall	.+0      	; 0x3282 <UART_recieveString+0xa>
    3282:	0f 92       	push	r0
    3284:	cd b7       	in	r28, 0x3d	; 61
    3286:	de b7       	in	r29, 0x3e	; 62
    3288:	9b 83       	std	Y+3, r25	; 0x03
    328a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    328c:	19 82       	std	Y+1, r1	; 0x01
	/* Receive the first byte */
	a_str_ptr[i] = UART_recieveByte();
    328e:	89 81       	ldd	r24, Y+1	; 0x01
    3290:	28 2f       	mov	r18, r24
    3292:	30 e0       	ldi	r19, 0x00	; 0
    3294:	8a 81       	ldd	r24, Y+2	; 0x02
    3296:	9b 81       	ldd	r25, Y+3	; 0x03
    3298:	8c 01       	movw	r16, r24
    329a:	02 0f       	add	r16, r18
    329c:	13 1f       	adc	r17, r19
    329e:	0e 94 0b 19 	call	0x3216	; 0x3216 <UART_recieveByte>
    32a2:	f8 01       	movw	r30, r16
    32a4:	80 83       	st	Z, r24
    32a6:	0f c0       	rjmp	.+30     	; 0x32c6 <UART_recieveString+0x4e>

	/* check on the first byte. if it is not equal # receive the next one */
	while(a_str_ptr[i] != '#')
	{
		i++;
    32a8:	89 81       	ldd	r24, Y+1	; 0x01
    32aa:	8f 5f       	subi	r24, 0xFF	; 255
    32ac:	89 83       	std	Y+1, r24	; 0x01
		a_str_ptr[i] = UART_recieveByte();
    32ae:	89 81       	ldd	r24, Y+1	; 0x01
    32b0:	28 2f       	mov	r18, r24
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	8a 81       	ldd	r24, Y+2	; 0x02
    32b6:	9b 81       	ldd	r25, Y+3	; 0x03
    32b8:	8c 01       	movw	r16, r24
    32ba:	02 0f       	add	r16, r18
    32bc:	13 1f       	adc	r17, r19
    32be:	0e 94 0b 19 	call	0x3216	; 0x3216 <UART_recieveByte>
    32c2:	f8 01       	movw	r30, r16
    32c4:	80 83       	st	Z, r24
	uint8 i = 0;
	/* Receive the first byte */
	a_str_ptr[i] = UART_recieveByte();

	/* check on the first byte. if it is not equal # receive the next one */
	while(a_str_ptr[i] != '#')
    32c6:	89 81       	ldd	r24, Y+1	; 0x01
    32c8:	28 2f       	mov	r18, r24
    32ca:	30 e0       	ldi	r19, 0x00	; 0
    32cc:	8a 81       	ldd	r24, Y+2	; 0x02
    32ce:	9b 81       	ldd	r25, Y+3	; 0x03
    32d0:	fc 01       	movw	r30, r24
    32d2:	e2 0f       	add	r30, r18
    32d4:	f3 1f       	adc	r31, r19
    32d6:	80 81       	ld	r24, Z
    32d8:	83 32       	cpi	r24, 0x23	; 35
    32da:	31 f7       	brne	.-52     	; 0x32a8 <UART_recieveString+0x30>
		i++;
		a_str_ptr[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	a_str_ptr[i] = '\0';
    32dc:	89 81       	ldd	r24, Y+1	; 0x01
    32de:	28 2f       	mov	r18, r24
    32e0:	30 e0       	ldi	r19, 0x00	; 0
    32e2:	8a 81       	ldd	r24, Y+2	; 0x02
    32e4:	9b 81       	ldd	r25, Y+3	; 0x03
    32e6:	fc 01       	movw	r30, r24
    32e8:	e2 0f       	add	r30, r18
    32ea:	f3 1f       	adc	r31, r19
    32ec:	10 82       	st	Z, r1
}
    32ee:	0f 90       	pop	r0
    32f0:	0f 90       	pop	r0
    32f2:	0f 90       	pop	r0
    32f4:	cf 91       	pop	r28
    32f6:	df 91       	pop	r29
    32f8:	1f 91       	pop	r17
    32fa:	0f 91       	pop	r16
    32fc:	08 95       	ret

000032fe <__udivmodsi4>:
    32fe:	a1 e2       	ldi	r26, 0x21	; 33
    3300:	1a 2e       	mov	r1, r26
    3302:	aa 1b       	sub	r26, r26
    3304:	bb 1b       	sub	r27, r27
    3306:	fd 01       	movw	r30, r26
    3308:	0d c0       	rjmp	.+26     	; 0x3324 <__udivmodsi4_ep>

0000330a <__udivmodsi4_loop>:
    330a:	aa 1f       	adc	r26, r26
    330c:	bb 1f       	adc	r27, r27
    330e:	ee 1f       	adc	r30, r30
    3310:	ff 1f       	adc	r31, r31
    3312:	a2 17       	cp	r26, r18
    3314:	b3 07       	cpc	r27, r19
    3316:	e4 07       	cpc	r30, r20
    3318:	f5 07       	cpc	r31, r21
    331a:	20 f0       	brcs	.+8      	; 0x3324 <__udivmodsi4_ep>
    331c:	a2 1b       	sub	r26, r18
    331e:	b3 0b       	sbc	r27, r19
    3320:	e4 0b       	sbc	r30, r20
    3322:	f5 0b       	sbc	r31, r21

00003324 <__udivmodsi4_ep>:
    3324:	66 1f       	adc	r22, r22
    3326:	77 1f       	adc	r23, r23
    3328:	88 1f       	adc	r24, r24
    332a:	99 1f       	adc	r25, r25
    332c:	1a 94       	dec	r1
    332e:	69 f7       	brne	.-38     	; 0x330a <__udivmodsi4_loop>
    3330:	60 95       	com	r22
    3332:	70 95       	com	r23
    3334:	80 95       	com	r24
    3336:	90 95       	com	r25
    3338:	9b 01       	movw	r18, r22
    333a:	ac 01       	movw	r20, r24
    333c:	bd 01       	movw	r22, r26
    333e:	cf 01       	movw	r24, r30
    3340:	08 95       	ret

00003342 <__prologue_saves__>:
    3342:	2f 92       	push	r2
    3344:	3f 92       	push	r3
    3346:	4f 92       	push	r4
    3348:	5f 92       	push	r5
    334a:	6f 92       	push	r6
    334c:	7f 92       	push	r7
    334e:	8f 92       	push	r8
    3350:	9f 92       	push	r9
    3352:	af 92       	push	r10
    3354:	bf 92       	push	r11
    3356:	cf 92       	push	r12
    3358:	df 92       	push	r13
    335a:	ef 92       	push	r14
    335c:	ff 92       	push	r15
    335e:	0f 93       	push	r16
    3360:	1f 93       	push	r17
    3362:	cf 93       	push	r28
    3364:	df 93       	push	r29
    3366:	cd b7       	in	r28, 0x3d	; 61
    3368:	de b7       	in	r29, 0x3e	; 62
    336a:	ca 1b       	sub	r28, r26
    336c:	db 0b       	sbc	r29, r27
    336e:	0f b6       	in	r0, 0x3f	; 63
    3370:	f8 94       	cli
    3372:	de bf       	out	0x3e, r29	; 62
    3374:	0f be       	out	0x3f, r0	; 63
    3376:	cd bf       	out	0x3d, r28	; 61
    3378:	09 94       	ijmp

0000337a <__epilogue_restores__>:
    337a:	2a 88       	ldd	r2, Y+18	; 0x12
    337c:	39 88       	ldd	r3, Y+17	; 0x11
    337e:	48 88       	ldd	r4, Y+16	; 0x10
    3380:	5f 84       	ldd	r5, Y+15	; 0x0f
    3382:	6e 84       	ldd	r6, Y+14	; 0x0e
    3384:	7d 84       	ldd	r7, Y+13	; 0x0d
    3386:	8c 84       	ldd	r8, Y+12	; 0x0c
    3388:	9b 84       	ldd	r9, Y+11	; 0x0b
    338a:	aa 84       	ldd	r10, Y+10	; 0x0a
    338c:	b9 84       	ldd	r11, Y+9	; 0x09
    338e:	c8 84       	ldd	r12, Y+8	; 0x08
    3390:	df 80       	ldd	r13, Y+7	; 0x07
    3392:	ee 80       	ldd	r14, Y+6	; 0x06
    3394:	fd 80       	ldd	r15, Y+5	; 0x05
    3396:	0c 81       	ldd	r16, Y+4	; 0x04
    3398:	1b 81       	ldd	r17, Y+3	; 0x03
    339a:	aa 81       	ldd	r26, Y+2	; 0x02
    339c:	b9 81       	ldd	r27, Y+1	; 0x01
    339e:	ce 0f       	add	r28, r30
    33a0:	d1 1d       	adc	r29, r1
    33a2:	0f b6       	in	r0, 0x3f	; 63
    33a4:	f8 94       	cli
    33a6:	de bf       	out	0x3e, r29	; 62
    33a8:	0f be       	out	0x3f, r0	; 63
    33aa:	cd bf       	out	0x3d, r28	; 61
    33ac:	ed 01       	movw	r28, r26
    33ae:	08 95       	ret

000033b0 <itoa>:
    33b0:	fb 01       	movw	r30, r22
    33b2:	9f 01       	movw	r18, r30
    33b4:	e8 94       	clt
    33b6:	42 30       	cpi	r20, 0x02	; 2
    33b8:	c4 f0       	brlt	.+48     	; 0x33ea <itoa+0x3a>
    33ba:	45 32       	cpi	r20, 0x25	; 37
    33bc:	b4 f4       	brge	.+44     	; 0x33ea <itoa+0x3a>
    33be:	4a 30       	cpi	r20, 0x0A	; 10
    33c0:	29 f4       	brne	.+10     	; 0x33cc <itoa+0x1c>
    33c2:	97 fb       	bst	r25, 7
    33c4:	1e f4       	brtc	.+6      	; 0x33cc <itoa+0x1c>
    33c6:	90 95       	com	r25
    33c8:	81 95       	neg	r24
    33ca:	9f 4f       	sbci	r25, 0xFF	; 255
    33cc:	64 2f       	mov	r22, r20
    33ce:	77 27       	eor	r23, r23
    33d0:	0e 94 09 1a 	call	0x3412	; 0x3412 <__udivmodhi4>
    33d4:	80 5d       	subi	r24, 0xD0	; 208
    33d6:	8a 33       	cpi	r24, 0x3A	; 58
    33d8:	0c f0       	brlt	.+2      	; 0x33dc <itoa+0x2c>
    33da:	89 5d       	subi	r24, 0xD9	; 217
    33dc:	81 93       	st	Z+, r24
    33de:	cb 01       	movw	r24, r22
    33e0:	00 97       	sbiw	r24, 0x00	; 0
    33e2:	a1 f7       	brne	.-24     	; 0x33cc <itoa+0x1c>
    33e4:	16 f4       	brtc	.+4      	; 0x33ea <itoa+0x3a>
    33e6:	5d e2       	ldi	r21, 0x2D	; 45
    33e8:	51 93       	st	Z+, r21
    33ea:	10 82       	st	Z, r1
    33ec:	c9 01       	movw	r24, r18
    33ee:	0c 94 f9 19 	jmp	0x33f2	; 0x33f2 <strrev>

000033f2 <strrev>:
    33f2:	dc 01       	movw	r26, r24
    33f4:	fc 01       	movw	r30, r24
    33f6:	67 2f       	mov	r22, r23
    33f8:	71 91       	ld	r23, Z+
    33fa:	77 23       	and	r23, r23
    33fc:	e1 f7       	brne	.-8      	; 0x33f6 <strrev+0x4>
    33fe:	32 97       	sbiw	r30, 0x02	; 2
    3400:	04 c0       	rjmp	.+8      	; 0x340a <strrev+0x18>
    3402:	7c 91       	ld	r23, X
    3404:	6d 93       	st	X+, r22
    3406:	70 83       	st	Z, r23
    3408:	62 91       	ld	r22, -Z
    340a:	ae 17       	cp	r26, r30
    340c:	bf 07       	cpc	r27, r31
    340e:	c8 f3       	brcs	.-14     	; 0x3402 <strrev+0x10>
    3410:	08 95       	ret

00003412 <__udivmodhi4>:
    3412:	aa 1b       	sub	r26, r26
    3414:	bb 1b       	sub	r27, r27
    3416:	51 e1       	ldi	r21, 0x11	; 17
    3418:	07 c0       	rjmp	.+14     	; 0x3428 <__udivmodhi4_ep>

0000341a <__udivmodhi4_loop>:
    341a:	aa 1f       	adc	r26, r26
    341c:	bb 1f       	adc	r27, r27
    341e:	a6 17       	cp	r26, r22
    3420:	b7 07       	cpc	r27, r23
    3422:	10 f0       	brcs	.+4      	; 0x3428 <__udivmodhi4_ep>
    3424:	a6 1b       	sub	r26, r22
    3426:	b7 0b       	sbc	r27, r23

00003428 <__udivmodhi4_ep>:
    3428:	88 1f       	adc	r24, r24
    342a:	99 1f       	adc	r25, r25
    342c:	5a 95       	dec	r21
    342e:	a9 f7       	brne	.-22     	; 0x341a <__udivmodhi4_loop>
    3430:	80 95       	com	r24
    3432:	90 95       	com	r25
    3434:	bc 01       	movw	r22, r24
    3436:	cd 01       	movw	r24, r26
    3438:	08 95       	ret

0000343a <_exit>:
    343a:	f8 94       	cli

0000343c <__stop_program>:
    343c:	ff cf       	rjmp	.-2      	; 0x343c <__stop_program>
