
Final_Project_MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002486  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000116  00800060  00002486  0000251a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800176  00800176  00002630  2**0
                  ALLOC
  3 .stab         00002778  00000000  00000000  00002630  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018be  00000000  00000000  00004da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00006666  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  000067e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  000069b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  000089c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  00009b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000ab2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000accc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000af8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b898  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 f0 0f 	jmp	0x1fe0	; 0x1fe0 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 37       	cpi	r26, 0x7C	; 124
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c7 06 	call	0xd8e	; 0xd8e <main>
      8a:	0c 94 41 12 	jmp	0x2482	; 0x2482 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0a 12 	jmp	0x2414	; 0x2414 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 26 12 	jmp	0x244c	; 0x244c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 16 12 	jmp	0x242c	; 0x242c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 32 12 	jmp	0x2464	; 0x2464 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 16 12 	jmp	0x242c	; 0x242c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 32 12 	jmp	0x2464	; 0x2464 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0a 12 	jmp	0x2414	; 0x2414 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 26 12 	jmp	0x244c	; 0x244c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 16 12 	jmp	0x242c	; 0x242c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 32 12 	jmp	0x2464	; 0x2464 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 16 12 	jmp	0x242c	; 0x242c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 32 12 	jmp	0x2464	; 0x2464 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 16 12 	jmp	0x242c	; 0x242c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 32 12 	jmp	0x2464	; 0x2464 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 13 12 	jmp	0x2426	; 0x2426 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 2f 12 	jmp	0x245e	; 0x245e <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 1a 12 	jmp	0x2434	; 0x2434 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__fixsfsi+0x80>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__fixsfsi+0x80>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__fixsfsi+0x8a>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__fixsfsi+0x94>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__fixsfsi+0x80>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__fixsfsi+0x8a>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__fixsfsi+0x94>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__fixsfsi+0x68>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__fixsfsi+0x60>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__fixsfsi+0x9c>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__fixsfsi+0x9c>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__fixsfsi+0x9c>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__fixsfsi+0x9c>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 36 12 	jmp	0x246c	; 0x246c <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e8 59       	subi	r30, 0x98	; 152
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <BUZZER_init>:
/*
 * Description:
 * Activate the Buzzer pin as output bin.
 */
void BUZZER_init(void)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT); /* Activate buzzer pin */
     ca8:	82 e0       	ldi	r24, 0x02	; 2
     caa:	67 e0       	ldi	r22, 0x07	; 7
     cac:	41 e0       	ldi	r20, 0x01	; 1
     cae:	0e 94 c1 0a 	call	0x1582	; 0x1582 <GPIO_setupPinDirection>
}
     cb2:	cf 91       	pop	r28
     cb4:	df 91       	pop	r29
     cb6:	08 95       	ret

00000cb8 <BUZZER_on>:
/*
 * Description:
 * Make the buzzer produce sound.
 */
void BUZZER_on(void)
{
     cb8:	df 93       	push	r29
     cba:	cf 93       	push	r28
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH); /* buzzer is on when the output is logically high */
     cc0:	82 e0       	ldi	r24, 0x02	; 2
     cc2:	67 e0       	ldi	r22, 0x07	; 7
     cc4:	41 e0       	ldi	r20, 0x01	; 1
     cc6:	0e 94 ac 0b 	call	0x1758	; 0x1758 <GPIO_writePin>
}
     cca:	cf 91       	pop	r28
     ccc:	df 91       	pop	r29
     cce:	08 95       	ret

00000cd0 <BUZZER_off>:
/*
 * Description:
 * Mute the buzzer.
 */
void BUZZER_off(void)
{
     cd0:	df 93       	push	r29
     cd2:	cf 93       	push	r28
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW); /* buzzer is off when the output is logically low */
     cd8:	82 e0       	ldi	r24, 0x02	; 2
     cda:	67 e0       	ldi	r22, 0x07	; 7
     cdc:	40 e0       	ldi	r20, 0x00	; 0
     cde:	0e 94 ac 0b 	call	0x1758	; 0x1758 <GPIO_writePin>
}
     ce2:	cf 91       	pop	r28
     ce4:	df 91       	pop	r29
     ce6:	08 95       	ret

00000ce8 <DCMotor_init>:
 * Description:
 * The Function responsible for setup the direction for the two motor pins through the GPIO driver.
 * Stop at the DC-Motor at the beginning through the GPIO driver.
 */
void DCMotor_init(void)
{
     ce8:	df 93       	push	r29
     cea:	cf 93       	push	r28
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
	/* Select the pins that the motor are connected with */
	GPIO_setupPinDirection(DC_PORT_ID, DC_PINA_ID, PIN_OUTPUT);
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	41 e0       	ldi	r20, 0x01	; 1
     cf6:	0e 94 c1 0a 	call	0x1582	; 0x1582 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_PORT_ID, DC_PINB_ID, PIN_OUTPUT);
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	61 e0       	ldi	r22, 0x01	; 1
     cfe:	41 e0       	ldi	r20, 0x01	; 1
     d00:	0e 94 c1 0a 	call	0x1582	; 0x1582 <GPIO_setupPinDirection>

	/* Initial condition to stop the motor */
	GPIO_writePin(DC_PORT_ID, DC_PINA_ID, LOGIC_LOW);
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	60 e0       	ldi	r22, 0x00	; 0
     d08:	40 e0       	ldi	r20, 0x00	; 0
     d0a:	0e 94 ac 0b 	call	0x1758	; 0x1758 <GPIO_writePin>
	GPIO_writePin(DC_PORT_ID, DC_PINB_ID, LOGIC_LOW);
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	61 e0       	ldi	r22, 0x01	; 1
     d12:	40 e0       	ldi	r20, 0x00	; 0
     d14:	0e 94 ac 0b 	call	0x1758	; 0x1758 <GPIO_writePin>
}
     d18:	cf 91       	pop	r28
     d1a:	df 91       	pop	r29
     d1c:	08 95       	ret

00000d1e <DCMotor_rotate>:
 * Description:
 * The function responsible for rotate the DC Motor CW/ or A-CW or stop the motor based on the state input state value.
 *  Send the required duty cycle to the PWM driver based on the required speed value.
 */
void DCMotor_rotate(DcMotor_State state,uint8 speed)
{
     d1e:	df 93       	push	r29
     d20:	cf 93       	push	r28
     d22:	00 d0       	rcall	.+0      	; 0xd24 <DCMotor_rotate+0x6>
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	89 83       	std	Y+1, r24	; 0x01
     d2a:	6a 83       	std	Y+2, r22	; 0x02

	PWM_Timer2_init(speed); /* Adjust PWM according to the speed percentage the user want */
     d2c:	8a 81       	ldd	r24, Y+2	; 0x02
     d2e:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <PWM_Timer2_init>

	/* State of the motor */
	if(state == STOP)
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	88 23       	and	r24, r24
     d36:	59 f4       	brne	.+22     	; 0xd4e <DCMotor_rotate+0x30>
	{
		GPIO_writePin(DC_PORT_ID, DC_PINA_ID, LOGIC_LOW);
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	60 e0       	ldi	r22, 0x00	; 0
     d3c:	40 e0       	ldi	r20, 0x00	; 0
     d3e:	0e 94 ac 0b 	call	0x1758	; 0x1758 <GPIO_writePin>
		GPIO_writePin(DC_PORT_ID, DC_PINB_ID, LOGIC_LOW);
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	61 e0       	ldi	r22, 0x01	; 1
     d46:	40 e0       	ldi	r20, 0x00	; 0
     d48:	0e 94 ac 0b 	call	0x1758	; 0x1758 <GPIO_writePin>
     d4c:	1b c0       	rjmp	.+54     	; 0xd84 <DCMotor_rotate+0x66>
	}
	else if(state == CW)
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	81 30       	cpi	r24, 0x01	; 1
     d52:	59 f4       	brne	.+22     	; 0xd6a <DCMotor_rotate+0x4c>
	{
		GPIO_writePin(DC_PORT_ID, DC_PINA_ID, LOGIC_HIGH);
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	60 e0       	ldi	r22, 0x00	; 0
     d58:	41 e0       	ldi	r20, 0x01	; 1
     d5a:	0e 94 ac 0b 	call	0x1758	; 0x1758 <GPIO_writePin>
		GPIO_writePin(DC_PORT_ID, DC_PINB_ID, LOGIC_LOW);
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	61 e0       	ldi	r22, 0x01	; 1
     d62:	40 e0       	ldi	r20, 0x00	; 0
     d64:	0e 94 ac 0b 	call	0x1758	; 0x1758 <GPIO_writePin>
     d68:	0d c0       	rjmp	.+26     	; 0xd84 <DCMotor_rotate+0x66>
	}
	else if(state == CCW)
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	82 30       	cpi	r24, 0x02	; 2
     d6e:	51 f4       	brne	.+20     	; 0xd84 <DCMotor_rotate+0x66>
	{
		GPIO_writePin(DC_PORT_ID, DC_PINA_ID, LOGIC_LOW);
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	60 e0       	ldi	r22, 0x00	; 0
     d74:	40 e0       	ldi	r20, 0x00	; 0
     d76:	0e 94 ac 0b 	call	0x1758	; 0x1758 <GPIO_writePin>
		GPIO_writePin(DC_PORT_ID, DC_PINB_ID, LOGIC_HIGH);
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	61 e0       	ldi	r22, 0x01	; 1
     d7e:	41 e0       	ldi	r20, 0x01	; 1
     d80:	0e 94 ac 0b 	call	0x1758	; 0x1758 <GPIO_writePin>
	}
}
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	cf 91       	pop	r28
     d8a:	df 91       	pop	r29
     d8c:	08 95       	ret

00000d8e <main>:

/*******************************************************************************
 *                    	     	   Main Application                            *
 *******************************************************************************/
int main(void)
{
     d8e:	df 93       	push	r29
     d90:	cf 93       	push	r28
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
     d96:	ec 97       	sbiw	r28, 0x3c	; 60
     d98:	0f b6       	in	r0, 0x3f	; 63
     d9a:	f8 94       	cli
     d9c:	de bf       	out	0x3e, r29	; 62
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	cd bf       	out	0x3d, r28	; 61
	uint8 passwordReceived[PASSWORD_SIZE];  			/* Receive password valued from MC1 in this array. */
	uint8 passwordSaved[PASSWORD_SIZE];					/* Extract the password values that saved in EEPROM and save it in  this array for another uses. */
	uint8 passwordReceiveData[PASSWORD_SIZE];			/* To receive the password that the user entered to open the door to compare it with the password saved in EEPROM. */

	uint8 motorStatus = FALSE;							/* To open the door or not. */
     da2:	18 8a       	std	Y+16, r1	; 0x10
	uint8 receivedPasswordStatus = FALSE;				/* To know if the received password is correct or not. */
     da4:	1f 86       	std	Y+15, r1	; 0x0f

	/*********************************************
	 *				Drivers initiation 			 *
	 *********************************************/
	/* Enable Global Interrupt I-Bit. */
	SREG |= (1<<7);
     da6:	af e5       	ldi	r26, 0x5F	; 95
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	ef e5       	ldi	r30, 0x5F	; 95
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	80 68       	ori	r24, 0x80	; 128
     db2:	8c 93       	st	X, r24

	/* Activate Buzzer */
	BUZZER_init();
     db4:	0e 94 50 06 	call	0xca0	; 0xca0 <BUZZER_init>

	/* Activate DC-Motor */
	DCMotor_init();
     db8:	0e 94 74 06 	call	0xce8	; 0xce8 <DCMotor_init>

	/* Initiate timer0 configuration. */
	TIMER0_ConfigType TIMER0_config = {TIMER_OVERFLOW_MODE, OC0_DISCONNECTED, F_CPU_1024, DISABLE_CTC_INTERRUPT, ENABLE_OVF_INTERRUPT};
     dbc:	87 e0       	ldi	r24, 0x07	; 7
     dbe:	fe 01       	movw	r30, r28
     dc0:	7d 96       	adiw	r30, 0x1d	; 29
     dc2:	df 01       	movw	r26, r30
     dc4:	28 2f       	mov	r18, r24
     dc6:	1d 92       	st	X+, r1
     dc8:	2a 95       	dec	r18
     dca:	e9 f7       	brne	.-6      	; 0xdc6 <main+0x38>
     dcc:	85 e0       	ldi	r24, 0x05	; 5
     dce:	8f 8f       	std	Y+31, r24	; 0x1f
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	89 a3       	std	Y+33, r24	; 0x21

	/* Activate I2C with fast mode (baud rate = 400000 bps). */
	I2C_ConfigType U2C_config = {F_SCL_1, FAST_MODE}; /* I2C registers configuration. */
     dd4:	ce 01       	movw	r24, r28
     dd6:	84 96       	adiw	r24, 0x24	; 36
     dd8:	9c ab       	std	Y+52, r25	; 0x34
     dda:	8b ab       	std	Y+51, r24	; 0x33
     ddc:	a0 e7       	ldi	r26, 0x70	; 112
     dde:	b1 e0       	ldi	r27, 0x01	; 1
     de0:	be ab       	std	Y+54, r27	; 0x36
     de2:	ad ab       	std	Y+53, r26	; 0x35
     de4:	b5 e0       	ldi	r27, 0x05	; 5
     de6:	bf ab       	std	Y+55, r27	; 0x37
     de8:	ed a9       	ldd	r30, Y+53	; 0x35
     dea:	fe a9       	ldd	r31, Y+54	; 0x36
     dec:	00 80       	ld	r0, Z
     dee:	2d a9       	ldd	r18, Y+53	; 0x35
     df0:	3e a9       	ldd	r19, Y+54	; 0x36
     df2:	2f 5f       	subi	r18, 0xFF	; 255
     df4:	3f 4f       	sbci	r19, 0xFF	; 255
     df6:	3e ab       	std	Y+54, r19	; 0x36
     df8:	2d ab       	std	Y+53, r18	; 0x35
     dfa:	ab a9       	ldd	r26, Y+51	; 0x33
     dfc:	bc a9       	ldd	r27, Y+52	; 0x34
     dfe:	0c 92       	st	X, r0
     e00:	eb a9       	ldd	r30, Y+51	; 0x33
     e02:	fc a9       	ldd	r31, Y+52	; 0x34
     e04:	31 96       	adiw	r30, 0x01	; 1
     e06:	fc ab       	std	Y+52, r31	; 0x34
     e08:	eb ab       	std	Y+51, r30	; 0x33
     e0a:	ff a9       	ldd	r31, Y+55	; 0x37
     e0c:	f1 50       	subi	r31, 0x01	; 1
     e0e:	ff ab       	std	Y+55, r31	; 0x37
     e10:	2f a9       	ldd	r18, Y+55	; 0x37
     e12:	22 23       	and	r18, r18
     e14:	49 f7       	brne	.-46     	; 0xde8 <main+0x5a>
	I2C_init(&U2C_config);
     e16:	ce 01       	movw	r24, r28
     e18:	84 96       	adiw	r24, 0x24	; 36
     e1a:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <I2C_init>

	/* Activate UART with double speed and eight_bit character size. the baud rate = 9600 bps (using interrupt when receiving a bit). */
	UART_ConfigType UART_config = {DOUBLE_SPEED, ASYNCHRONOUS, RISING, PARITY_DISABLED, ONE_STOP_BIT, EIGHT_BIT, RX_INTERRUPT_DISABLE, TX_INTERRUPT_DISABLE}; /* UART registers configuration */
     e1e:	ce 01       	movw	r24, r28
     e20:	89 96       	adiw	r24, 0x29	; 41
     e22:	99 af       	std	Y+57, r25	; 0x39
     e24:	88 af       	std	Y+56, r24	; 0x38
     e26:	a8 e6       	ldi	r26, 0x68	; 104
     e28:	b1 e0       	ldi	r27, 0x01	; 1
     e2a:	bb af       	std	Y+59, r27	; 0x3b
     e2c:	aa af       	std	Y+58, r26	; 0x3a
     e2e:	b8 e0       	ldi	r27, 0x08	; 8
     e30:	bc af       	std	Y+60, r27	; 0x3c
     e32:	ea ad       	ldd	r30, Y+58	; 0x3a
     e34:	fb ad       	ldd	r31, Y+59	; 0x3b
     e36:	00 80       	ld	r0, Z
     e38:	2a ad       	ldd	r18, Y+58	; 0x3a
     e3a:	3b ad       	ldd	r19, Y+59	; 0x3b
     e3c:	2f 5f       	subi	r18, 0xFF	; 255
     e3e:	3f 4f       	sbci	r19, 0xFF	; 255
     e40:	3b af       	std	Y+59, r19	; 0x3b
     e42:	2a af       	std	Y+58, r18	; 0x3a
     e44:	a8 ad       	ldd	r26, Y+56	; 0x38
     e46:	b9 ad       	ldd	r27, Y+57	; 0x39
     e48:	0c 92       	st	X, r0
     e4a:	e8 ad       	ldd	r30, Y+56	; 0x38
     e4c:	f9 ad       	ldd	r31, Y+57	; 0x39
     e4e:	31 96       	adiw	r30, 0x01	; 1
     e50:	f9 af       	std	Y+57, r31	; 0x39
     e52:	e8 af       	std	Y+56, r30	; 0x38
     e54:	fc ad       	ldd	r31, Y+60	; 0x3c
     e56:	f1 50       	subi	r31, 0x01	; 1
     e58:	fc af       	std	Y+60, r31	; 0x3c
     e5a:	2c ad       	ldd	r18, Y+60	; 0x3c
     e5c:	22 23       	and	r18, r18
     e5e:	49 f7       	brne	.-46     	; 0xe32 <main+0xa4>
	UART_init(BAUD, &UART_config);
     e60:	9e 01       	movw	r18, r28
     e62:	27 5d       	subi	r18, 0xD7	; 215
     e64:	3f 4f       	sbci	r19, 0xFF	; 255
     e66:	60 e8       	ldi	r22, 0x80	; 128
     e68:	75 e2       	ldi	r23, 0x25	; 37
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	a9 01       	movw	r20, r18
     e70:	0e 94 56 10 	call	0x20ac	; 0x20ac <UART_init>
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	aa ef       	ldi	r26, 0xFA	; 250
     e7a:	b3 e4       	ldi	r27, 0x43	; 67
     e7c:	8b 87       	std	Y+11, r24	; 0x0b
     e7e:	9c 87       	std	Y+12, r25	; 0x0c
     e80:	ad 87       	std	Y+13, r26	; 0x0d
     e82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e84:	6b 85       	ldd	r22, Y+11	; 0x0b
     e86:	7c 85       	ldd	r23, Y+12	; 0x0c
     e88:	8d 85       	ldd	r24, Y+13	; 0x0d
     e8a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	4a ef       	ldi	r20, 0xFA	; 250
     e92:	54 e4       	ldi	r21, 0x44	; 68
     e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e98:	dc 01       	movw	r26, r24
     e9a:	cb 01       	movw	r24, r22
     e9c:	8f 83       	std	Y+7, r24	; 0x07
     e9e:	98 87       	std	Y+8, r25	; 0x08
     ea0:	a9 87       	std	Y+9, r26	; 0x09
     ea2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ea4:	6f 81       	ldd	r22, Y+7	; 0x07
     ea6:	78 85       	ldd	r23, Y+8	; 0x08
     ea8:	89 85       	ldd	r24, Y+9	; 0x09
     eaa:	9a 85       	ldd	r25, Y+10	; 0x0a
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	40 e8       	ldi	r20, 0x80	; 128
     eb2:	5f e3       	ldi	r21, 0x3F	; 63
     eb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eb8:	88 23       	and	r24, r24
     eba:	2c f4       	brge	.+10     	; 0xec6 <main+0x138>
		__ticks = 1;
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	9e 83       	std	Y+6, r25	; 0x06
     ec2:	8d 83       	std	Y+5, r24	; 0x05
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <main+0x1b6>
	else if (__tmp > 65535)
     ec6:	6f 81       	ldd	r22, Y+7	; 0x07
     ec8:	78 85       	ldd	r23, Y+8	; 0x08
     eca:	89 85       	ldd	r24, Y+9	; 0x09
     ecc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	3f ef       	ldi	r19, 0xFF	; 255
     ed2:	4f e7       	ldi	r20, 0x7F	; 127
     ed4:	57 e4       	ldi	r21, 0x47	; 71
     ed6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eda:	18 16       	cp	r1, r24
     edc:	4c f5       	brge	.+82     	; 0xf30 <main+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ede:	6b 85       	ldd	r22, Y+11	; 0x0b
     ee0:	7c 85       	ldd	r23, Y+12	; 0x0c
     ee2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ee4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	40 e2       	ldi	r20, 0x20	; 32
     eec:	51 e4       	ldi	r21, 0x41	; 65
     eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef2:	dc 01       	movw	r26, r24
     ef4:	cb 01       	movw	r24, r22
     ef6:	bc 01       	movw	r22, r24
     ef8:	cd 01       	movw	r24, r26
     efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	9e 83       	std	Y+6, r25	; 0x06
     f04:	8d 83       	std	Y+5, r24	; 0x05
     f06:	0f c0       	rjmp	.+30     	; 0xf26 <main+0x198>
     f08:	88 ec       	ldi	r24, 0xC8	; 200
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	9c 83       	std	Y+4, r25	; 0x04
     f0e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	9c 81       	ldd	r25, Y+4	; 0x04
     f14:	01 97       	sbiw	r24, 0x01	; 1
     f16:	f1 f7       	brne	.-4      	; 0xf14 <main+0x186>
     f18:	9c 83       	std	Y+4, r25	; 0x04
     f1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f1c:	8d 81       	ldd	r24, Y+5	; 0x05
     f1e:	9e 81       	ldd	r25, Y+6	; 0x06
     f20:	01 97       	sbiw	r24, 0x01	; 1
     f22:	9e 83       	std	Y+6, r25	; 0x06
     f24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f26:	8d 81       	ldd	r24, Y+5	; 0x05
     f28:	9e 81       	ldd	r25, Y+6	; 0x06
     f2a:	00 97       	sbiw	r24, 0x00	; 0
     f2c:	69 f7       	brne	.-38     	; 0xf08 <main+0x17a>
     f2e:	14 c0       	rjmp	.+40     	; 0xf58 <main+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f30:	6f 81       	ldd	r22, Y+7	; 0x07
     f32:	78 85       	ldd	r23, Y+8	; 0x08
     f34:	89 85       	ldd	r24, Y+9	; 0x09
     f36:	9a 85       	ldd	r25, Y+10	; 0x0a
     f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	9e 83       	std	Y+6, r25	; 0x06
     f42:	8d 83       	std	Y+5, r24	; 0x05
     f44:	8d 81       	ldd	r24, Y+5	; 0x05
     f46:	9e 81       	ldd	r25, Y+6	; 0x06
     f48:	9a 83       	std	Y+2, r25	; 0x02
     f4a:	89 83       	std	Y+1, r24	; 0x01
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	9a 81       	ldd	r25, Y+2	; 0x02
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	f1 f7       	brne	.-4      	; 0xf50 <main+0x1c2>
     f54:	9a 83       	std	Y+2, r25	; 0x02
     f56:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		/*
		 * This Switch used to switch between commands that received from MC1
		 */
		switch (UART_recieveByte())
     f58:	0e 94 74 11 	call	0x22e8	; 0x22e8 <UART_recieveByte>
     f5c:	a8 2f       	mov	r26, r24
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	ba ab       	std	Y+50, r27	; 0x32
     f62:	a9 ab       	std	Y+49, r26	; 0x31
     f64:	e9 a9       	ldd	r30, Y+49	; 0x31
     f66:	fa a9       	ldd	r31, Y+50	; 0x32
     f68:	e2 3f       	cpi	r30, 0xF2	; 242
     f6a:	f1 05       	cpc	r31, r1
     f6c:	b9 f0       	breq	.+46     	; 0xf9c <main+0x20e>
     f6e:	29 a9       	ldd	r18, Y+49	; 0x31
     f70:	3a a9       	ldd	r19, Y+50	; 0x32
     f72:	25 3f       	cpi	r18, 0xF5	; 245
     f74:	31 05       	cpc	r19, r1
     f76:	09 f4       	brne	.+2      	; 0xf7a <main+0x1ec>
     f78:	88 c0       	rjmp	.+272    	; 0x108a <main+0x2fc>
     f7a:	89 a9       	ldd	r24, Y+49	; 0x31
     f7c:	9a a9       	ldd	r25, Y+50	; 0x32
     f7e:	81 3f       	cpi	r24, 0xF1	; 241
     f80:	91 05       	cpc	r25, r1
     f82:	51 f7       	brne	.-44     	; 0xf58 <main+0x1ca>
		{
		/* Case 1: Set first password	*/
		case FIRST_PASSWORD:
			/* Receive the new password and save it in memory */
			PASSWORD_receiveSaveMemory(EEPROM_Password_first_ADDRESS, passwordReceived, passwordSaved);
     f84:	9e 01       	movw	r18, r28
     f86:	2f 5e       	subi	r18, 0xEF	; 239
     f88:	3f 4f       	sbci	r19, 0xFF	; 255
     f8a:	ae 01       	movw	r20, r28
     f8c:	4b 5e       	subi	r20, 0xEB	; 235
     f8e:	5f 4f       	sbci	r21, 0xFF	; 255
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	93 e0       	ldi	r25, 0x03	; 3
     f94:	b9 01       	movw	r22, r18
     f96:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <PASSWORD_receiveSaveMemory>
     f9a:	de cf       	rjmp	.-68     	; 0xf58 <main+0x1ca>
			break;

		/* Case 2: Opening door	*/
		case OPEN_DOOR:

			PASSWORD_receiveData(passwordReceiveData);										/* Receive the password from MC2. */
     f9c:	ce 01       	movw	r24, r28
     f9e:	49 96       	adiw	r24, 0x19	; 25
     fa0:	0e 94 8c 08 	call	0x1118	; 0x1118 <PASSWORD_receiveData>
			motorStatus = PASSWORD_compareFromMemory(passwordReceiveData, passwordSaved);	/* Check if the password is correct of not. */
     fa4:	ce 01       	movw	r24, r28
     fa6:	49 96       	adiw	r24, 0x19	; 25
     fa8:	9e 01       	movw	r18, r28
     faa:	2b 5e       	subi	r18, 0xEB	; 235
     fac:	3f 4f       	sbci	r19, 0xFF	; 255
     fae:	b9 01       	movw	r22, r18
     fb0:	0e 94 b3 08 	call	0x1166	; 0x1166 <PASSWORD_compareFromMemory>
     fb4:	88 8b       	std	Y+16, r24	; 0x10

			/* If the password is correct, activate the motor to open and close the door. */
			if(motorStatus == TRUE)
     fb6:	88 89       	ldd	r24, Y+16	; 0x10
     fb8:	81 30       	cpi	r24, 0x01	; 1
     fba:	09 f0       	breq	.+2      	; 0xfbe <main+0x230>
     fbc:	40 c0       	rjmp	.+128    	; 0x103e <main+0x2b0>
			{
				g_buzzerAccumulator = 0;					/* Make the buzzer counter count from 0 again to count three times after each time the password is correct. */
     fbe:	10 92 79 01 	sts	0x0179, r1

				UART_sendByte(OPEN_DOOR_SUCCESS);			/* Send to MC1 that the door is opening. so, display on screen this information. */
     fc2:	83 ef       	ldi	r24, 0xF3	; 243
     fc4:	0e 94 5d 11 	call	0x22ba	; 0x22ba <UART_sendByte>

				DCMotor_rotate(CW, MOTOR_SPEED);			/* Start to rotate the motor clock wise with required speed percentage. */
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	6b e4       	ldi	r22, 0x4B	; 75
     fcc:	0e 94 8f 06 	call	0xd1e	; 0xd1e <DCMotor_rotate>
				TIMER_setCallBack(TIMER0_delayOpenClose);	/* This function will call TIMER0_delayHold() function when timer0 finish counting. When this function is called the Timer0 will deactivated. */
     fd0:	8f eb       	ldi	r24, 0xBF	; 191
     fd2:	99 e0       	ldi	r25, 0x09	; 9
     fd4:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <TIMER_setCallBack>
				TIMER_init(&TIMER0_config);					/* Activate timer0 to count 15 seconds. */
     fd8:	ce 01       	movw	r24, r28
     fda:	4d 96       	adiw	r24, 0x1d	; 29
     fdc:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <TIMER_init>
				while(g_timerFlag != 1){}					/* Wait until the timer finish to continue in the code. */
     fe0:	80 91 78 01 	lds	r24, 0x0178
     fe4:	81 30       	cpi	r24, 0x01	; 1
     fe6:	e1 f7       	brne	.-8      	; 0xfe0 <main+0x252>
				g_timerFlag = 0;							/* Always after the timer flag become become on, the developer must make it zero again for another use. */
     fe8:	10 92 78 01 	sts	0x0178, r1

				DCMotor_rotate(STOP, MOTOR_SPEED);			/* Stop the motor. */
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	6b e4       	ldi	r22, 0x4B	; 75
     ff0:	0e 94 8f 06 	call	0xd1e	; 0xd1e <DCMotor_rotate>
				TIMER_setCallBack(TIMER0_delayHold);		/* This function will call TIMER0_delayHold() function when timer0 finish counting. When this function is called the Timer0 will deactivated. */
     ff4:	8f ed       	ldi	r24, 0xDF	; 223
     ff6:	99 e0       	ldi	r25, 0x09	; 9
     ff8:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <TIMER_setCallBack>
				TIMER_init(&TIMER0_config);					/* Activate timer0 to count 3 seconds. */
     ffc:	ce 01       	movw	r24, r28
     ffe:	4d 96       	adiw	r24, 0x1d	; 29
    1000:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <TIMER_init>
				while(g_timerFlag != 1){}					/* Wait until the timer finish to continue in the code. */
    1004:	80 91 78 01 	lds	r24, 0x0178
    1008:	81 30       	cpi	r24, 0x01	; 1
    100a:	e1 f7       	brne	.-8      	; 0x1004 <main+0x276>
				g_timerFlag = 0;							/* Always after the timer flag become become on, the developer must make it zero again for another use. */
    100c:	10 92 78 01 	sts	0x0178, r1

				DCMotor_rotate(CCW, MOTOR_SPEED);			/* Start to rotate the motor Anti-clock wise with required speed percentage. */
    1010:	82 e0       	ldi	r24, 0x02	; 2
    1012:	6b e4       	ldi	r22, 0x4B	; 75
    1014:	0e 94 8f 06 	call	0xd1e	; 0xd1e <DCMotor_rotate>
				TIMER_setCallBack(TIMER0_delayOpenClose);	/* This function will call TIMER0_delayOpenClose() function when timer0 finish counting. When this function is called the Timer0 will deactivated. */
    1018:	8f eb       	ldi	r24, 0xBF	; 191
    101a:	99 e0       	ldi	r25, 0x09	; 9
    101c:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <TIMER_setCallBack>
				TIMER_init(&TIMER0_config);					/* Activate timer0 to count 15 seconds. */
    1020:	ce 01       	movw	r24, r28
    1022:	4d 96       	adiw	r24, 0x1d	; 29
    1024:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <TIMER_init>
				while(g_timerFlag != 1){}					/* Wait until the timer finish to continue in the code. */
    1028:	80 91 78 01 	lds	r24, 0x0178
    102c:	81 30       	cpi	r24, 0x01	; 1
    102e:	e1 f7       	brne	.-8      	; 0x1028 <main+0x29a>
				g_timerFlag = 0;							/* Always after the timer flag become become on, the developer must make it zero again for another use. */
    1030:	10 92 78 01 	sts	0x0178, r1

				DCMotor_rotate(STOP, MOTOR_SPEED);			/* Stop the motor again. */
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	6b e4       	ldi	r22, 0x4B	; 75
    1038:	0e 94 8f 06 	call	0xd1e	; 0xd1e <DCMotor_rotate>
    103c:	8d cf       	rjmp	.-230    	; 0xf58 <main+0x1ca>
			}
			else if(motorStatus == FALSE)
    103e:	88 89       	ldd	r24, Y+16	; 0x10
    1040:	88 23       	and	r24, r24
    1042:	09 f0       	breq	.+2      	; 0x1046 <main+0x2b8>
    1044:	89 cf       	rjmp	.-238    	; 0xf58 <main+0x1ca>
			{
				UART_sendByte(OPEN_DOOR_FAILED);			/* Send to MC1 that the password is wrong. so, display on screen this information. */
    1046:	84 ef       	ldi	r24, 0xF4	; 244
    1048:	0e 94 5d 11 	call	0x22ba	; 0x22ba <UART_sendByte>
				g_buzzerAccumulator++;						/* Increment the buzzer counter every time the user write wrong password */
    104c:	80 91 79 01 	lds	r24, 0x0179
    1050:	8f 5f       	subi	r24, 0xFF	; 255
    1052:	80 93 79 01 	sts	0x0179, r24

				/* Check on the buzzer g_buzzerAccumulator. if not reach the maximum tries, a message will appear for a second to inform the user that he wrought a wrong password*/
				if(g_buzzerAccumulator == MAX_NUMBER_OF_ERRORS)
    1056:	80 91 79 01 	lds	r24, 0x0179
    105a:	83 30       	cpi	r24, 0x03	; 3
    105c:	09 f0       	breq	.+2      	; 0x1060 <main+0x2d2>
    105e:	7c cf       	rjmp	.-264    	; 0xf58 <main+0x1ca>
				{
					BUZZER_on();							/* Activate the buzzer for one minutes. */
    1060:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <BUZZER_on>

					TIMER_setCallBack(TIMER0_delayBuzzer);  /* This function will call TIMER0_delayBuzzer() function when timer0 finish counting. When this function is called the Timer0 will deactivated. */
    1064:	8f ef       	ldi	r24, 0xFF	; 255
    1066:	99 e0       	ldi	r25, 0x09	; 9
    1068:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <TIMER_setCallBack>
					TIMER_init(&TIMER0_config);				/* Activate timer0 to count 60 seconds. */
    106c:	ce 01       	movw	r24, r28
    106e:	4d 96       	adiw	r24, 0x1d	; 29
    1070:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <TIMER_init>
					while(g_timerFlag != 1){}				/* Wait until the timer finish to continue in the code. */
    1074:	80 91 78 01 	lds	r24, 0x0178
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	e1 f7       	brne	.-8      	; 0x1074 <main+0x2e6>
					g_timerFlag = 0;						/* Always after the timer flag become become on, the developer must make it zero again for another use. */
    107c:	10 92 78 01 	sts	0x0178, r1

					BUZZER_off();							/* Deactivate the buzzer. */
    1080:	0e 94 68 06 	call	0xcd0	; 0xcd0 <BUZZER_off>

					g_buzzerAccumulator = 0;				/* Make the buzzer counter count from 0 again to count three times after each time the password is correct. */
    1084:	10 92 79 01 	sts	0x0179, r1
    1088:	67 cf       	rjmp	.-306    	; 0xf58 <main+0x1ca>
			}
			break;

		/* Case 3: Change Password	*/
		case CHANGE_PASSWORD:
			PASSWORD_receiveData(passwordReceiveData);													/* Receive the password from MC2. */
    108a:	ce 01       	movw	r24, r28
    108c:	49 96       	adiw	r24, 0x19	; 25
    108e:	0e 94 8c 08 	call	0x1118	; 0x1118 <PASSWORD_receiveData>
			receivedPasswordStatus = PASSWORD_compareFromMemory(passwordReceiveData, passwordSaved);	/* Check if the password is correct of not. */
    1092:	ce 01       	movw	r24, r28
    1094:	49 96       	adiw	r24, 0x19	; 25
    1096:	9e 01       	movw	r18, r28
    1098:	2b 5e       	subi	r18, 0xEB	; 235
    109a:	3f 4f       	sbci	r19, 0xFF	; 255
    109c:	b9 01       	movw	r22, r18
    109e:	0e 94 b3 08 	call	0x1166	; 0x1166 <PASSWORD_compareFromMemory>
    10a2:	8f 87       	std	Y+15, r24	; 0x0f

			/* If the password is correct, start changing the password. */
			if(receivedPasswordStatus == TRUE)
    10a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    10a6:	81 30       	cpi	r24, 0x01	; 1
    10a8:	89 f4       	brne	.+34     	; 0x10cc <main+0x33e>
			{
				g_buzzerAccumulator = 0;					/* Make the buzzer counter count from 0 again to count three times after each time the password is correct. */
    10aa:	10 92 79 01 	sts	0x0179, r1

				UART_sendByte(CORRECT_PASSWORD);			/* Send to MC1 that the password is correct. so, start change the password */
    10ae:	86 ef       	ldi	r24, 0xF6	; 246
    10b0:	0e 94 5d 11 	call	0x22ba	; 0x22ba <UART_sendByte>

				/* Receive the new password and save it in memory */
				PASSWORD_receiveSaveMemory(EEPROM_Password_first_ADDRESS, passwordReceived, passwordSaved);
    10b4:	9e 01       	movw	r18, r28
    10b6:	2f 5e       	subi	r18, 0xEF	; 239
    10b8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ba:	ae 01       	movw	r20, r28
    10bc:	4b 5e       	subi	r20, 0xEB	; 235
    10be:	5f 4f       	sbci	r21, 0xFF	; 255
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	93 e0       	ldi	r25, 0x03	; 3
    10c4:	b9 01       	movw	r22, r18
    10c6:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <PASSWORD_receiveSaveMemory>
    10ca:	46 cf       	rjmp	.-372    	; 0xf58 <main+0x1ca>
			}
			else if(receivedPasswordStatus == FALSE)
    10cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    10ce:	88 23       	and	r24, r24
    10d0:	09 f0       	breq	.+2      	; 0x10d4 <main+0x346>
    10d2:	42 cf       	rjmp	.-380    	; 0xf58 <main+0x1ca>
			{
				UART_sendByte(WRONG_PASSWORD);				/* Send to MC1 that the password is not correct. */
    10d4:	87 ef       	ldi	r24, 0xF7	; 247
    10d6:	0e 94 5d 11 	call	0x22ba	; 0x22ba <UART_sendByte>
				g_buzzerAccumulator++;						/* Increment the buzzer counter every time the user write wrong password */
    10da:	80 91 79 01 	lds	r24, 0x0179
    10de:	8f 5f       	subi	r24, 0xFF	; 255
    10e0:	80 93 79 01 	sts	0x0179, r24

				/* Check on the buzzer g_buzzerAccumulator. if not reach the maximum tries, a message will appear for a second to inform the user that he wrought a wrong password*/
				if(g_buzzerAccumulator == MAX_NUMBER_OF_ERRORS)
    10e4:	80 91 79 01 	lds	r24, 0x0179
    10e8:	83 30       	cpi	r24, 0x03	; 3
    10ea:	09 f0       	breq	.+2      	; 0x10ee <main+0x360>
    10ec:	35 cf       	rjmp	.-406    	; 0xf58 <main+0x1ca>
				{
					BUZZER_on();							/* Activate the buzzer for one minutes. */
    10ee:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <BUZZER_on>

					TIMER_setCallBack(TIMER0_delayBuzzer);	/* This function will call TIMER0_delayBuzzer() function when timer0 finish counting. When this function is called the Timer0 will deactivated. */
    10f2:	8f ef       	ldi	r24, 0xFF	; 255
    10f4:	99 e0       	ldi	r25, 0x09	; 9
    10f6:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <TIMER_setCallBack>
					TIMER_init(&TIMER0_config);				/* Activate timer0 to count 60 seconds. */
    10fa:	ce 01       	movw	r24, r28
    10fc:	4d 96       	adiw	r24, 0x1d	; 29
    10fe:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <TIMER_init>
					while(g_timerFlag != 1){}				/* Wait until the timer finish to continue in the code. */
    1102:	80 91 78 01 	lds	r24, 0x0178
    1106:	81 30       	cpi	r24, 0x01	; 1
    1108:	e1 f7       	brne	.-8      	; 0x1102 <main+0x374>
					g_timerFlag = 0;						/* Always after the timer flag become become on, the developer must make it zero again for another use. */
    110a:	10 92 78 01 	sts	0x0178, r1

					BUZZER_off();							/* Deactivate the buzzer. */
    110e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <BUZZER_off>

					g_buzzerAccumulator = 0;				/* Make the buzzer counter count from 0 again to count three times after each time the password is correct. */
    1112:	10 92 79 01 	sts	0x0179, r1
    1116:	20 cf       	rjmp	.-448    	; 0xf58 <main+0x1ca>

00001118 <PASSWORD_receiveData>:
/*
 * Description:
 * receive the password entered to open the door.
 */
void PASSWORD_receiveData(uint8 *a_passwordReceiveData_ptr)
{
    1118:	0f 93       	push	r16
    111a:	1f 93       	push	r17
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	00 d0       	rcall	.+0      	; 0x1122 <PASSWORD_receiveData+0xa>
    1122:	0f 92       	push	r0
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	9b 83       	std	Y+3, r25	; 0x03
    112a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 counter = 0;
    112c:	19 82       	std	Y+1, r1	; 0x01
	/* Receiving all 4 password characters from MC2 after confirming it is the required password to save */
	for(counter = 0; counter < PASSWORD_SIZE; counter++)
    112e:	19 82       	std	Y+1, r1	; 0x01
    1130:	0f c0       	rjmp	.+30     	; 0x1150 <PASSWORD_receiveData+0x38>
	{
		a_passwordReceiveData_ptr[counter] = UART_recieveByte();
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	9b 81       	ldd	r25, Y+3	; 0x03
    113c:	8c 01       	movw	r16, r24
    113e:	02 0f       	add	r16, r18
    1140:	13 1f       	adc	r17, r19
    1142:	0e 94 74 11 	call	0x22e8	; 0x22e8 <UART_recieveByte>
    1146:	f8 01       	movw	r30, r16
    1148:	80 83       	st	Z, r24
 */
void PASSWORD_receiveData(uint8 *a_passwordReceiveData_ptr)
{
	uint8 counter = 0;
	/* Receiving all 4 password characters from MC2 after confirming it is the required password to save */
	for(counter = 0; counter < PASSWORD_SIZE; counter++)
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	8f 5f       	subi	r24, 0xFF	; 255
    114e:	89 83       	std	Y+1, r24	; 0x01
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	84 30       	cpi	r24, 0x04	; 4
    1154:	70 f3       	brcs	.-36     	; 0x1132 <PASSWORD_receiveData+0x1a>
	{
		a_passwordReceiveData_ptr[counter] = UART_recieveByte();
	}
}
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	1f 91       	pop	r17
    1162:	0f 91       	pop	r16
    1164:	08 95       	ret

00001166 <PASSWORD_compareFromMemory>:
 * Compare the received password with the password that saved in EEPROM.
 * If True send command to display on screen door is opening and active the motor for 33 second (15 CW, 3 HOLD, 15 CCW).
 * If false accumulate a counter for the buzzer and send command incorrect password to write the password again.
 */
uint8 PASSWORD_compareFromMemory(uint8 *a_passwordReceiveData_ptr, uint8 *a_passwordSaved_ptr)
{
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	27 97       	sbiw	r28, 0x07	; 7
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	f8 94       	cli
    1174:	de bf       	out	0x3e, r29	; 62
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	cd bf       	out	0x3d, r28	; 61
    117a:	9c 83       	std	Y+4, r25	; 0x04
    117c:	8b 83       	std	Y+3, r24	; 0x03
    117e:	7e 83       	std	Y+6, r23	; 0x06
    1180:	6d 83       	std	Y+5, r22	; 0x05
	uint8 compareCounter = 0;								/* to count values in both arrays. */
    1182:	1a 82       	std	Y+2, r1	; 0x02
	uint8 reference = 0;									/* To take a decision according to the all values are correctly equal or not. */
    1184:	19 82       	std	Y+1, r1	; 0x01

	/* Compare each character from password received with password saved */
	for(compareCounter = 0; compareCounter< PASSWORD_SIZE; compareCounter++)
    1186:	1a 82       	std	Y+2, r1	; 0x02
    1188:	1a c0       	rjmp	.+52     	; 0x11be <PASSWORD_compareFromMemory+0x58>
	{
		if(a_passwordReceiveData_ptr[compareCounter] == a_passwordSaved_ptr[compareCounter])
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	9c 81       	ldd	r25, Y+4	; 0x04
    1194:	fc 01       	movw	r30, r24
    1196:	e2 0f       	add	r30, r18
    1198:	f3 1f       	adc	r31, r19
    119a:	40 81       	ld	r20, Z
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	8d 81       	ldd	r24, Y+5	; 0x05
    11a4:	9e 81       	ldd	r25, Y+6	; 0x06
    11a6:	fc 01       	movw	r30, r24
    11a8:	e2 0f       	add	r30, r18
    11aa:	f3 1f       	adc	r31, r19
    11ac:	80 81       	ld	r24, Z
    11ae:	48 17       	cp	r20, r24
    11b0:	19 f4       	brne	.+6      	; 0x11b8 <PASSWORD_compareFromMemory+0x52>
		{
			reference++;									/* This reference will be indicator to check if 4 characters are equal. */
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	8f 5f       	subi	r24, 0xFF	; 255
    11b6:	89 83       	std	Y+1, r24	; 0x01
{
	uint8 compareCounter = 0;								/* to count values in both arrays. */
	uint8 reference = 0;									/* To take a decision according to the all values are correctly equal or not. */

	/* Compare each character from password received with password saved */
	for(compareCounter = 0; compareCounter< PASSWORD_SIZE; compareCounter++)
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	8f 5f       	subi	r24, 0xFF	; 255
    11bc:	8a 83       	std	Y+2, r24	; 0x02
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	84 30       	cpi	r24, 0x04	; 4
    11c2:	18 f3       	brcs	.-58     	; 0x118a <PASSWORD_compareFromMemory+0x24>
		{
			reference++;									/* This reference will be indicator to check if 4 characters are equal. */
		}
	}
	/* If the password is set correctly. */
	if(reference == PASSWORD_SIZE)
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	84 30       	cpi	r24, 0x04	; 4
    11c8:	19 f4       	brne	.+6      	; 0x11d0 <PASSWORD_compareFromMemory+0x6a>
	{
		return TRUE;
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	8f 83       	std	Y+7, r24	; 0x07
    11ce:	01 c0       	rjmp	.+2      	; 0x11d2 <PASSWORD_compareFromMemory+0x6c>
	}

	/* Else return false to repeat the process. */
	else
	{
		return FALSE;
    11d0:	1f 82       	std	Y+7, r1	; 0x07
    11d2:	8f 81       	ldd	r24, Y+7	; 0x07
	}
}
    11d4:	27 96       	adiw	r28, 0x07	; 7
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	de bf       	out	0x3e, r29	; 62
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	cd bf       	out	0x3d, r28	; 61
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <PASSWORD_receiveSaveMemory>:
 * Receiving the password in an array from MC1.
 * Saving the password in EEPROM.
 * Extract Password values and saves it in another array for another uses.
 */
void PASSWORD_receiveSaveMemory(uint16 eepromAddress,uint8 *a_passwordReceived_ptr, uint8 *a_passwordSaved_ptr)
{
    11e6:	0f 93       	push	r16
    11e8:	1f 93       	push	r17
    11ea:	df 93       	push	r29
    11ec:	cf 93       	push	r28
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	65 97       	sbiw	r28, 0x15	; 21
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	f8 94       	cli
    11f8:	de bf       	out	0x3e, r29	; 62
    11fa:	0f be       	out	0x3f, r0	; 63
    11fc:	cd bf       	out	0x3d, r28	; 61
    11fe:	99 8b       	std	Y+17, r25	; 0x11
    1200:	88 8b       	std	Y+16, r24	; 0x10
    1202:	7b 8b       	std	Y+19, r23	; 0x13
    1204:	6a 8b       	std	Y+18, r22	; 0x12
    1206:	5d 8b       	std	Y+21, r21	; 0x15
    1208:	4c 8b       	std	Y+20, r20	; 0x14
	uint8 counter = 0;
    120a:	1f 86       	std	Y+15, r1	; 0x0f
	/* Receiving all 4 password characters from MC2 after confirming it is the required password to save */
	for(counter = 0; counter < PASSWORD_SIZE; counter++)
    120c:	1f 86       	std	Y+15, r1	; 0x0f
    120e:	0f c0       	rjmp	.+30     	; 0x122e <PASSWORD_receiveSaveMemory+0x48>
	{
		a_passwordReceived_ptr[counter] = UART_recieveByte();
    1210:	8f 85       	ldd	r24, Y+15	; 0x0f
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	8a 89       	ldd	r24, Y+18	; 0x12
    1218:	9b 89       	ldd	r25, Y+19	; 0x13
    121a:	8c 01       	movw	r16, r24
    121c:	02 0f       	add	r16, r18
    121e:	13 1f       	adc	r17, r19
    1220:	0e 94 74 11 	call	0x22e8	; 0x22e8 <UART_recieveByte>
    1224:	f8 01       	movw	r30, r16
    1226:	80 83       	st	Z, r24
 */
void PASSWORD_receiveSaveMemory(uint16 eepromAddress,uint8 *a_passwordReceived_ptr, uint8 *a_passwordSaved_ptr)
{
	uint8 counter = 0;
	/* Receiving all 4 password characters from MC2 after confirming it is the required password to save */
	for(counter = 0; counter < PASSWORD_SIZE; counter++)
    1228:	8f 85       	ldd	r24, Y+15	; 0x0f
    122a:	8f 5f       	subi	r24, 0xFF	; 255
    122c:	8f 87       	std	Y+15, r24	; 0x0f
    122e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1230:	84 30       	cpi	r24, 0x04	; 4
    1232:	70 f3       	brcs	.-36     	; 0x1210 <PASSWORD_receiveSaveMemory+0x2a>
	}

	/* Saving password values in external EEPROM
	 * Extract the password values that saved in EEPROM and save it in another array
	 */
	counter = 0;
    1234:	1f 86       	std	Y+15, r1	; 0x0f
    1236:	94 c0       	rjmp	.+296    	; 0x1360 <PASSWORD_receiveSaveMemory+0x17a>
	while(counter < PASSWORD_SIZE)
	{
		EEPROM_writeByte(eepromAddress, a_passwordReceived_ptr[counter]); /* Save each character in EEPROM */
    1238:	8f 85       	ldd	r24, Y+15	; 0x0f
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	8a 89       	ldd	r24, Y+18	; 0x12
    1240:	9b 89       	ldd	r25, Y+19	; 0x13
    1242:	fc 01       	movw	r30, r24
    1244:	e2 0f       	add	r30, r18
    1246:	f3 1f       	adc	r31, r19
    1248:	20 81       	ld	r18, Z
    124a:	88 89       	ldd	r24, Y+16	; 0x10
    124c:	99 89       	ldd	r25, Y+17	; 0x11
    124e:	62 2f       	mov	r22, r18
    1250:	0e 94 20 0a 	call	0x1440	; 0x1440 <EEPROM_writeByte>
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	a0 e2       	ldi	r26, 0x20	; 32
    125a:	b1 e4       	ldi	r27, 0x41	; 65
    125c:	8b 87       	std	Y+11, r24	; 0x0b
    125e:	9c 87       	std	Y+12, r25	; 0x0c
    1260:	ad 87       	std	Y+13, r26	; 0x0d
    1262:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1264:	6b 85       	ldd	r22, Y+11	; 0x0b
    1266:	7c 85       	ldd	r23, Y+12	; 0x0c
    1268:	8d 85       	ldd	r24, Y+13	; 0x0d
    126a:	9e 85       	ldd	r25, Y+14	; 0x0e
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	4a ef       	ldi	r20, 0xFA	; 250
    1272:	54 e4       	ldi	r21, 0x44	; 68
    1274:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1278:	dc 01       	movw	r26, r24
    127a:	cb 01       	movw	r24, r22
    127c:	8f 83       	std	Y+7, r24	; 0x07
    127e:	98 87       	std	Y+8, r25	; 0x08
    1280:	a9 87       	std	Y+9, r26	; 0x09
    1282:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1284:	6f 81       	ldd	r22, Y+7	; 0x07
    1286:	78 85       	ldd	r23, Y+8	; 0x08
    1288:	89 85       	ldd	r24, Y+9	; 0x09
    128a:	9a 85       	ldd	r25, Y+10	; 0x0a
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e8       	ldi	r20, 0x80	; 128
    1292:	5f e3       	ldi	r21, 0x3F	; 63
    1294:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1298:	88 23       	and	r24, r24
    129a:	2c f4       	brge	.+10     	; 0x12a6 <PASSWORD_receiveSaveMemory+0xc0>
		__ticks = 1;
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	9e 83       	std	Y+6, r25	; 0x06
    12a2:	8d 83       	std	Y+5, r24	; 0x05
    12a4:	3f c0       	rjmp	.+126    	; 0x1324 <PASSWORD_receiveSaveMemory+0x13e>
	else if (__tmp > 65535)
    12a6:	6f 81       	ldd	r22, Y+7	; 0x07
    12a8:	78 85       	ldd	r23, Y+8	; 0x08
    12aa:	89 85       	ldd	r24, Y+9	; 0x09
    12ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	3f ef       	ldi	r19, 0xFF	; 255
    12b2:	4f e7       	ldi	r20, 0x7F	; 127
    12b4:	57 e4       	ldi	r21, 0x47	; 71
    12b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12ba:	18 16       	cp	r1, r24
    12bc:	4c f5       	brge	.+82     	; 0x1310 <PASSWORD_receiveSaveMemory+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12be:	6b 85       	ldd	r22, Y+11	; 0x0b
    12c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    12c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    12c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	40 e2       	ldi	r20, 0x20	; 32
    12cc:	51 e4       	ldi	r21, 0x41	; 65
    12ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d2:	dc 01       	movw	r26, r24
    12d4:	cb 01       	movw	r24, r22
    12d6:	bc 01       	movw	r22, r24
    12d8:	cd 01       	movw	r24, r26
    12da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12de:	dc 01       	movw	r26, r24
    12e0:	cb 01       	movw	r24, r22
    12e2:	9e 83       	std	Y+6, r25	; 0x06
    12e4:	8d 83       	std	Y+5, r24	; 0x05
    12e6:	0f c0       	rjmp	.+30     	; 0x1306 <PASSWORD_receiveSaveMemory+0x120>
    12e8:	88 ec       	ldi	r24, 0xC8	; 200
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	9c 83       	std	Y+4, r25	; 0x04
    12ee:	8b 83       	std	Y+3, r24	; 0x03
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	9c 81       	ldd	r25, Y+4	; 0x04
    12f4:	01 97       	sbiw	r24, 0x01	; 1
    12f6:	f1 f7       	brne	.-4      	; 0x12f4 <PASSWORD_receiveSaveMemory+0x10e>
    12f8:	9c 83       	std	Y+4, r25	; 0x04
    12fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12fc:	8d 81       	ldd	r24, Y+5	; 0x05
    12fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1300:	01 97       	sbiw	r24, 0x01	; 1
    1302:	9e 83       	std	Y+6, r25	; 0x06
    1304:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1306:	8d 81       	ldd	r24, Y+5	; 0x05
    1308:	9e 81       	ldd	r25, Y+6	; 0x06
    130a:	00 97       	sbiw	r24, 0x00	; 0
    130c:	69 f7       	brne	.-38     	; 0x12e8 <PASSWORD_receiveSaveMemory+0x102>
    130e:	14 c0       	rjmp	.+40     	; 0x1338 <PASSWORD_receiveSaveMemory+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1310:	6f 81       	ldd	r22, Y+7	; 0x07
    1312:	78 85       	ldd	r23, Y+8	; 0x08
    1314:	89 85       	ldd	r24, Y+9	; 0x09
    1316:	9a 85       	ldd	r25, Y+10	; 0x0a
    1318:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	9e 83       	std	Y+6, r25	; 0x06
    1322:	8d 83       	std	Y+5, r24	; 0x05
    1324:	8d 81       	ldd	r24, Y+5	; 0x05
    1326:	9e 81       	ldd	r25, Y+6	; 0x06
    1328:	9a 83       	std	Y+2, r25	; 0x02
    132a:	89 83       	std	Y+1, r24	; 0x01
    132c:	89 81       	ldd	r24, Y+1	; 0x01
    132e:	9a 81       	ldd	r25, Y+2	; 0x02
    1330:	01 97       	sbiw	r24, 0x01	; 1
    1332:	f1 f7       	brne	.-4      	; 0x1330 <PASSWORD_receiveSaveMemory+0x14a>
    1334:	9a 83       	std	Y+2, r25	; 0x02
    1336:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		EEPROM_readByte(eepromAddress, &a_passwordSaved_ptr[counter]);	  /* Take each character from EEPROM to compare with any new password that the user is going to write on the keypad.*/
    1338:	8f 85       	ldd	r24, Y+15	; 0x0f
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	8c 89       	ldd	r24, Y+20	; 0x14
    1340:	9d 89       	ldd	r25, Y+21	; 0x15
    1342:	28 0f       	add	r18, r24
    1344:	39 1f       	adc	r19, r25
    1346:	88 89       	ldd	r24, Y+16	; 0x10
    1348:	99 89       	ldd	r25, Y+17	; 0x11
    134a:	b9 01       	movw	r22, r18
    134c:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <EEPROM_readByte>
		counter++; 				/* Increment the counter */
    1350:	8f 85       	ldd	r24, Y+15	; 0x0f
    1352:	8f 5f       	subi	r24, 0xFF	; 255
    1354:	8f 87       	std	Y+15, r24	; 0x0f
		eepromAddress++;		/* Increment the Address */
    1356:	88 89       	ldd	r24, Y+16	; 0x10
    1358:	99 89       	ldd	r25, Y+17	; 0x11
    135a:	01 96       	adiw	r24, 0x01	; 1
    135c:	99 8b       	std	Y+17, r25	; 0x11
    135e:	88 8b       	std	Y+16, r24	; 0x10

	/* Saving password values in external EEPROM
	 * Extract the password values that saved in EEPROM and save it in another array
	 */
	counter = 0;
	while(counter < PASSWORD_SIZE)
    1360:	8f 85       	ldd	r24, Y+15	; 0x0f
    1362:	84 30       	cpi	r24, 0x04	; 4
    1364:	08 f4       	brcc	.+2      	; 0x1368 <PASSWORD_receiveSaveMemory+0x182>
    1366:	68 cf       	rjmp	.-304    	; 0x1238 <PASSWORD_receiveSaveMemory+0x52>
		_delay_ms(10);
		EEPROM_readByte(eepromAddress, &a_passwordSaved_ptr[counter]);	  /* Take each character from EEPROM to compare with any new password that the user is going to write on the keypad.*/
		counter++; 				/* Increment the counter */
		eepromAddress++;		/* Increment the Address */
	}
}
    1368:	65 96       	adiw	r28, 0x15	; 21
    136a:	0f b6       	in	r0, 0x3f	; 63
    136c:	f8 94       	cli
    136e:	de bf       	out	0x3e, r29	; 62
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	cd bf       	out	0x3d, r28	; 61
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	1f 91       	pop	r17
    137a:	0f 91       	pop	r16
    137c:	08 95       	ret

0000137e <TIMER0_delayOpenClose>:
/*
 * Description;
 * This function use Timer0 in AVR to delay display while opening and closing the door.
 */
void TIMER0_delayOpenClose(void)
{
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
	g_timerCounter++;								/* For each interrupt this counter will increment by one. */
    1386:	80 91 76 01 	lds	r24, 0x0176
    138a:	90 91 77 01 	lds	r25, 0x0177
    138e:	01 96       	adiw	r24, 0x01	; 1
    1390:	90 93 77 01 	sts	0x0177, r25
    1394:	80 93 76 01 	sts	0x0176, r24

	/* Check if the timer counter reach the required limit. */
    if(g_timerCounter == TIMER_OPEN_CLOSE_DOOR)
    1398:	80 91 76 01 	lds	r24, 0x0176
    139c:	90 91 77 01 	lds	r25, 0x0177
    13a0:	89 3e       	cpi	r24, 0xE9	; 233
    13a2:	91 05       	cpc	r25, r1
    13a4:	49 f4       	brne	.+18     	; 0x13b8 <TIMER0_delayOpenClose+0x3a>
    {
    	TIMER_deinit();								/* After the number of required interrupt is ended, the timer will stop by this function. */
    13a6:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <TIMER_deinit>
    	g_timerFlag = 1;							/* Open this flag will make the delay stop, must be closed again by the developer if he wants to use the delay function again. */
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	80 93 78 01 	sts	0x0178, r24
        g_timerCounter = 0;							/* make timer counter zero again to be able to use it again and count up form zero. */
    13b0:	10 92 77 01 	sts	0x0177, r1
    13b4:	10 92 76 01 	sts	0x0176, r1
    }
}
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	08 95       	ret

000013be <TIMER0_delayHold>:
/*
 * Description;
 * This function use Timer0 in AVR to delay display while holding the door.
 */
void TIMER0_delayHold(void)
{
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
	g_timerCounter++;								/* For each interrupt this counter will increment by one. */
    13c6:	80 91 76 01 	lds	r24, 0x0176
    13ca:	90 91 77 01 	lds	r25, 0x0177
    13ce:	01 96       	adiw	r24, 0x01	; 1
    13d0:	90 93 77 01 	sts	0x0177, r25
    13d4:	80 93 76 01 	sts	0x0176, r24
    if(g_timerCounter == TIMER_HOLD_DOOR)
    13d8:	80 91 76 01 	lds	r24, 0x0176
    13dc:	90 91 77 01 	lds	r25, 0x0177
    13e0:	8e 32       	cpi	r24, 0x2E	; 46
    13e2:	91 05       	cpc	r25, r1
    13e4:	49 f4       	brne	.+18     	; 0x13f8 <TIMER0_delayHold+0x3a>
    {
        TIMER_deinit();								/* After the number of required interrupt is ended, the timer will stop by this function. */
    13e6:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <TIMER_deinit>
    	g_timerFlag = 1;							/* Open this flag will make the delay stop, must be closed again by the developer if he wants to use the delay function again. */
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	80 93 78 01 	sts	0x0178, r24
        g_timerCounter = 0;							/* make timer counter zero again to be able to use it again and count up form zero. */
    13f0:	10 92 77 01 	sts	0x0177, r1
    13f4:	10 92 76 01 	sts	0x0176, r1
    }
}
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	08 95       	ret

000013fe <TIMER0_delayBuzzer>:
/*
 * Description;
 * This function use Timer0 in AVR to delay display while buzzer is activated.
 */
void TIMER0_delayBuzzer(void)
{
    13fe:	df 93       	push	r29
    1400:	cf 93       	push	r28
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
	g_timerCounter++;								/* For each interrupt this counter will increment by one. */
    1406:	80 91 76 01 	lds	r24, 0x0176
    140a:	90 91 77 01 	lds	r25, 0x0177
    140e:	01 96       	adiw	r24, 0x01	; 1
    1410:	90 93 77 01 	sts	0x0177, r25
    1414:	80 93 76 01 	sts	0x0176, r24
    if(g_timerCounter == TIMER_BUZZER)
    1418:	80 91 76 01 	lds	r24, 0x0176
    141c:	90 91 77 01 	lds	r25, 0x0177
    1420:	23 e0       	ldi	r18, 0x03	; 3
    1422:	82 3a       	cpi	r24, 0xA2	; 162
    1424:	92 07       	cpc	r25, r18
    1426:	49 f4       	brne	.+18     	; 0x143a <TIMER0_delayBuzzer+0x3c>
    {
        TIMER_deinit();								/* After the number of required interrupt is ended, the timer will stop by this function. */
    1428:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <TIMER_deinit>
    	g_timerFlag = 1;							/* Open this flag will make the delay stop, must be closed again by the developer if he wants to use the delay function again. */
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	80 93 78 01 	sts	0x0178, r24
        g_timerCounter = 0;							/* make timer counter zero again to be able to use it again and count up form zero. */
    1432:	10 92 77 01 	sts	0x0177, r1
    1436:	10 92 76 01 	sts	0x0176, r1
    }
}
    143a:	cf 91       	pop	r28
    143c:	df 91       	pop	r29
    143e:	08 95       	ret

00001440 <EEPROM_writeByte>:
/*
 * Description:
 * Save a value in memory.
 */
uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	00 d0       	rcall	.+0      	; 0x1446 <EEPROM_writeByte+0x6>
    1446:	00 d0       	rcall	.+0      	; 0x1448 <EEPROM_writeByte+0x8>
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
    144c:	9a 83       	std	Y+2, r25	; 0x02
    144e:	89 83       	std	Y+1, r24	; 0x01
    1450:	6b 83       	std	Y+3, r22	; 0x03
	/* Send start bit */
	I2C_start();
    1452:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <I2C_start>
    if (I2C_getStatus() != I2C_START)
    1456:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <I2C_getStatus>
    145a:	88 30       	cpi	r24, 0x08	; 8
    145c:	11 f0       	breq	.+4      	; 0x1462 <EEPROM_writeByte+0x22>
        return ERROR;
    145e:	1c 82       	std	Y+4, r1	; 0x04
    1460:	28 c0       	rjmp	.+80     	; 0x14b2 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    I2C_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	9a 81       	ldd	r25, Y+2	; 0x02
    1466:	80 70       	andi	r24, 0x00	; 0
    1468:	97 70       	andi	r25, 0x07	; 7
    146a:	88 0f       	add	r24, r24
    146c:	89 2f       	mov	r24, r25
    146e:	88 1f       	adc	r24, r24
    1470:	99 0b       	sbc	r25, r25
    1472:	91 95       	neg	r25
    1474:	80 6a       	ori	r24, 0xA0	; 160
    1476:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <I2C_writeByte>
    if (I2C_getStatus() != I2C_MT_SLA_W_ACK)
    147a:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <I2C_getStatus>
    147e:	88 31       	cpi	r24, 0x18	; 24
    1480:	11 f0       	breq	.+4      	; 0x1486 <EEPROM_writeByte+0x46>
        return ERROR;
    1482:	1c 82       	std	Y+4, r1	; 0x04
    1484:	16 c0       	rjmp	.+44     	; 0x14b2 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    I2C_writeByte((uint8)(u16addr));
    1486:	89 81       	ldd	r24, Y+1	; 0x01
    1488:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <I2C_writeByte>
    if (I2C_getStatus() != I2C_MT_DATA_ACK)
    148c:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <I2C_getStatus>
    1490:	88 32       	cpi	r24, 0x28	; 40
    1492:	11 f0       	breq	.+4      	; 0x1498 <EEPROM_writeByte+0x58>
        return ERROR;
    1494:	1c 82       	std	Y+4, r1	; 0x04
    1496:	0d c0       	rjmp	.+26     	; 0x14b2 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    I2C_writeByte(u8data);
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <I2C_writeByte>
    if (I2C_getStatus() != I2C_MT_DATA_ACK)
    149e:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <I2C_getStatus>
    14a2:	88 32       	cpi	r24, 0x28	; 40
    14a4:	11 f0       	breq	.+4      	; 0x14aa <EEPROM_writeByte+0x6a>
        return ERROR;
    14a6:	1c 82       	std	Y+4, r1	; 0x04
    14a8:	04 c0       	rjmp	.+8      	; 0x14b2 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    I2C_stop();
    14aa:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <I2C_stop>

    return SUCCESS;
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	8c 83       	std	Y+4, r24	; 0x04
    14b2:	8c 81       	ldd	r24, Y+4	; 0x04
}
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	cf 91       	pop	r28
    14be:	df 91       	pop	r29
    14c0:	08 95       	ret

000014c2 <EEPROM_readByte>:
/*
 * Description:
 * Read value from memory.
 */
uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    14c2:	df 93       	push	r29
    14c4:	cf 93       	push	r28
    14c6:	00 d0       	rcall	.+0      	; 0x14c8 <EEPROM_readByte+0x6>
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <EEPROM_readByte+0x8>
    14ca:	0f 92       	push	r0
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
    14d0:	9a 83       	std	Y+2, r25	; 0x02
    14d2:	89 83       	std	Y+1, r24	; 0x01
    14d4:	7c 83       	std	Y+4, r23	; 0x04
    14d6:	6b 83       	std	Y+3, r22	; 0x03
	/* Send start bit */
	I2C_start();
    14d8:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <I2C_start>
    if (I2C_getStatus() != I2C_START)
    14dc:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <I2C_getStatus>
    14e0:	88 30       	cpi	r24, 0x08	; 8
    14e2:	11 f0       	breq	.+4      	; 0x14e8 <EEPROM_readByte+0x26>
        return ERROR;
    14e4:	1d 82       	std	Y+5, r1	; 0x05
    14e6:	44 c0       	rjmp	.+136    	; 0x1570 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    I2C_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	9a 81       	ldd	r25, Y+2	; 0x02
    14ec:	80 70       	andi	r24, 0x00	; 0
    14ee:	97 70       	andi	r25, 0x07	; 7
    14f0:	88 0f       	add	r24, r24
    14f2:	89 2f       	mov	r24, r25
    14f4:	88 1f       	adc	r24, r24
    14f6:	99 0b       	sbc	r25, r25
    14f8:	91 95       	neg	r25
    14fa:	80 6a       	ori	r24, 0xA0	; 160
    14fc:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <I2C_writeByte>
    if (I2C_getStatus() != I2C_MT_SLA_W_ACK)
    1500:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <I2C_getStatus>
    1504:	88 31       	cpi	r24, 0x18	; 24
    1506:	11 f0       	breq	.+4      	; 0x150c <EEPROM_readByte+0x4a>
        return ERROR;
    1508:	1d 82       	std	Y+5, r1	; 0x05
    150a:	32 c0       	rjmp	.+100    	; 0x1570 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    I2C_writeByte((uint8)(u16addr));
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <I2C_writeByte>
    if (I2C_getStatus() != I2C_MT_DATA_ACK)
    1512:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <I2C_getStatus>
    1516:	88 32       	cpi	r24, 0x28	; 40
    1518:	11 f0       	breq	.+4      	; 0x151e <EEPROM_readByte+0x5c>
        return ERROR;
    151a:	1d 82       	std	Y+5, r1	; 0x05
    151c:	29 c0       	rjmp	.+82     	; 0x1570 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    I2C_start();
    151e:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <I2C_start>
    if (I2C_getStatus() != I2C_REP_START)
    1522:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <I2C_getStatus>
    1526:	80 31       	cpi	r24, 0x10	; 16
    1528:	11 f0       	breq	.+4      	; 0x152e <EEPROM_readByte+0x6c>
        return ERROR;
    152a:	1d 82       	std	Y+5, r1	; 0x05
    152c:	21 c0       	rjmp	.+66     	; 0x1570 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    I2C_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	9a 81       	ldd	r25, Y+2	; 0x02
    1532:	80 70       	andi	r24, 0x00	; 0
    1534:	97 70       	andi	r25, 0x07	; 7
    1536:	88 0f       	add	r24, r24
    1538:	89 2f       	mov	r24, r25
    153a:	88 1f       	adc	r24, r24
    153c:	99 0b       	sbc	r25, r25
    153e:	91 95       	neg	r25
    1540:	81 6a       	ori	r24, 0xA1	; 161
    1542:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <I2C_writeByte>
    if (I2C_getStatus() != I2C_MT_SLA_R_ACK)
    1546:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <I2C_getStatus>
    154a:	80 34       	cpi	r24, 0x40	; 64
    154c:	11 f0       	breq	.+4      	; 0x1552 <EEPROM_readByte+0x90>
        return ERROR;
    154e:	1d 82       	std	Y+5, r1	; 0x05
    1550:	0f c0       	rjmp	.+30     	; 0x1570 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = I2C_readByteWithNACK();
    1552:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <I2C_readByteWithNACK>
    1556:	eb 81       	ldd	r30, Y+3	; 0x03
    1558:	fc 81       	ldd	r31, Y+4	; 0x04
    155a:	80 83       	st	Z, r24
    if (I2C_getStatus() != I2C_MR_DATA_NACK)
    155c:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <I2C_getStatus>
    1560:	88 35       	cpi	r24, 0x58	; 88
    1562:	11 f0       	breq	.+4      	; 0x1568 <EEPROM_readByte+0xa6>
        return ERROR;
    1564:	1d 82       	std	Y+5, r1	; 0x05
    1566:	04 c0       	rjmp	.+8      	; 0x1570 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    I2C_stop();
    1568:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <I2C_stop>

    return SUCCESS;
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	8d 83       	std	Y+5, r24	; 0x05
    1570:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	cf 91       	pop	r28
    157e:	df 91       	pop	r29
    1580:	08 95       	ret

00001582 <GPIO_setupPinDirection>:
 * Description:
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1582:	df 93       	push	r29
    1584:	cf 93       	push	r28
    1586:	00 d0       	rcall	.+0      	; 0x1588 <GPIO_setupPinDirection+0x6>
    1588:	00 d0       	rcall	.+0      	; 0x158a <GPIO_setupPinDirection+0x8>
    158a:	0f 92       	push	r0
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
    1590:	89 83       	std	Y+1, r24	; 0x01
    1592:	6a 83       	std	Y+2, r22	; 0x02
    1594:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
    1596:	89 81       	ldd	r24, Y+1	; 0x01
    1598:	84 30       	cpi	r24, 0x04	; 4
    159a:	08 f0       	brcs	.+2      	; 0x159e <GPIO_setupPinDirection+0x1c>
    159c:	d5 c0       	rjmp	.+426    	; 0x1748 <GPIO_setupPinDirection+0x1c6>
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	88 30       	cpi	r24, 0x08	; 8
    15a2:	08 f0       	brcs	.+2      	; 0x15a6 <GPIO_setupPinDirection+0x24>
    15a4:	d1 c0       	rjmp	.+418    	; 0x1748 <GPIO_setupPinDirection+0x1c6>
	{
		/* DO NOTHING */
	}
	else
	{
		switch(port_num)
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	3d 83       	std	Y+5, r19	; 0x05
    15ae:	2c 83       	std	Y+4, r18	; 0x04
    15b0:	8c 81       	ldd	r24, Y+4	; 0x04
    15b2:	9d 81       	ldd	r25, Y+5	; 0x05
    15b4:	81 30       	cpi	r24, 0x01	; 1
    15b6:	91 05       	cpc	r25, r1
    15b8:	09 f4       	brne	.+2      	; 0x15bc <GPIO_setupPinDirection+0x3a>
    15ba:	43 c0       	rjmp	.+134    	; 0x1642 <GPIO_setupPinDirection+0xc0>
    15bc:	2c 81       	ldd	r18, Y+4	; 0x04
    15be:	3d 81       	ldd	r19, Y+5	; 0x05
    15c0:	22 30       	cpi	r18, 0x02	; 2
    15c2:	31 05       	cpc	r19, r1
    15c4:	2c f4       	brge	.+10     	; 0x15d0 <GPIO_setupPinDirection+0x4e>
    15c6:	8c 81       	ldd	r24, Y+4	; 0x04
    15c8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ca:	00 97       	sbiw	r24, 0x00	; 0
    15cc:	71 f0       	breq	.+28     	; 0x15ea <GPIO_setupPinDirection+0x68>
    15ce:	bc c0       	rjmp	.+376    	; 0x1748 <GPIO_setupPinDirection+0x1c6>
    15d0:	2c 81       	ldd	r18, Y+4	; 0x04
    15d2:	3d 81       	ldd	r19, Y+5	; 0x05
    15d4:	22 30       	cpi	r18, 0x02	; 2
    15d6:	31 05       	cpc	r19, r1
    15d8:	09 f4       	brne	.+2      	; 0x15dc <GPIO_setupPinDirection+0x5a>
    15da:	5f c0       	rjmp	.+190    	; 0x169a <GPIO_setupPinDirection+0x118>
    15dc:	8c 81       	ldd	r24, Y+4	; 0x04
    15de:	9d 81       	ldd	r25, Y+5	; 0x05
    15e0:	83 30       	cpi	r24, 0x03	; 3
    15e2:	91 05       	cpc	r25, r1
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <GPIO_setupPinDirection+0x66>
    15e6:	85 c0       	rjmp	.+266    	; 0x16f2 <GPIO_setupPinDirection+0x170>
    15e8:	af c0       	rjmp	.+350    	; 0x1748 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    15ea:	8b 81       	ldd	r24, Y+3	; 0x03
    15ec:	81 30       	cpi	r24, 0x01	; 1
    15ee:	a1 f4       	brne	.+40     	; 0x1618 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    15f0:	aa e3       	ldi	r26, 0x3A	; 58
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	ea e3       	ldi	r30, 0x3A	; 58
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	48 2f       	mov	r20, r24
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	02 2e       	mov	r0, r18
    1608:	02 c0       	rjmp	.+4      	; 0x160e <GPIO_setupPinDirection+0x8c>
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	0a 94       	dec	r0
    1610:	e2 f7       	brpl	.-8      	; 0x160a <GPIO_setupPinDirection+0x88>
    1612:	84 2b       	or	r24, r20
    1614:	8c 93       	st	X, r24
    1616:	98 c0       	rjmp	.+304    	; 0x1748 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1618:	aa e3       	ldi	r26, 0x3A	; 58
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	ea e3       	ldi	r30, 0x3A	; 58
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	48 2f       	mov	r20, r24
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	02 2e       	mov	r0, r18
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <GPIO_setupPinDirection+0xb4>
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	0a 94       	dec	r0
    1638:	e2 f7       	brpl	.-8      	; 0x1632 <GPIO_setupPinDirection+0xb0>
    163a:	80 95       	com	r24
    163c:	84 23       	and	r24, r20
    163e:	8c 93       	st	X, r24
    1640:	83 c0       	rjmp	.+262    	; 0x1748 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	81 30       	cpi	r24, 0x01	; 1
    1646:	a1 f4       	brne	.+40     	; 0x1670 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1648:	a7 e3       	ldi	r26, 0x37	; 55
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	e7 e3       	ldi	r30, 0x37	; 55
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	48 2f       	mov	r20, r24
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	28 2f       	mov	r18, r24
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	02 2e       	mov	r0, r18
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <GPIO_setupPinDirection+0xe4>
    1662:	88 0f       	add	r24, r24
    1664:	99 1f       	adc	r25, r25
    1666:	0a 94       	dec	r0
    1668:	e2 f7       	brpl	.-8      	; 0x1662 <GPIO_setupPinDirection+0xe0>
    166a:	84 2b       	or	r24, r20
    166c:	8c 93       	st	X, r24
    166e:	6c c0       	rjmp	.+216    	; 0x1748 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1670:	a7 e3       	ldi	r26, 0x37	; 55
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	e7 e3       	ldi	r30, 0x37	; 55
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	48 2f       	mov	r20, r24
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	02 2e       	mov	r0, r18
    1688:	02 c0       	rjmp	.+4      	; 0x168e <GPIO_setupPinDirection+0x10c>
    168a:	88 0f       	add	r24, r24
    168c:	99 1f       	adc	r25, r25
    168e:	0a 94       	dec	r0
    1690:	e2 f7       	brpl	.-8      	; 0x168a <GPIO_setupPinDirection+0x108>
    1692:	80 95       	com	r24
    1694:	84 23       	and	r24, r20
    1696:	8c 93       	st	X, r24
    1698:	57 c0       	rjmp	.+174    	; 0x1748 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	81 30       	cpi	r24, 0x01	; 1
    169e:	a1 f4       	brne	.+40     	; 0x16c8 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    16a0:	a4 e3       	ldi	r26, 0x34	; 52
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	e4 e3       	ldi	r30, 0x34	; 52
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	48 2f       	mov	r20, r24
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	02 2e       	mov	r0, r18
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <GPIO_setupPinDirection+0x13c>
    16ba:	88 0f       	add	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	0a 94       	dec	r0
    16c0:	e2 f7       	brpl	.-8      	; 0x16ba <GPIO_setupPinDirection+0x138>
    16c2:	84 2b       	or	r24, r20
    16c4:	8c 93       	st	X, r24
    16c6:	40 c0       	rjmp	.+128    	; 0x1748 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    16c8:	a4 e3       	ldi	r26, 0x34	; 52
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e4 e3       	ldi	r30, 0x34	; 52
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	48 2f       	mov	r20, r24
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 2e       	mov	r0, r18
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <GPIO_setupPinDirection+0x164>
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	0a 94       	dec	r0
    16e8:	e2 f7       	brpl	.-8      	; 0x16e2 <GPIO_setupPinDirection+0x160>
    16ea:	80 95       	com	r24
    16ec:	84 23       	and	r24, r20
    16ee:	8c 93       	st	X, r24
    16f0:	2b c0       	rjmp	.+86     	; 0x1748 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	81 30       	cpi	r24, 0x01	; 1
    16f6:	a1 f4       	brne	.+40     	; 0x1720 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    16f8:	a1 e3       	ldi	r26, 0x31	; 49
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	e1 e3       	ldi	r30, 0x31	; 49
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	48 2f       	mov	r20, r24
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	02 2e       	mov	r0, r18
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <GPIO_setupPinDirection+0x194>
    1712:	88 0f       	add	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	0a 94       	dec	r0
    1718:	e2 f7       	brpl	.-8      	; 0x1712 <GPIO_setupPinDirection+0x190>
    171a:	84 2b       	or	r24, r20
    171c:	8c 93       	st	X, r24
    171e:	14 c0       	rjmp	.+40     	; 0x1748 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1720:	a1 e3       	ldi	r26, 0x31	; 49
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	e1 e3       	ldi	r30, 0x31	; 49
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	48 2f       	mov	r20, r24
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	28 2f       	mov	r18, r24
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	02 2e       	mov	r0, r18
    1738:	02 c0       	rjmp	.+4      	; 0x173e <GPIO_setupPinDirection+0x1bc>
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	0a 94       	dec	r0
    1740:	e2 f7       	brpl	.-8      	; 0x173a <GPIO_setupPinDirection+0x1b8>
    1742:	80 95       	com	r24
    1744:	84 23       	and	r24, r20
    1746:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	cf 91       	pop	r28
    1754:	df 91       	pop	r29
    1756:	08 95       	ret

00001758 <GPIO_writePin>:
 * Write the value logic high or logic low on the required pin.
 * if the input port number or pin number are not correct, the function will not handle the request.
 * if the pin input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1758:	df 93       	push	r29
    175a:	cf 93       	push	r28
    175c:	00 d0       	rcall	.+0      	; 0x175e <GPIO_writePin+0x6>
    175e:	00 d0       	rcall	.+0      	; 0x1760 <GPIO_writePin+0x8>
    1760:	0f 92       	push	r0
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62
    1766:	89 83       	std	Y+1, r24	; 0x01
    1768:	6a 83       	std	Y+2, r22	; 0x02
    176a:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
    176c:	89 81       	ldd	r24, Y+1	; 0x01
    176e:	84 30       	cpi	r24, 0x04	; 4
    1770:	08 f0       	brcs	.+2      	; 0x1774 <GPIO_writePin+0x1c>
    1772:	d5 c0       	rjmp	.+426    	; 0x191e <GPIO_writePin+0x1c6>
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	88 30       	cpi	r24, 0x08	; 8
    1778:	08 f0       	brcs	.+2      	; 0x177c <GPIO_writePin+0x24>
    177a:	d1 c0       	rjmp	.+418    	; 0x191e <GPIO_writePin+0x1c6>
	{
		/* DO NOTHING */
	}
	else
	{
		switch(port_num)
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	28 2f       	mov	r18, r24
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	3d 83       	std	Y+5, r19	; 0x05
    1784:	2c 83       	std	Y+4, r18	; 0x04
    1786:	8c 81       	ldd	r24, Y+4	; 0x04
    1788:	9d 81       	ldd	r25, Y+5	; 0x05
    178a:	81 30       	cpi	r24, 0x01	; 1
    178c:	91 05       	cpc	r25, r1
    178e:	09 f4       	brne	.+2      	; 0x1792 <GPIO_writePin+0x3a>
    1790:	43 c0       	rjmp	.+134    	; 0x1818 <GPIO_writePin+0xc0>
    1792:	2c 81       	ldd	r18, Y+4	; 0x04
    1794:	3d 81       	ldd	r19, Y+5	; 0x05
    1796:	22 30       	cpi	r18, 0x02	; 2
    1798:	31 05       	cpc	r19, r1
    179a:	2c f4       	brge	.+10     	; 0x17a6 <GPIO_writePin+0x4e>
    179c:	8c 81       	ldd	r24, Y+4	; 0x04
    179e:	9d 81       	ldd	r25, Y+5	; 0x05
    17a0:	00 97       	sbiw	r24, 0x00	; 0
    17a2:	71 f0       	breq	.+28     	; 0x17c0 <GPIO_writePin+0x68>
    17a4:	bc c0       	rjmp	.+376    	; 0x191e <GPIO_writePin+0x1c6>
    17a6:	2c 81       	ldd	r18, Y+4	; 0x04
    17a8:	3d 81       	ldd	r19, Y+5	; 0x05
    17aa:	22 30       	cpi	r18, 0x02	; 2
    17ac:	31 05       	cpc	r19, r1
    17ae:	09 f4       	brne	.+2      	; 0x17b2 <GPIO_writePin+0x5a>
    17b0:	5f c0       	rjmp	.+190    	; 0x1870 <GPIO_writePin+0x118>
    17b2:	8c 81       	ldd	r24, Y+4	; 0x04
    17b4:	9d 81       	ldd	r25, Y+5	; 0x05
    17b6:	83 30       	cpi	r24, 0x03	; 3
    17b8:	91 05       	cpc	r25, r1
    17ba:	09 f4       	brne	.+2      	; 0x17be <GPIO_writePin+0x66>
    17bc:	85 c0       	rjmp	.+266    	; 0x18c8 <GPIO_writePin+0x170>
    17be:	af c0       	rjmp	.+350    	; 0x191e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	81 30       	cpi	r24, 0x01	; 1
    17c4:	a1 f4       	brne	.+40     	; 0x17ee <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    17c6:	ab e3       	ldi	r26, 0x3B	; 59
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	eb e3       	ldi	r30, 0x3B	; 59
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	48 2f       	mov	r20, r24
    17d2:	8a 81       	ldd	r24, Y+2	; 0x02
    17d4:	28 2f       	mov	r18, r24
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	02 2e       	mov	r0, r18
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <GPIO_writePin+0x8c>
    17e0:	88 0f       	add	r24, r24
    17e2:	99 1f       	adc	r25, r25
    17e4:	0a 94       	dec	r0
    17e6:	e2 f7       	brpl	.-8      	; 0x17e0 <GPIO_writePin+0x88>
    17e8:	84 2b       	or	r24, r20
    17ea:	8c 93       	st	X, r24
    17ec:	98 c0       	rjmp	.+304    	; 0x191e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    17ee:	ab e3       	ldi	r26, 0x3B	; 59
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	eb e3       	ldi	r30, 0x3B	; 59
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	48 2f       	mov	r20, r24
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	02 2e       	mov	r0, r18
    1806:	02 c0       	rjmp	.+4      	; 0x180c <GPIO_writePin+0xb4>
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	0a 94       	dec	r0
    180e:	e2 f7       	brpl	.-8      	; 0x1808 <GPIO_writePin+0xb0>
    1810:	80 95       	com	r24
    1812:	84 23       	and	r24, r20
    1814:	8c 93       	st	X, r24
    1816:	83 c0       	rjmp	.+262    	; 0x191e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	81 30       	cpi	r24, 0x01	; 1
    181c:	a1 f4       	brne	.+40     	; 0x1846 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    181e:	a8 e3       	ldi	r26, 0x38	; 56
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	e8 e3       	ldi	r30, 0x38	; 56
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	48 2f       	mov	r20, r24
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	28 2f       	mov	r18, r24
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	02 2e       	mov	r0, r18
    1836:	02 c0       	rjmp	.+4      	; 0x183c <GPIO_writePin+0xe4>
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	0a 94       	dec	r0
    183e:	e2 f7       	brpl	.-8      	; 0x1838 <GPIO_writePin+0xe0>
    1840:	84 2b       	or	r24, r20
    1842:	8c 93       	st	X, r24
    1844:	6c c0       	rjmp	.+216    	; 0x191e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1846:	a8 e3       	ldi	r26, 0x38	; 56
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e8 e3       	ldi	r30, 0x38	; 56
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	48 2f       	mov	r20, r24
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	02 2e       	mov	r0, r18
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <GPIO_writePin+0x10c>
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	0a 94       	dec	r0
    1866:	e2 f7       	brpl	.-8      	; 0x1860 <GPIO_writePin+0x108>
    1868:	80 95       	com	r24
    186a:	84 23       	and	r24, r20
    186c:	8c 93       	st	X, r24
    186e:	57 c0       	rjmp	.+174    	; 0x191e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	81 30       	cpi	r24, 0x01	; 1
    1874:	a1 f4       	brne	.+40     	; 0x189e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1876:	a5 e3       	ldi	r26, 0x35	; 53
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	e5 e3       	ldi	r30, 0x35	; 53
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	48 2f       	mov	r20, r24
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	02 2e       	mov	r0, r18
    188e:	02 c0       	rjmp	.+4      	; 0x1894 <GPIO_writePin+0x13c>
    1890:	88 0f       	add	r24, r24
    1892:	99 1f       	adc	r25, r25
    1894:	0a 94       	dec	r0
    1896:	e2 f7       	brpl	.-8      	; 0x1890 <GPIO_writePin+0x138>
    1898:	84 2b       	or	r24, r20
    189a:	8c 93       	st	X, r24
    189c:	40 c0       	rjmp	.+128    	; 0x191e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    189e:	a5 e3       	ldi	r26, 0x35	; 53
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	e5 e3       	ldi	r30, 0x35	; 53
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	48 2f       	mov	r20, r24
    18aa:	8a 81       	ldd	r24, Y+2	; 0x02
    18ac:	28 2f       	mov	r18, r24
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	02 2e       	mov	r0, r18
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <GPIO_writePin+0x164>
    18b8:	88 0f       	add	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	0a 94       	dec	r0
    18be:	e2 f7       	brpl	.-8      	; 0x18b8 <GPIO_writePin+0x160>
    18c0:	80 95       	com	r24
    18c2:	84 23       	and	r24, r20
    18c4:	8c 93       	st	X, r24
    18c6:	2b c0       	rjmp	.+86     	; 0x191e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    18c8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ca:	81 30       	cpi	r24, 0x01	; 1
    18cc:	a1 f4       	brne	.+40     	; 0x18f6 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    18ce:	a2 e3       	ldi	r26, 0x32	; 50
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	e2 e3       	ldi	r30, 0x32	; 50
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	48 2f       	mov	r20, r24
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	28 2f       	mov	r18, r24
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	02 2e       	mov	r0, r18
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <GPIO_writePin+0x194>
    18e8:	88 0f       	add	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	0a 94       	dec	r0
    18ee:	e2 f7       	brpl	.-8      	; 0x18e8 <GPIO_writePin+0x190>
    18f0:	84 2b       	or	r24, r20
    18f2:	8c 93       	st	X, r24
    18f4:	14 c0       	rjmp	.+40     	; 0x191e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    18f6:	a2 e3       	ldi	r26, 0x32	; 50
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	e2 e3       	ldi	r30, 0x32	; 50
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	48 2f       	mov	r20, r24
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	28 2f       	mov	r18, r24
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	02 2e       	mov	r0, r18
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <GPIO_writePin+0x1bc>
    1910:	88 0f       	add	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	0a 94       	dec	r0
    1916:	e2 f7       	brpl	.-8      	; 0x1910 <GPIO_writePin+0x1b8>
    1918:	80 95       	com	r24
    191a:	84 23       	and	r24, r20
    191c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	cf 91       	pop	r28
    192a:	df 91       	pop	r29
    192c:	08 95       	ret

0000192e <GPIO_readPin>:
 * Description:
 * Read and return the value for the  required pin, it should be logic high or logic low.
 * if the input port number or pin number are not correct, the function will return logic low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	00 d0       	rcall	.+0      	; 0x1934 <GPIO_readPin+0x6>
    1934:	00 d0       	rcall	.+0      	; 0x1936 <GPIO_readPin+0x8>
    1936:	0f 92       	push	r0
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	8a 83       	std	Y+2, r24	; 0x02
    193e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1940:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
    1942:	8a 81       	ldd	r24, Y+2	; 0x02
    1944:	84 30       	cpi	r24, 0x04	; 4
    1946:	08 f0       	brcs	.+2      	; 0x194a <GPIO_readPin+0x1c>
    1948:	84 c0       	rjmp	.+264    	; 0x1a52 <GPIO_readPin+0x124>
    194a:	8b 81       	ldd	r24, Y+3	; 0x03
    194c:	88 30       	cpi	r24, 0x08	; 8
    194e:	08 f0       	brcs	.+2      	; 0x1952 <GPIO_readPin+0x24>
    1950:	80 c0       	rjmp	.+256    	; 0x1a52 <GPIO_readPin+0x124>
	{
		/* DO NOTHING */
	}
	else
	{
		switch(port_num)
    1952:	8a 81       	ldd	r24, Y+2	; 0x02
    1954:	28 2f       	mov	r18, r24
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	3d 83       	std	Y+5, r19	; 0x05
    195a:	2c 83       	std	Y+4, r18	; 0x04
    195c:	4c 81       	ldd	r20, Y+4	; 0x04
    195e:	5d 81       	ldd	r21, Y+5	; 0x05
    1960:	41 30       	cpi	r20, 0x01	; 1
    1962:	51 05       	cpc	r21, r1
    1964:	79 f1       	breq	.+94     	; 0x19c4 <GPIO_readPin+0x96>
    1966:	8c 81       	ldd	r24, Y+4	; 0x04
    1968:	9d 81       	ldd	r25, Y+5	; 0x05
    196a:	82 30       	cpi	r24, 0x02	; 2
    196c:	91 05       	cpc	r25, r1
    196e:	34 f4       	brge	.+12     	; 0x197c <GPIO_readPin+0x4e>
    1970:	2c 81       	ldd	r18, Y+4	; 0x04
    1972:	3d 81       	ldd	r19, Y+5	; 0x05
    1974:	21 15       	cp	r18, r1
    1976:	31 05       	cpc	r19, r1
    1978:	69 f0       	breq	.+26     	; 0x1994 <GPIO_readPin+0x66>
    197a:	6b c0       	rjmp	.+214    	; 0x1a52 <GPIO_readPin+0x124>
    197c:	4c 81       	ldd	r20, Y+4	; 0x04
    197e:	5d 81       	ldd	r21, Y+5	; 0x05
    1980:	42 30       	cpi	r20, 0x02	; 2
    1982:	51 05       	cpc	r21, r1
    1984:	b9 f1       	breq	.+110    	; 0x19f4 <GPIO_readPin+0xc6>
    1986:	8c 81       	ldd	r24, Y+4	; 0x04
    1988:	9d 81       	ldd	r25, Y+5	; 0x05
    198a:	83 30       	cpi	r24, 0x03	; 3
    198c:	91 05       	cpc	r25, r1
    198e:	09 f4       	brne	.+2      	; 0x1992 <GPIO_readPin+0x64>
    1990:	49 c0       	rjmp	.+146    	; 0x1a24 <GPIO_readPin+0xf6>
    1992:	5f c0       	rjmp	.+190    	; 0x1a52 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1994:	e9 e3       	ldi	r30, 0x39	; 57
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	28 2f       	mov	r18, r24
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	88 2f       	mov	r24, r24
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	a9 01       	movw	r20, r18
    19a6:	02 c0       	rjmp	.+4      	; 0x19ac <GPIO_readPin+0x7e>
    19a8:	55 95       	asr	r21
    19aa:	47 95       	ror	r20
    19ac:	8a 95       	dec	r24
    19ae:	e2 f7       	brpl	.-8      	; 0x19a8 <GPIO_readPin+0x7a>
    19b0:	ca 01       	movw	r24, r20
    19b2:	81 70       	andi	r24, 0x01	; 1
    19b4:	90 70       	andi	r25, 0x00	; 0
    19b6:	88 23       	and	r24, r24
    19b8:	19 f0       	breq	.+6      	; 0x19c0 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	89 83       	std	Y+1, r24	; 0x01
    19be:	49 c0       	rjmp	.+146    	; 0x1a52 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19c0:	19 82       	std	Y+1, r1	; 0x01
    19c2:	47 c0       	rjmp	.+142    	; 0x1a52 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    19c4:	e6 e3       	ldi	r30, 0x36	; 54
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	88 2f       	mov	r24, r24
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	a9 01       	movw	r20, r18
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <GPIO_readPin+0xae>
    19d8:	55 95       	asr	r21
    19da:	47 95       	ror	r20
    19dc:	8a 95       	dec	r24
    19de:	e2 f7       	brpl	.-8      	; 0x19d8 <GPIO_readPin+0xaa>
    19e0:	ca 01       	movw	r24, r20
    19e2:	81 70       	andi	r24, 0x01	; 1
    19e4:	90 70       	andi	r25, 0x00	; 0
    19e6:	88 23       	and	r24, r24
    19e8:	19 f0       	breq	.+6      	; 0x19f0 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	89 83       	std	Y+1, r24	; 0x01
    19ee:	31 c0       	rjmp	.+98     	; 0x1a52 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19f0:	19 82       	std	Y+1, r1	; 0x01
    19f2:	2f c0       	rjmp	.+94     	; 0x1a52 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    19f4:	e3 e3       	ldi	r30, 0x33	; 51
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	28 2f       	mov	r18, r24
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1a00:	88 2f       	mov	r24, r24
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	a9 01       	movw	r20, r18
    1a06:	02 c0       	rjmp	.+4      	; 0x1a0c <GPIO_readPin+0xde>
    1a08:	55 95       	asr	r21
    1a0a:	47 95       	ror	r20
    1a0c:	8a 95       	dec	r24
    1a0e:	e2 f7       	brpl	.-8      	; 0x1a08 <GPIO_readPin+0xda>
    1a10:	ca 01       	movw	r24, r20
    1a12:	81 70       	andi	r24, 0x01	; 1
    1a14:	90 70       	andi	r25, 0x00	; 0
    1a16:	88 23       	and	r24, r24
    1a18:	19 f0       	breq	.+6      	; 0x1a20 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	89 83       	std	Y+1, r24	; 0x01
    1a1e:	19 c0       	rjmp	.+50     	; 0x1a52 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a20:	19 82       	std	Y+1, r1	; 0x01
    1a22:	17 c0       	rjmp	.+46     	; 0x1a52 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1a24:	e0 e3       	ldi	r30, 0x30	; 48
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	28 2f       	mov	r18, r24
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	88 2f       	mov	r24, r24
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	a9 01       	movw	r20, r18
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <GPIO_readPin+0x10e>
    1a38:	55 95       	asr	r21
    1a3a:	47 95       	ror	r20
    1a3c:	8a 95       	dec	r24
    1a3e:	e2 f7       	brpl	.-8      	; 0x1a38 <GPIO_readPin+0x10a>
    1a40:	ca 01       	movw	r24, r20
    1a42:	81 70       	andi	r24, 0x01	; 1
    1a44:	90 70       	andi	r25, 0x00	; 0
    1a46:	88 23       	and	r24, r24
    1a48:	19 f0       	breq	.+6      	; 0x1a50 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	89 83       	std	Y+1, r24	; 0x01
    1a4e:	01 c0       	rjmp	.+2      	; 0x1a52 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a50:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_value;
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	cf 91       	pop	r28
    1a60:	df 91       	pop	r29
    1a62:	08 95       	ret

00001a64 <GPIO_setupPortDirection>:
 * if the direction value id PORT_INPUT all pins in the port should be input pins.
 * if the direction value id PORT_OUTPUT all pins in the port should be output pins.
 * if the input port number is not correct, the function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1a64:	df 93       	push	r29
    1a66:	cf 93       	push	r28
    1a68:	00 d0       	rcall	.+0      	; 0x1a6a <GPIO_setupPortDirection+0x6>
    1a6a:	00 d0       	rcall	.+0      	; 0x1a6c <GPIO_setupPortDirection+0x8>
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
    1a70:	89 83       	std	Y+1, r24	; 0x01
    1a72:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	84 30       	cpi	r24, 0x04	; 4
    1a78:	90 f5       	brcc	.+100    	; 0x1ade <GPIO_setupPortDirection+0x7a>
	{
		/* DO NOTHING */
	}
	else
	{
		switch(port_num)
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	3c 83       	std	Y+4, r19	; 0x04
    1a82:	2b 83       	std	Y+3, r18	; 0x03
    1a84:	8b 81       	ldd	r24, Y+3	; 0x03
    1a86:	9c 81       	ldd	r25, Y+4	; 0x04
    1a88:	81 30       	cpi	r24, 0x01	; 1
    1a8a:	91 05       	cpc	r25, r1
    1a8c:	d1 f0       	breq	.+52     	; 0x1ac2 <GPIO_setupPortDirection+0x5e>
    1a8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a90:	3c 81       	ldd	r19, Y+4	; 0x04
    1a92:	22 30       	cpi	r18, 0x02	; 2
    1a94:	31 05       	cpc	r19, r1
    1a96:	2c f4       	brge	.+10     	; 0x1aa2 <GPIO_setupPortDirection+0x3e>
    1a98:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9c:	00 97       	sbiw	r24, 0x00	; 0
    1a9e:	61 f0       	breq	.+24     	; 0x1ab8 <GPIO_setupPortDirection+0x54>
    1aa0:	1e c0       	rjmp	.+60     	; 0x1ade <GPIO_setupPortDirection+0x7a>
    1aa2:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa4:	3c 81       	ldd	r19, Y+4	; 0x04
    1aa6:	22 30       	cpi	r18, 0x02	; 2
    1aa8:	31 05       	cpc	r19, r1
    1aaa:	81 f0       	breq	.+32     	; 0x1acc <GPIO_setupPortDirection+0x68>
    1aac:	8b 81       	ldd	r24, Y+3	; 0x03
    1aae:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab0:	83 30       	cpi	r24, 0x03	; 3
    1ab2:	91 05       	cpc	r25, r1
    1ab4:	81 f0       	breq	.+32     	; 0x1ad6 <GPIO_setupPortDirection+0x72>
    1ab6:	13 c0       	rjmp	.+38     	; 0x1ade <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1ab8:	ea e3       	ldi	r30, 0x3A	; 58
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	8a 81       	ldd	r24, Y+2	; 0x02
    1abe:	80 83       	st	Z, r24
    1ac0:	0e c0       	rjmp	.+28     	; 0x1ade <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1ac2:	e7 e3       	ldi	r30, 0x37	; 55
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac8:	80 83       	st	Z, r24
    1aca:	09 c0       	rjmp	.+18     	; 0x1ade <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1acc:	e4 e3       	ldi	r30, 0x34	; 52
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	80 83       	st	Z, r24
    1ad4:	04 c0       	rjmp	.+8      	; 0x1ade <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1ad6:	e1 e3       	ldi	r30, 0x31	; 49
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	8a 81       	ldd	r24, Y+2	; 0x02
    1adc:	80 83       	st	Z, r24
			break;
		}
	}
}
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	cf 91       	pop	r28
    1ae8:	df 91       	pop	r29
    1aea:	08 95       	ret

00001aec <GPIO_writePort>:
 * If any pin in port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * if the input port number is not correct, the function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1aec:	df 93       	push	r29
    1aee:	cf 93       	push	r28
    1af0:	00 d0       	rcall	.+0      	; 0x1af2 <GPIO_writePort+0x6>
    1af2:	00 d0       	rcall	.+0      	; 0x1af4 <GPIO_writePort+0x8>
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
    1af8:	89 83       	std	Y+1, r24	; 0x01
    1afa:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
    1afe:	84 30       	cpi	r24, 0x04	; 4
    1b00:	90 f5       	brcc	.+100    	; 0x1b66 <GPIO_writePort+0x7a>
	{
		/* Do nothing */
	}
	else
	{
		switch(port_num)
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
    1b04:	28 2f       	mov	r18, r24
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	3c 83       	std	Y+4, r19	; 0x04
    1b0a:	2b 83       	std	Y+3, r18	; 0x03
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b10:	81 30       	cpi	r24, 0x01	; 1
    1b12:	91 05       	cpc	r25, r1
    1b14:	d1 f0       	breq	.+52     	; 0x1b4a <GPIO_writePort+0x5e>
    1b16:	2b 81       	ldd	r18, Y+3	; 0x03
    1b18:	3c 81       	ldd	r19, Y+4	; 0x04
    1b1a:	22 30       	cpi	r18, 0x02	; 2
    1b1c:	31 05       	cpc	r19, r1
    1b1e:	2c f4       	brge	.+10     	; 0x1b2a <GPIO_writePort+0x3e>
    1b20:	8b 81       	ldd	r24, Y+3	; 0x03
    1b22:	9c 81       	ldd	r25, Y+4	; 0x04
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	61 f0       	breq	.+24     	; 0x1b40 <GPIO_writePort+0x54>
    1b28:	1e c0       	rjmp	.+60     	; 0x1b66 <GPIO_writePort+0x7a>
    1b2a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b2c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b2e:	22 30       	cpi	r18, 0x02	; 2
    1b30:	31 05       	cpc	r19, r1
    1b32:	81 f0       	breq	.+32     	; 0x1b54 <GPIO_writePort+0x68>
    1b34:	8b 81       	ldd	r24, Y+3	; 0x03
    1b36:	9c 81       	ldd	r25, Y+4	; 0x04
    1b38:	83 30       	cpi	r24, 0x03	; 3
    1b3a:	91 05       	cpc	r25, r1
    1b3c:	81 f0       	breq	.+32     	; 0x1b5e <GPIO_writePort+0x72>
    1b3e:	13 c0       	rjmp	.+38     	; 0x1b66 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1b40:	eb e3       	ldi	r30, 0x3B	; 59
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	80 83       	st	Z, r24
    1b48:	0e c0       	rjmp	.+28     	; 0x1b66 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1b4a:	e8 e3       	ldi	r30, 0x38	; 56
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b50:	80 83       	st	Z, r24
    1b52:	09 c0       	rjmp	.+18     	; 0x1b66 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1b54:	e5 e3       	ldi	r30, 0x35	; 53
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	80 83       	st	Z, r24
    1b5c:	04 c0       	rjmp	.+8      	; 0x1b66 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1b5e:	e2 e3       	ldi	r30, 0x32	; 50
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	cf 91       	pop	r28
    1b70:	df 91       	pop	r29
    1b72:	08 95       	ret

00001b74 <GPIO_readPort>:
 * Description:
 * Read and return the value of the required port.
 * If the input port number is not correct, the function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	00 d0       	rcall	.+0      	; 0x1b7a <GPIO_readPort+0x6>
    1b7a:	00 d0       	rcall	.+0      	; 0x1b7c <GPIO_readPort+0x8>
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
    1b80:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_value = 0;
    1b82:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	84 30       	cpi	r24, 0x04	; 4
    1b88:	90 f5       	brcc	.+100    	; 0x1bee <GPIO_readPort+0x7a>
	{
		/* Do nothing */
	}
	else
	{
		switch(port_num)
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	3c 83       	std	Y+4, r19	; 0x04
    1b92:	2b 83       	std	Y+3, r18	; 0x03
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	9c 81       	ldd	r25, Y+4	; 0x04
    1b98:	81 30       	cpi	r24, 0x01	; 1
    1b9a:	91 05       	cpc	r25, r1
    1b9c:	d1 f0       	breq	.+52     	; 0x1bd2 <GPIO_readPort+0x5e>
    1b9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba2:	22 30       	cpi	r18, 0x02	; 2
    1ba4:	31 05       	cpc	r19, r1
    1ba6:	2c f4       	brge	.+10     	; 0x1bb2 <GPIO_readPort+0x3e>
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bac:	00 97       	sbiw	r24, 0x00	; 0
    1bae:	61 f0       	breq	.+24     	; 0x1bc8 <GPIO_readPort+0x54>
    1bb0:	1e c0       	rjmp	.+60     	; 0x1bee <GPIO_readPort+0x7a>
    1bb2:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb4:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb6:	22 30       	cpi	r18, 0x02	; 2
    1bb8:	31 05       	cpc	r19, r1
    1bba:	81 f0       	breq	.+32     	; 0x1bdc <GPIO_readPort+0x68>
    1bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc0:	83 30       	cpi	r24, 0x03	; 3
    1bc2:	91 05       	cpc	r25, r1
    1bc4:	81 f0       	breq	.+32     	; 0x1be6 <GPIO_readPort+0x72>
    1bc6:	13 c0       	rjmp	.+38     	; 0x1bee <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			port_value = PINA;
    1bc8:	e9 e3       	ldi	r30, 0x39	; 57
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	89 83       	std	Y+1, r24	; 0x01
    1bd0:	0e c0       	rjmp	.+28     	; 0x1bee <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			port_value = PINB;
    1bd2:	e6 e3       	ldi	r30, 0x36	; 54
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	89 83       	std	Y+1, r24	; 0x01
    1bda:	09 c0       	rjmp	.+18     	; 0x1bee <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			port_value = PINC;
    1bdc:	e3 e3       	ldi	r30, 0x33	; 51
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	89 83       	std	Y+1, r24	; 0x01
    1be4:	04 c0       	rjmp	.+8      	; 0x1bee <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			port_value = PIND;
    1be6:	e0 e3       	ldi	r30, 0x30	; 48
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return port_value;
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	08 95       	ret

00001bfe <I2C_init>:
 * Description:
 * This function enable TWI (I2C) and give the device an address
 * It also select the prescaler for the frequency that generated from master
 */
void I2C_init(const I2C_ConfigType *config_ptr)
{
    1bfe:	cf 92       	push	r12
    1c00:	df 92       	push	r13
    1c02:	ef 92       	push	r14
    1c04:	ff 92       	push	r15
    1c06:	0f 93       	push	r16
    1c08:	1f 93       	push	r17
    1c0a:	df 93       	push	r29
    1c0c:	cf 93       	push	r28
    1c0e:	00 d0       	rcall	.+0      	; 0x1c10 <I2C_init+0x12>
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
    1c14:	9a 83       	std	Y+2, r25	; 0x02
    1c16:	89 83       	std	Y+1, r24	; 0x01
	 * Data  transfer rate = 400Kbs (F_SCL)
	 * F_SCL = F_CPU/(16 + 2* TBWR * POW(4, TWPS))
	 * TWPS0 = 0, TWPS1 = 0. Prescaler value = 1
	 * So the TWBR value will be equal to 2
	 */
	TWBR = ((F_CPU/config_ptr->mode) - 16) / (2 * power(4, config_ptr->prescaler));
    1c18:	cc 24       	eor	r12, r12
    1c1a:	dd 24       	eor	r13, r13
    1c1c:	68 94       	set
    1c1e:	c5 f8       	bld	r12, 5
    1c20:	e9 81       	ldd	r30, Y+1	; 0x01
    1c22:	fa 81       	ldd	r31, Y+2	; 0x02
    1c24:	21 81       	ldd	r18, Z+1	; 0x01
    1c26:	32 81       	ldd	r19, Z+2	; 0x02
    1c28:	43 81       	ldd	r20, Z+3	; 0x03
    1c2a:	54 81       	ldd	r21, Z+4	; 0x04
    1c2c:	80 e4       	ldi	r24, 0x40	; 64
    1c2e:	92 e4       	ldi	r25, 0x42	; 66
    1c30:	af e0       	ldi	r26, 0x0F	; 15
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	bc 01       	movw	r22, r24
    1c36:	cd 01       	movw	r24, r26
    1c38:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__udivmodsi4>
    1c3c:	da 01       	movw	r26, r20
    1c3e:	c9 01       	movw	r24, r18
    1c40:	0f 2e       	mov	r0, r31
    1c42:	f0 ef       	ldi	r31, 0xF0	; 240
    1c44:	ef 2e       	mov	r14, r31
    1c46:	ff ef       	ldi	r31, 0xFF	; 255
    1c48:	ff 2e       	mov	r15, r31
    1c4a:	ff ef       	ldi	r31, 0xFF	; 255
    1c4c:	0f 2f       	mov	r16, r31
    1c4e:	ff ef       	ldi	r31, 0xFF	; 255
    1c50:	1f 2f       	mov	r17, r31
    1c52:	f0 2d       	mov	r31, r0
    1c54:	e8 0e       	add	r14, r24
    1c56:	f9 1e       	adc	r15, r25
    1c58:	0a 1f       	adc	r16, r26
    1c5a:	1b 1f       	adc	r17, r27
    1c5c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c5e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c60:	90 81       	ld	r25, Z
    1c62:	84 e0       	ldi	r24, 0x04	; 4
    1c64:	69 2f       	mov	r22, r25
    1c66:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <power>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	9c 01       	movw	r18, r24
    1c70:	ad 01       	movw	r20, r26
    1c72:	22 0f       	add	r18, r18
    1c74:	33 1f       	adc	r19, r19
    1c76:	44 1f       	adc	r20, r20
    1c78:	55 1f       	adc	r21, r21
    1c7a:	c8 01       	movw	r24, r16
    1c7c:	b7 01       	movw	r22, r14
    1c7e:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__udivmodsi4>
    1c82:	da 01       	movw	r26, r20
    1c84:	c9 01       	movw	r24, r18
    1c86:	f6 01       	movw	r30, r12
    1c88:	80 83       	st	Z, r24

	TWSR = (TWSR & 0xFC) | (config_ptr->prescaler & 0x03); /* TWPS value (Prescaler)*/
    1c8a:	a1 e2       	ldi	r26, 0x21	; 33
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	e1 e2       	ldi	r30, 0x21	; 33
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	98 2f       	mov	r25, r24
    1c96:	9c 7f       	andi	r25, 0xFC	; 252
    1c98:	e9 81       	ldd	r30, Y+1	; 0x01
    1c9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c9c:	80 81       	ld	r24, Z
    1c9e:	83 70       	andi	r24, 0x03	; 3
    1ca0:	89 2b       	or	r24, r25
    1ca2:	8c 93       	st	X, r24

	TWCR = (1<< TWEN); /* The TWEN bit enables I2C operation and activates the I2C interface */
    1ca4:	e6 e5       	ldi	r30, 0x56	; 86
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	84 e0       	ldi	r24, 0x04	; 4
    1caa:	80 83       	st	Z, r24

	TWAR = (TWAR & 0xFE) | ((1 & 0xEF)<< 1); /* Give Address number 1 to the device */
    1cac:	a2 e2       	ldi	r26, 0x22	; 34
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	e2 e2       	ldi	r30, 0x22	; 34
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	8c 7f       	andi	r24, 0xFC	; 252
    1cb8:	82 60       	ori	r24, 0x02	; 2
    1cba:	8c 93       	st	X, r24
}
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	cf 91       	pop	r28
    1cc2:	df 91       	pop	r29
    1cc4:	1f 91       	pop	r17
    1cc6:	0f 91       	pop	r16
    1cc8:	ff 90       	pop	r15
    1cca:	ef 90       	pop	r14
    1ccc:	df 90       	pop	r13
    1cce:	cf 90       	pop	r12
    1cd0:	08 95       	ret

00001cd2 <I2C_start>:
 * Description:
 * Clear the flag and enable again the TWI
 * Activate start bit and wait for it to finish start process
 */
void I2C_start(void)
{
    1cd2:	df 93       	push	r29
    1cd4:	cf 93       	push	r28
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<< TWEN);
    1cda:	e6 e5       	ldi	r30, 0x56	; 86
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	84 ea       	ldi	r24, 0xA4	; 164
    1ce0:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT));
    1ce2:	e6 e5       	ldi	r30, 0x56	; 86
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	88 23       	and	r24, r24
    1cea:	dc f7       	brge	.-10     	; 0x1ce2 <I2C_start+0x10>
}
    1cec:	cf 91       	pop	r28
    1cee:	df 91       	pop	r29
    1cf0:	08 95       	ret

00001cf2 <I2C_stop>:
 * Description:
 * Clear the flag and enable again the TWI
 * Activate stop bit and wait for it to finish stop process
 */
void I2C_stop(void)
{
    1cf2:	df 93       	push	r29
    1cf4:	cf 93       	push	r28
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<< TWEN);
    1cfa:	e6 e5       	ldi	r30, 0x56	; 86
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	84 e9       	ldi	r24, 0x94	; 148
    1d00:	80 83       	st	Z, r24
}
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	08 95       	ret

00001d08 <I2C_writeByte>:
 * Description:
 * Clear the flag and enable again the TWI
 * Save the required data in TWDR register and wait for it to finish this process
 */
void I2C_writeByte(uint8 data)
{
    1d08:	df 93       	push	r29
    1d0a:	cf 93       	push	r28
    1d0c:	0f 92       	push	r0
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
    1d12:	89 83       	std	Y+1, r24	; 0x01
	TWDR = data; /* Save the required data in TWDR register */
    1d14:	e3 e2       	ldi	r30, 0x23	; 35
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	80 83       	st	Z, r24

    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1<<TWINT) | (1<< TWEN);
    1d1c:	e6 e5       	ldi	r30, 0x56	; 86
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	84 e8       	ldi	r24, 0x84	; 132
    1d22:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (waiting for the end of write data process) */
	while (BIT_IS_CLEAR(TWCR, TWINT));
    1d24:	e6 e5       	ldi	r30, 0x56	; 86
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	88 23       	and	r24, r24
    1d2c:	dc f7       	brge	.-10     	; 0x1d24 <I2C_writeByte+0x1c>
}
    1d2e:	0f 90       	pop	r0
    1d30:	cf 91       	pop	r28
    1d32:	df 91       	pop	r29
    1d34:	08 95       	ret

00001d36 <I2C_readByteWithACK>:
 * Description:
 * Clear the flag, enable again the TWI and Enable Acknowledge bit
 * Return the data from TWDR register after waiting for read process
 */
uint8 I2C_readByteWithACK(void)
{
    1d36:	df 93       	push	r29
    1d38:	cf 93       	push	r28
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * Enable Acknowledge bit
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<< TWEN);
    1d3e:	e6 e5       	ldi	r30, 0x56	; 86
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	84 ec       	ldi	r24, 0xC4	; 196
    1d44:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (waiting for the end of read data process) */
	while (BIT_IS_CLEAR(TWCR, TWINT));
    1d46:	e6 e5       	ldi	r30, 0x56	; 86
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	88 23       	and	r24, r24
    1d4e:	dc f7       	brge	.-10     	; 0x1d46 <I2C_readByteWithACK+0x10>

	return TWDR; /* Return the data */
    1d50:	e3 e2       	ldi	r30, 0x23	; 35
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	80 81       	ld	r24, Z
}
    1d56:	cf 91       	pop	r28
    1d58:	df 91       	pop	r29
    1d5a:	08 95       	ret

00001d5c <I2C_readByteWithNACK>:
 * Description:
 * Clear the flag, enable again the TWI and Disable Acknowledge bit
 * Return the data from TWDR register after waiting for read process
 */
uint8 I2C_readByteWithNACK(void)
{
    1d5c:	df 93       	push	r29
    1d5e:	cf 93       	push	r28
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * Disable Acknowledge bit
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1<<TWINT) | (1<< TWEN);
    1d64:	e6 e5       	ldi	r30, 0x56	; 86
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	84 e8       	ldi	r24, 0x84	; 132
    1d6a:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (waiting for the end of read data process) */
	while (BIT_IS_CLEAR(TWCR, TWINT));
    1d6c:	e6 e5       	ldi	r30, 0x56	; 86
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	88 23       	and	r24, r24
    1d74:	dc f7       	brge	.-10     	; 0x1d6c <I2C_readByteWithNACK+0x10>

	return TWDR; /* Return the data */
    1d76:	e3 e2       	ldi	r30, 0x23	; 35
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
}
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <I2C_getStatus>:
/*
 * Description:
 * Read the status of the TWI logic
 */
uint8 I2C_getStatus(void)
{
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	0f 92       	push	r0
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
	uint8 statue;
	statue = (TWSR & 0xF8); /* get only the last 5 bits */
    1d8c:	e1 e2       	ldi	r30, 0x21	; 33
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	88 7f       	andi	r24, 0xF8	; 248
    1d94:	89 83       	std	Y+1, r24	; 0x01

	return statue; /* Return status value */
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d98:	0f 90       	pop	r0
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	08 95       	ret

00001da0 <power>:


static volatile uint32 power(uint8 base, uint8 power)
{
    1da0:	df 93       	push	r29
    1da2:	cf 93       	push	r28
    1da4:	00 d0       	rcall	.+0      	; 0x1da6 <power+0x6>
    1da6:	00 d0       	rcall	.+0      	; 0x1da8 <power+0x8>
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
    1dac:	8b 83       	std	Y+3, r24	; 0x03
    1dae:	6c 83       	std	Y+4, r22	; 0x04
	uint8 result = 1, i;
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	8a 83       	std	Y+2, r24	; 0x02
	for(i = 0; i < power; i++)
    1db4:	19 82       	std	Y+1, r1	; 0x01
    1db6:	09 c0       	rjmp	.+18     	; 0x1dca <power+0x2a>
	{
		result = result * base;
    1db8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dba:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbc:	98 9f       	mul	r25, r24
    1dbe:	80 2d       	mov	r24, r0
    1dc0:	11 24       	eor	r1, r1
    1dc2:	8a 83       	std	Y+2, r24	; 0x02


static volatile uint32 power(uint8 base, uint8 power)
{
	uint8 result = 1, i;
	for(i = 0; i < power; i++)
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
    1dc6:	8f 5f       	subi	r24, 0xFF	; 255
    1dc8:	89 83       	std	Y+1, r24	; 0x01
    1dca:	99 81       	ldd	r25, Y+1	; 0x01
    1dcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dce:	98 17       	cp	r25, r24
    1dd0:	98 f3       	brcs	.-26     	; 0x1db8 <power+0x18>
	{
		result = result * base;
	}
	return result;
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	88 2f       	mov	r24, r24
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	a0 e0       	ldi	r26, 0x00	; 0
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
}
    1ddc:	bc 01       	movw	r22, r24
    1dde:	cd 01       	movw	r24, r26
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	cf 91       	pop	r28
    1dea:	df 91       	pop	r29
    1dec:	08 95       	ret

00001dee <PWM_Timer2_init>:
/*
 * Description:
 * Generate PWM with wanted speed percentage.
 */
void PWM_Timer2_init(uint8 duty_cycle)
{
    1dee:	0f 93       	push	r16
    1df0:	1f 93       	push	r17
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	0f 92       	push	r0
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
    1dfc:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = 0; /* Initial value */
    1dfe:	e4 e4       	ldi	r30, 0x44	; 68
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	10 82       	st	Z, r1

	OCR2 = 255 * (duty_cycle * 0.01); /* Set Compare value */
    1e04:	03 e4       	ldi	r16, 0x43	; 67
    1e06:	10 e0       	ldi	r17, 0x00	; 0
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
    1e0a:	88 2f       	mov	r24, r24
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	aa 27       	eor	r26, r26
    1e10:	97 fd       	sbrc	r25, 7
    1e12:	a0 95       	com	r26
    1e14:	ba 2f       	mov	r27, r26
    1e16:	bc 01       	movw	r22, r24
    1e18:	cd 01       	movw	r24, r26
    1e1a:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	bc 01       	movw	r22, r24
    1e24:	cd 01       	movw	r24, r26
    1e26:	2a e0       	ldi	r18, 0x0A	; 10
    1e28:	37 ed       	ldi	r19, 0xD7	; 215
    1e2a:	43 e2       	ldi	r20, 0x23	; 35
    1e2c:	5c e3       	ldi	r21, 0x3C	; 60
    1e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	bc 01       	movw	r22, r24
    1e38:	cd 01       	movw	r24, r26
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	4f e7       	ldi	r20, 0x7F	; 127
    1e40:	53 e4       	ldi	r21, 0x43	; 67
    1e42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e46:	dc 01       	movw	r26, r24
    1e48:	cb 01       	movw	r24, r22
    1e4a:	bc 01       	movw	r22, r24
    1e4c:	cd 01       	movw	r24, r26
    1e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	f8 01       	movw	r30, r16
    1e58:	80 83       	st	Z, r24

	DDRB = DDRB | (1<<EN_PIN_ID);
    1e5a:	a7 e3       	ldi	r26, 0x37	; 55
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	e7 e3       	ldi	r30, 0x37	; 55
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	88 60       	ori	r24, 0x08	; 8
    1e66:	8c 93       	st	X, r24
	/*
	 * FOC0 = 0 (because PWM is is used)
	 * COM00 = 0, COM01 = 1 (Non-inveting mode)
	 * CS00 =0 CS01 = 1 CS02 = 0 (F_CPU/8)
	 */
	TCCR2 = (1<<WGM21) | (1<<WGM20) | (1<<COM21) | (1<<CS21);
    1e68:	e5 e4       	ldi	r30, 0x45	; 69
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	8a e6       	ldi	r24, 0x6A	; 106
    1e6e:	80 83       	st	Z, r24
}
    1e70:	0f 90       	pop	r0
    1e72:	cf 91       	pop	r28
    1e74:	df 91       	pop	r29
    1e76:	1f 91       	pop	r17
    1e78:	0f 91       	pop	r16
    1e7a:	08 95       	ret

00001e7c <TIMER_init>:
/*
 * Description:
 * Initiate the timer with any mode required (CTC OR Normal) mode with required frequency.
 */
void TIMER_init(TIMER0_ConfigType *config_ptr)
{
    1e7c:	df 93       	push	r29
    1e7e:	cf 93       	push	r28
    1e80:	00 d0       	rcall	.+0      	; 0x1e82 <TIMER_init+0x6>
    1e82:	cd b7       	in	r28, 0x3d	; 61
    1e84:	de b7       	in	r29, 0x3e	; 62
    1e86:	9a 83       	std	Y+2, r25	; 0x02
    1e88:	89 83       	std	Y+1, r24	; 0x01
	/*************************************************************************
	 								Timer0
	 *************************************************************************/
	TCCR0 |= (1<< FOC0); /* The FOC0 bit is only active when the WGM00 bit specifies a non-PWM mode */
    1e8a:	a3 e5       	ldi	r26, 0x53	; 83
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	e3 e5       	ldi	r30, 0x53	; 83
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	80 68       	ori	r24, 0x80	; 128
    1e96:	8c 93       	st	X, r24
	/* Select wave generation mode */
	TCCR0 = (TCCR0 & 0xB7) | ((((config_ptr->waveGenerationMode & 0x02)>>1)<<6) | ((config_ptr->waveGenerationMode & 0x01)<<3));
    1e98:	a3 e5       	ldi	r26, 0x53	; 83
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	e3 e5       	ldi	r30, 0x53	; 83
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	38 2f       	mov	r19, r24
    1ea4:	37 7b       	andi	r19, 0xB7	; 183
    1ea6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eaa:	80 81       	ld	r24, Z
    1eac:	88 2f       	mov	r24, r24
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	82 70       	andi	r24, 0x02	; 2
    1eb2:	90 70       	andi	r25, 0x00	; 0
    1eb4:	95 95       	asr	r25
    1eb6:	87 95       	ror	r24
    1eb8:	00 24       	eor	r0, r0
    1eba:	96 95       	lsr	r25
    1ebc:	87 95       	ror	r24
    1ebe:	07 94       	ror	r0
    1ec0:	96 95       	lsr	r25
    1ec2:	87 95       	ror	r24
    1ec4:	07 94       	ror	r0
    1ec6:	98 2f       	mov	r25, r24
    1ec8:	80 2d       	mov	r24, r0
    1eca:	28 2f       	mov	r18, r24
    1ecc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ece:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed0:	80 81       	ld	r24, Z
    1ed2:	88 2f       	mov	r24, r24
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	81 70       	andi	r24, 0x01	; 1
    1ed8:	90 70       	andi	r25, 0x00	; 0
    1eda:	88 0f       	add	r24, r24
    1edc:	99 1f       	adc	r25, r25
    1ede:	88 0f       	add	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	88 0f       	add	r24, r24
    1ee4:	99 1f       	adc	r25, r25
    1ee6:	82 2b       	or	r24, r18
    1ee8:	83 2b       	or	r24, r19
    1eea:	8c 93       	st	X, r24
	/* Select Compare Match Output Mode*/
	TCCR0 = (TCCR0 & 0xCF) | ((config_ptr->compareMatchOutputMode & 0x03)<<4);
    1eec:	a3 e5       	ldi	r26, 0x53	; 83
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	e3 e5       	ldi	r30, 0x53	; 83
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	28 2f       	mov	r18, r24
    1ef8:	2f 7c       	andi	r18, 0xCF	; 207
    1efa:	e9 81       	ldd	r30, Y+1	; 0x01
    1efc:	fa 81       	ldd	r31, Y+2	; 0x02
    1efe:	81 81       	ldd	r24, Z+1	; 0x01
    1f00:	88 2f       	mov	r24, r24
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	83 70       	andi	r24, 0x03	; 3
    1f06:	90 70       	andi	r25, 0x00	; 0
    1f08:	82 95       	swap	r24
    1f0a:	92 95       	swap	r25
    1f0c:	90 7f       	andi	r25, 0xF0	; 240
    1f0e:	98 27       	eor	r25, r24
    1f10:	80 7f       	andi	r24, 0xF0	; 240
    1f12:	98 27       	eor	r25, r24
    1f14:	82 2b       	or	r24, r18
    1f16:	8c 93       	st	X, r24

	/* Select prescaler */
	TCCR0 = (TCCR0 & 0xF8) | ((config_ptr->prescaler & 0x07)<<0);
    1f18:	a3 e5       	ldi	r26, 0x53	; 83
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	e3 e5       	ldi	r30, 0x53	; 83
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	98 2f       	mov	r25, r24
    1f24:	98 7f       	andi	r25, 0xF8	; 248
    1f26:	e9 81       	ldd	r30, Y+1	; 0x01
    1f28:	fa 81       	ldd	r31, Y+2	; 0x02
    1f2a:	82 81       	ldd	r24, Z+2	; 0x02
    1f2c:	87 70       	andi	r24, 0x07	; 7
    1f2e:	89 2b       	or	r24, r25
    1f30:	8c 93       	st	X, r24

	TCNT0 = 0;     					/*Set Timer initial value to 0*/
    1f32:	e2 e5       	ldi	r30, 0x52	; 82
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	10 82       	st	Z, r1
	OCR0  = config_ptr->CTC_VALUE;  /*Set Compare Value*/
    1f38:	ac e5       	ldi	r26, 0x5C	; 92
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f40:	85 81       	ldd	r24, Z+5	; 0x05
    1f42:	96 81       	ldd	r25, Z+6	; 0x06
    1f44:	8c 93       	st	X, r24
	TIMSK = (TIMSK & 0xFE) | ((config_ptr->OVERFLOW_Interrupt & 0x01)<<0); /*Enable Timer Overflow Interrupt*/
    1f46:	a9 e5       	ldi	r26, 0x59	; 89
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	e9 e5       	ldi	r30, 0x59	; 89
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	98 2f       	mov	r25, r24
    1f52:	9e 7f       	andi	r25, 0xFE	; 254
    1f54:	e9 81       	ldd	r30, Y+1	; 0x01
    1f56:	fa 81       	ldd	r31, Y+2	; 0x02
    1f58:	84 81       	ldd	r24, Z+4	; 0x04
    1f5a:	81 70       	andi	r24, 0x01	; 1
    1f5c:	89 2b       	or	r24, r25
    1f5e:	8c 93       	st	X, r24
	TIMSK = (TIMSK & 0xFD) | ((config_ptr->CTC_Interrupt & 0x01)<<1);   /*Enable Timer Compare Interrupt*/
    1f60:	a9 e5       	ldi	r26, 0x59	; 89
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	e9 e5       	ldi	r30, 0x59	; 89
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	28 2f       	mov	r18, r24
    1f6c:	2d 7f       	andi	r18, 0xFD	; 253
    1f6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f70:	fa 81       	ldd	r31, Y+2	; 0x02
    1f72:	83 81       	ldd	r24, Z+3	; 0x03
    1f74:	88 2f       	mov	r24, r24
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	81 70       	andi	r24, 0x01	; 1
    1f7a:	90 70       	andi	r25, 0x00	; 0
    1f7c:	88 0f       	add	r24, r24
    1f7e:	99 1f       	adc	r25, r25
    1f80:	82 2b       	or	r24, r18
    1f82:	8c 93       	st	X, r24

}
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	cf 91       	pop	r28
    1f8a:	df 91       	pop	r29
    1f8c:	08 95       	ret

00001f8e <TIMER_setCallBack>:
/*
 * Description:
 * This function will call a required function to do a cretin thing when the timer finish counting.
 */
void TIMER_setCallBack(void(*a_ptr)(void))
{
    1f8e:	df 93       	push	r29
    1f90:	cf 93       	push	r28
    1f92:	00 d0       	rcall	.+0      	; 0x1f94 <TIMER_setCallBack+0x6>
    1f94:	cd b7       	in	r28, 0x3d	; 61
    1f96:	de b7       	in	r29, 0x3e	; 62
    1f98:	9a 83       	std	Y+2, r25	; 0x02
    1f9a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
    1f9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa0:	90 93 7b 01 	sts	0x017B, r25
    1fa4:	80 93 7a 01 	sts	0x017A, r24
}
    1fa8:	0f 90       	pop	r0
    1faa:	0f 90       	pop	r0
    1fac:	cf 91       	pop	r28
    1fae:	df 91       	pop	r29
    1fb0:	08 95       	ret

00001fb2 <TIMER_deinit>:
/*
 * Description:
 * Deactivate all registers in the timer
 */
void TIMER_deinit(void)
{
    1fb2:	df 93       	push	r29
    1fb4:	cf 93       	push	r28
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
	/*************************************************************************
	  						Clear All Timer0 Registers
	 *************************************************************************/
	TCCR0 = 0;
    1fba:	e3 e5       	ldi	r30, 0x53	; 83
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	10 82       	st	Z, r1
	TCNT0 = 0;
    1fc0:	e2 e5       	ldi	r30, 0x52	; 82
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	10 82       	st	Z, r1
	OCR0 = 0;
    1fc6:	ec e5       	ldi	r30, 0x5C	; 92
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	10 82       	st	Z, r1
	/* Disable interrupt for both normal and compare mode */
	TIMSK &= ~(1<< TOIE0) & (1<< OCIE0);;
    1fcc:	a9 e5       	ldi	r26, 0x59	; 89
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	e9 e5       	ldi	r30, 0x59	; 89
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	82 70       	andi	r24, 0x02	; 2
    1fd8:	8c 93       	st	X, r24
}
    1fda:	cf 91       	pop	r28
    1fdc:	df 91       	pop	r29
    1fde:	08 95       	ret

00001fe0 <__vector_9>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER0_OVF_vect)
{
    1fe0:	1f 92       	push	r1
    1fe2:	0f 92       	push	r0
    1fe4:	0f b6       	in	r0, 0x3f	; 63
    1fe6:	0f 92       	push	r0
    1fe8:	11 24       	eor	r1, r1
    1fea:	2f 93       	push	r18
    1fec:	3f 93       	push	r19
    1fee:	4f 93       	push	r20
    1ff0:	5f 93       	push	r21
    1ff2:	6f 93       	push	r22
    1ff4:	7f 93       	push	r23
    1ff6:	8f 93       	push	r24
    1ff8:	9f 93       	push	r25
    1ffa:	af 93       	push	r26
    1ffc:	bf 93       	push	r27
    1ffe:	ef 93       	push	r30
    2000:	ff 93       	push	r31
    2002:	df 93       	push	r29
    2004:	cf 93       	push	r28
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    200a:	80 91 7a 01 	lds	r24, 0x017A
    200e:	90 91 7b 01 	lds	r25, 0x017B
    2012:	00 97       	sbiw	r24, 0x00	; 0
    2014:	29 f0       	breq	.+10     	; 0x2020 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the overflow occur in timer0 */
		(*g_callBackPtr)();
    2016:	e0 91 7a 01 	lds	r30, 0x017A
    201a:	f0 91 7b 01 	lds	r31, 0x017B
    201e:	09 95       	icall
	}
}
    2020:	cf 91       	pop	r28
    2022:	df 91       	pop	r29
    2024:	ff 91       	pop	r31
    2026:	ef 91       	pop	r30
    2028:	bf 91       	pop	r27
    202a:	af 91       	pop	r26
    202c:	9f 91       	pop	r25
    202e:	8f 91       	pop	r24
    2030:	7f 91       	pop	r23
    2032:	6f 91       	pop	r22
    2034:	5f 91       	pop	r21
    2036:	4f 91       	pop	r20
    2038:	3f 91       	pop	r19
    203a:	2f 91       	pop	r18
    203c:	0f 90       	pop	r0
    203e:	0f be       	out	0x3f, r0	; 63
    2040:	0f 90       	pop	r0
    2042:	1f 90       	pop	r1
    2044:	18 95       	reti

00002046 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    2046:	1f 92       	push	r1
    2048:	0f 92       	push	r0
    204a:	0f b6       	in	r0, 0x3f	; 63
    204c:	0f 92       	push	r0
    204e:	11 24       	eor	r1, r1
    2050:	2f 93       	push	r18
    2052:	3f 93       	push	r19
    2054:	4f 93       	push	r20
    2056:	5f 93       	push	r21
    2058:	6f 93       	push	r22
    205a:	7f 93       	push	r23
    205c:	8f 93       	push	r24
    205e:	9f 93       	push	r25
    2060:	af 93       	push	r26
    2062:	bf 93       	push	r27
    2064:	ef 93       	push	r30
    2066:	ff 93       	push	r31
    2068:	df 93       	push	r29
    206a:	cf 93       	push	r28
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2070:	80 91 7a 01 	lds	r24, 0x017A
    2074:	90 91 7b 01 	lds	r25, 0x017B
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	29 f0       	breq	.+10     	; 0x2086 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the compare occur in timer0*/
		(*g_callBackPtr)();
    207c:	e0 91 7a 01 	lds	r30, 0x017A
    2080:	f0 91 7b 01 	lds	r31, 0x017B
    2084:	09 95       	icall
	}
}
    2086:	cf 91       	pop	r28
    2088:	df 91       	pop	r29
    208a:	ff 91       	pop	r31
    208c:	ef 91       	pop	r30
    208e:	bf 91       	pop	r27
    2090:	af 91       	pop	r26
    2092:	9f 91       	pop	r25
    2094:	8f 91       	pop	r24
    2096:	7f 91       	pop	r23
    2098:	6f 91       	pop	r22
    209a:	5f 91       	pop	r21
    209c:	4f 91       	pop	r20
    209e:	3f 91       	pop	r19
    20a0:	2f 91       	pop	r18
    20a2:	0f 90       	pop	r0
    20a4:	0f be       	out	0x3f, r0	; 63
    20a6:	0f 90       	pop	r0
    20a8:	1f 90       	pop	r1
    20aa:	18 95       	reti

000020ac <UART_init>:
 * Description:
 * UART_init work with double baud rate and enable receive and transfer with 8-bits data.
 * bandRate ranged from 10bps to 256000bps
 */
void UART_init(uint32 a_bandRate, const UART_ConfigType *config_ptr)
{
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
    20b4:	28 97       	sbiw	r28, 0x08	; 8
    20b6:	0f b6       	in	r0, 0x3f	; 63
    20b8:	f8 94       	cli
    20ba:	de bf       	out	0x3e, r29	; 62
    20bc:	0f be       	out	0x3f, r0	; 63
    20be:	cd bf       	out	0x3d, r28	; 61
    20c0:	6b 83       	std	Y+3, r22	; 0x03
    20c2:	7c 83       	std	Y+4, r23	; 0x04
    20c4:	8d 83       	std	Y+5, r24	; 0x05
    20c6:	9e 83       	std	Y+6, r25	; 0x06
    20c8:	58 87       	std	Y+8, r21	; 0x08
    20ca:	4f 83       	std	Y+7, r20	; 0x07
	uint16 ubrr_value = 0;
    20cc:	1a 82       	std	Y+2, r1	; 0x02
    20ce:	19 82       	std	Y+1, r1	; 0x01
	 * RXC, TXC, and UDRE are flag bits that set when a certain action occur.
	 * FE, DOR, and PE are flags that set when a certain error occur.
	 * U2X configured by the developer, USART Transmission Speed.
	 * MPCM = 0;
	 */
	 UCSRA = (UCSRA & 0xFD) | (config_ptr->transmissionSpeed << 1); /* transmission Speed select */
    20d0:	ab e2       	ldi	r26, 0x2B	; 43
    20d2:	b0 e0       	ldi	r27, 0x00	; 0
    20d4:	eb e2       	ldi	r30, 0x2B	; 43
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	80 81       	ld	r24, Z
    20da:	28 2f       	mov	r18, r24
    20dc:	2d 7f       	andi	r18, 0xFD	; 253
    20de:	ef 81       	ldd	r30, Y+7	; 0x07
    20e0:	f8 85       	ldd	r31, Y+8	; 0x08
    20e2:	80 81       	ld	r24, Z
    20e4:	88 2f       	mov	r24, r24
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	88 0f       	add	r24, r24
    20ea:	99 1f       	adc	r25, r25
    20ec:	82 2b       	or	r24, r18
    20ee:	8c 93       	st	X, r24
	  * RX, TXCIE, and UDRIE are interrupt enable bits. not required since the use of polling.
	  * RXEN = 1, TXEN = 1. To enable Receiver and Transmitter.
	  * RXB8 and TXB8 not required because no need for the ninth bit.
	  * UCSZ2, configured by the developer, Character Size.
	  */
	 UCSRB |= (1<< RXEN) | (1<< TXEN);
    20f0:	aa e2       	ldi	r26, 0x2A	; 42
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	ea e2       	ldi	r30, 0x2A	; 42
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	88 61       	ori	r24, 0x18	; 24
    20fc:	8c 93       	st	X, r24
	 UCSRB = (UCSRB & 0xFB) | ((config_ptr->CharacterSize & 0x04>>2)<<2);/* select character size */
    20fe:	aa e2       	ldi	r26, 0x2A	; 42
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	ea e2       	ldi	r30, 0x2A	; 42
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	28 2f       	mov	r18, r24
    210a:	2b 7f       	andi	r18, 0xFB	; 251
    210c:	ef 81       	ldd	r30, Y+7	; 0x07
    210e:	f8 85       	ldd	r31, Y+8	; 0x08
    2110:	85 81       	ldd	r24, Z+5	; 0x05
    2112:	88 2f       	mov	r24, r24
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	81 70       	andi	r24, 0x01	; 1
    2118:	90 70       	andi	r25, 0x00	; 0
    211a:	88 0f       	add	r24, r24
    211c:	99 1f       	adc	r25, r25
    211e:	88 0f       	add	r24, r24
    2120:	99 1f       	adc	r25, r25
    2122:	82 2b       	or	r24, r18
    2124:	8c 93       	st	X, r24
	 UCSRB = (UCSRB & 0x7F) | (config_ptr->RXInterruptEnable<<7); /* RX Interrupt configure */
    2126:	aa e2       	ldi	r26, 0x2A	; 42
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	ea e2       	ldi	r30, 0x2A	; 42
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	28 2f       	mov	r18, r24
    2132:	2f 77       	andi	r18, 0x7F	; 127
    2134:	ef 81       	ldd	r30, Y+7	; 0x07
    2136:	f8 85       	ldd	r31, Y+8	; 0x08
    2138:	86 81       	ldd	r24, Z+6	; 0x06
    213a:	88 2f       	mov	r24, r24
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	96 95       	lsr	r25
    2140:	98 2f       	mov	r25, r24
    2142:	88 27       	eor	r24, r24
    2144:	97 95       	ror	r25
    2146:	87 95       	ror	r24
    2148:	82 2b       	or	r24, r18
    214a:	8c 93       	st	X, r24
	 UCSRB = (UCSRB & 0xBF) | (config_ptr->TXInterruptEnable<<6); /* TX Interrupt configure */
    214c:	aa e2       	ldi	r26, 0x2A	; 42
    214e:	b0 e0       	ldi	r27, 0x00	; 0
    2150:	ea e2       	ldi	r30, 0x2A	; 42
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	80 81       	ld	r24, Z
    2156:	28 2f       	mov	r18, r24
    2158:	2f 7b       	andi	r18, 0xBF	; 191
    215a:	ef 81       	ldd	r30, Y+7	; 0x07
    215c:	f8 85       	ldd	r31, Y+8	; 0x08
    215e:	87 81       	ldd	r24, Z+7	; 0x07
    2160:	88 2f       	mov	r24, r24
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	00 24       	eor	r0, r0
    2166:	96 95       	lsr	r25
    2168:	87 95       	ror	r24
    216a:	07 94       	ror	r0
    216c:	96 95       	lsr	r25
    216e:	87 95       	ror	r24
    2170:	07 94       	ror	r0
    2172:	98 2f       	mov	r25, r24
    2174:	80 2d       	mov	r24, r0
    2176:	82 2b       	or	r24, r18
    2178:	8c 93       	st	X, r24
	 * UPM0 , UPM1 , configured by the developer, Parity Mode.
	 * USBS configured by the developer,  stop bit = 1-bit
	 * UCSZ1, UCSZ0, configured by the developer, Character Size.
	 * UCPOL = 0, set when Asynchronous mode is used.D
	 */
	UCSRC |= (1<< URSEL);
    217a:	a0 e4       	ldi	r26, 0x40	; 64
    217c:	b0 e0       	ldi	r27, 0x00	; 0
    217e:	e0 e4       	ldi	r30, 0x40	; 64
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	80 68       	ori	r24, 0x80	; 128
    2186:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xBF) | (config_ptr->mode << 6); /*  Asynchronous or  synchronous mode */
    2188:	a0 e4       	ldi	r26, 0x40	; 64
    218a:	b0 e0       	ldi	r27, 0x00	; 0
    218c:	e0 e4       	ldi	r30, 0x40	; 64
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	80 81       	ld	r24, Z
    2192:	28 2f       	mov	r18, r24
    2194:	2f 7b       	andi	r18, 0xBF	; 191
    2196:	ef 81       	ldd	r30, Y+7	; 0x07
    2198:	f8 85       	ldd	r31, Y+8	; 0x08
    219a:	81 81       	ldd	r24, Z+1	; 0x01
    219c:	88 2f       	mov	r24, r24
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	00 24       	eor	r0, r0
    21a2:	96 95       	lsr	r25
    21a4:	87 95       	ror	r24
    21a6:	07 94       	ror	r0
    21a8:	96 95       	lsr	r25
    21aa:	87 95       	ror	r24
    21ac:	07 94       	ror	r0
    21ae:	98 2f       	mov	r25, r24
    21b0:	80 2d       	mov	r24, r0
    21b2:	82 2b       	or	r24, r18
    21b4:	8c 93       	st	X, r24
	/* If the developer use synchronous mode, he can configure Clock Polarity*/
	if(BIT_IS_SET(UCSRC, 6))
    21b6:	e0 e4       	ldi	r30, 0x40	; 64
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	88 2f       	mov	r24, r24
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	80 74       	andi	r24, 0x40	; 64
    21c2:	90 70       	andi	r25, 0x00	; 0
    21c4:	00 97       	sbiw	r24, 0x00	; 0
    21c6:	61 f0       	breq	.+24     	; 0x21e0 <UART_init+0x134>
	{
		UCSRC = (UCSRC & 0xFE) | (config_ptr->clockPolarity << 0); /* Rising or falling edge */
    21c8:	a0 e4       	ldi	r26, 0x40	; 64
    21ca:	b0 e0       	ldi	r27, 0x00	; 0
    21cc:	e0 e4       	ldi	r30, 0x40	; 64
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	80 81       	ld	r24, Z
    21d2:	98 2f       	mov	r25, r24
    21d4:	9e 7f       	andi	r25, 0xFE	; 254
    21d6:	ef 81       	ldd	r30, Y+7	; 0x07
    21d8:	f8 85       	ldd	r31, Y+8	; 0x08
    21da:	82 81       	ldd	r24, Z+2	; 0x02
    21dc:	89 2b       	or	r24, r25
    21de:	8c 93       	st	X, r24
	}
	UCSRC = (UCSRC & 0xCF) | (config_ptr->parityMode << 4); /* Parity Mode select */
    21e0:	a0 e4       	ldi	r26, 0x40	; 64
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
    21e4:	e0 e4       	ldi	r30, 0x40	; 64
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	80 81       	ld	r24, Z
    21ea:	28 2f       	mov	r18, r24
    21ec:	2f 7c       	andi	r18, 0xCF	; 207
    21ee:	ef 81       	ldd	r30, Y+7	; 0x07
    21f0:	f8 85       	ldd	r31, Y+8	; 0x08
    21f2:	83 81       	ldd	r24, Z+3	; 0x03
    21f4:	88 2f       	mov	r24, r24
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	82 95       	swap	r24
    21fa:	92 95       	swap	r25
    21fc:	90 7f       	andi	r25, 0xF0	; 240
    21fe:	98 27       	eor	r25, r24
    2200:	80 7f       	andi	r24, 0xF0	; 240
    2202:	98 27       	eor	r25, r24
    2204:	82 2b       	or	r24, r18
    2206:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | (config_ptr->stopBit << 3); /* One or two parity bit */
    2208:	a0 e4       	ldi	r26, 0x40	; 64
    220a:	b0 e0       	ldi	r27, 0x00	; 0
    220c:	e0 e4       	ldi	r30, 0x40	; 64
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	28 2f       	mov	r18, r24
    2214:	27 7f       	andi	r18, 0xF7	; 247
    2216:	ef 81       	ldd	r30, Y+7	; 0x07
    2218:	f8 85       	ldd	r31, Y+8	; 0x08
    221a:	84 81       	ldd	r24, Z+4	; 0x04
    221c:	88 2f       	mov	r24, r24
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	88 0f       	add	r24, r24
    2222:	99 1f       	adc	r25, r25
    2224:	88 0f       	add	r24, r24
    2226:	99 1f       	adc	r25, r25
    2228:	88 0f       	add	r24, r24
    222a:	99 1f       	adc	r25, r25
    222c:	82 2b       	or	r24, r18
    222e:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | ((config_ptr->CharacterSize & 0x03)<<1); /* select character size */
    2230:	a0 e4       	ldi	r26, 0x40	; 64
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	e0 e4       	ldi	r30, 0x40	; 64
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	28 2f       	mov	r18, r24
    223c:	29 7f       	andi	r18, 0xF9	; 249
    223e:	ef 81       	ldd	r30, Y+7	; 0x07
    2240:	f8 85       	ldd	r31, Y+8	; 0x08
    2242:	85 81       	ldd	r24, Z+5	; 0x05
    2244:	88 2f       	mov	r24, r24
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	83 70       	andi	r24, 0x03	; 3
    224a:	90 70       	andi	r25, 0x00	; 0
    224c:	88 0f       	add	r24, r24
    224e:	99 1f       	adc	r25, r25
    2250:	82 2b       	or	r24, r18
    2252:	8c 93       	st	X, r24


	 /* Calculate the UBRR register value */
	 ubrr_value = (uint16)((F_CPU/(a_bandRate * 8UL)) - 1);
    2254:	8b 81       	ldd	r24, Y+3	; 0x03
    2256:	9c 81       	ldd	r25, Y+4	; 0x04
    2258:	ad 81       	ldd	r26, Y+5	; 0x05
    225a:	be 81       	ldd	r27, Y+6	; 0x06
    225c:	88 0f       	add	r24, r24
    225e:	99 1f       	adc	r25, r25
    2260:	aa 1f       	adc	r26, r26
    2262:	bb 1f       	adc	r27, r27
    2264:	88 0f       	add	r24, r24
    2266:	99 1f       	adc	r25, r25
    2268:	aa 1f       	adc	r26, r26
    226a:	bb 1f       	adc	r27, r27
    226c:	88 0f       	add	r24, r24
    226e:	99 1f       	adc	r25, r25
    2270:	aa 1f       	adc	r26, r26
    2272:	bb 1f       	adc	r27, r27
    2274:	9c 01       	movw	r18, r24
    2276:	ad 01       	movw	r20, r26
    2278:	80 e4       	ldi	r24, 0x40	; 64
    227a:	92 e4       	ldi	r25, 0x42	; 66
    227c:	af e0       	ldi	r26, 0x0F	; 15
    227e:	b0 e0       	ldi	r27, 0x00	; 0
    2280:	bc 01       	movw	r22, r24
    2282:	cd 01       	movw	r24, r26
    2284:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__udivmodsi4>
    2288:	da 01       	movw	r26, r20
    228a:	c9 01       	movw	r24, r18
    228c:	01 97       	sbiw	r24, 0x01	; 1
    228e:	9a 83       	std	Y+2, r25	; 0x02
    2290:	89 83       	std	Y+1, r24	; 0x01

	 /* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	 UBRRH = ubrr_value >> 8;
    2292:	e0 e4       	ldi	r30, 0x40	; 64
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	89 81       	ldd	r24, Y+1	; 0x01
    2298:	9a 81       	ldd	r25, Y+2	; 0x02
    229a:	89 2f       	mov	r24, r25
    229c:	99 27       	eor	r25, r25
    229e:	80 83       	st	Z, r24
	 UBRRL = ubrr_value;
    22a0:	e9 e2       	ldi	r30, 0x29	; 41
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	89 81       	ldd	r24, Y+1	; 0x01
    22a6:	80 83       	st	Z, r24
}
    22a8:	28 96       	adiw	r28, 0x08	; 8
    22aa:	0f b6       	in	r0, 0x3f	; 63
    22ac:	f8 94       	cli
    22ae:	de bf       	out	0x3e, r29	; 62
    22b0:	0f be       	out	0x3f, r0	; 63
    22b2:	cd bf       	out	0x3d, r28	; 61
    22b4:	cf 91       	pop	r28
    22b6:	df 91       	pop	r29
    22b8:	08 95       	ret

000022ba <UART_sendByte>:
 * Description:
 * wait until the UDR register is empty.
 * sent 8-bits data by put the data value in UDR register.
 */
void UART_sendByte(const uint8 data)
{
    22ba:	df 93       	push	r29
    22bc:	cf 93       	push	r28
    22be:	0f 92       	push	r0
    22c0:	cd b7       	in	r28, 0x3d	; 61
    22c2:	de b7       	in	r29, 0x3e	; 62
    22c4:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA, UDRE)){}
    22c6:	eb e2       	ldi	r30, 0x2B	; 43
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	88 2f       	mov	r24, r24
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	80 72       	andi	r24, 0x20	; 32
    22d2:	90 70       	andi	r25, 0x00	; 0
    22d4:	00 97       	sbiw	r24, 0x00	; 0
    22d6:	b9 f3       	breq	.-18     	; 0x22c6 <UART_sendByte+0xc>
	UDR = data;
    22d8:	ec e2       	ldi	r30, 0x2C	; 44
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	89 81       	ldd	r24, Y+1	; 0x01
    22de:	80 83       	st	Z, r24
}
    22e0:	0f 90       	pop	r0
    22e2:	cf 91       	pop	r28
    22e4:	df 91       	pop	r29
    22e6:	08 95       	ret

000022e8 <UART_recieveByte>:
 * Description:
 * wait until the UDR register receive all 8-bits data.
 * Return this data to be saved in another variable.
 */
uint8 UART_recieveByte(void)
{
    22e8:	df 93       	push	r29
    22ea:	cf 93       	push	r28
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA, RXC)){}
    22f0:	eb e2       	ldi	r30, 0x2B	; 43
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	88 23       	and	r24, r24
    22f8:	dc f7       	brge	.-10     	; 0x22f0 <UART_recieveByte+0x8>
	return UDR;
    22fa:	ec e2       	ldi	r30, 0x2C	; 44
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	80 81       	ld	r24, Z
}
    2300:	cf 91       	pop	r28
    2302:	df 91       	pop	r29
    2304:	08 95       	ret

00002306 <UART_sendString>:
 * Description:
 * This function take a string in a pointer.
 * Then loop on each character to send each one byte by byte.
 */
void UART_sendString(const uint8* a_str_ptr)
{
    2306:	df 93       	push	r29
    2308:	cf 93       	push	r28
    230a:	00 d0       	rcall	.+0      	; 0x230c <UART_sendString+0x6>
    230c:	0f 92       	push	r0
    230e:	cd b7       	in	r28, 0x3d	; 61
    2310:	de b7       	in	r29, 0x3e	; 62
    2312:	9b 83       	std	Y+3, r25	; 0x03
    2314:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	/* the pointer will point for each character and sent it individually until the pointer reach #*/
	for(i=0; *a_str_ptr != '\0'; i++)
    2316:	19 82       	std	Y+1, r1	; 0x01
    2318:	0d c0       	rjmp	.+26     	; 0x2334 <UART_sendString+0x2e>
	{
		UART_sendByte(*a_str_ptr);
    231a:	ea 81       	ldd	r30, Y+2	; 0x02
    231c:	fb 81       	ldd	r31, Y+3	; 0x03
    231e:	80 81       	ld	r24, Z
    2320:	0e 94 5d 11 	call	0x22ba	; 0x22ba <UART_sendByte>
		a_str_ptr++;
    2324:	8a 81       	ldd	r24, Y+2	; 0x02
    2326:	9b 81       	ldd	r25, Y+3	; 0x03
    2328:	01 96       	adiw	r24, 0x01	; 1
    232a:	9b 83       	std	Y+3, r25	; 0x03
    232c:	8a 83       	std	Y+2, r24	; 0x02
 */
void UART_sendString(const uint8* a_str_ptr)
{
	uint8 i;
	/* the pointer will point for each character and sent it individually until the pointer reach #*/
	for(i=0; *a_str_ptr != '\0'; i++)
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	8f 5f       	subi	r24, 0xFF	; 255
    2332:	89 83       	std	Y+1, r24	; 0x01
    2334:	ea 81       	ldd	r30, Y+2	; 0x02
    2336:	fb 81       	ldd	r31, Y+3	; 0x03
    2338:	80 81       	ld	r24, Z
    233a:	88 23       	and	r24, r24
    233c:	71 f7       	brne	.-36     	; 0x231a <UART_sendString+0x14>
	{
		UART_sendByte(*a_str_ptr);
		a_str_ptr++;
	}
}
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	cf 91       	pop	r28
    2346:	df 91       	pop	r29
    2348:	08 95       	ret

0000234a <UART_recieveString>:
 * This function receive first byte in a string by pointer to character.
 * Then if it is not equal #, receive the next byte in the pointer++ until the value became #.
 * At the end of this string, replace the # with NULL '0\'
 */
void UART_recieveString(uint8 *a_str_ptr)
{
    234a:	0f 93       	push	r16
    234c:	1f 93       	push	r17
    234e:	df 93       	push	r29
    2350:	cf 93       	push	r28
    2352:	00 d0       	rcall	.+0      	; 0x2354 <UART_recieveString+0xa>
    2354:	0f 92       	push	r0
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
    235a:	9b 83       	std	Y+3, r25	; 0x03
    235c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    235e:	19 82       	std	Y+1, r1	; 0x01
	/* Receive the first byte */
	a_str_ptr[i] = UART_recieveByte();
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	28 2f       	mov	r18, r24
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	8a 81       	ldd	r24, Y+2	; 0x02
    2368:	9b 81       	ldd	r25, Y+3	; 0x03
    236a:	8c 01       	movw	r16, r24
    236c:	02 0f       	add	r16, r18
    236e:	13 1f       	adc	r17, r19
    2370:	0e 94 74 11 	call	0x22e8	; 0x22e8 <UART_recieveByte>
    2374:	f8 01       	movw	r30, r16
    2376:	80 83       	st	Z, r24
    2378:	0f c0       	rjmp	.+30     	; 0x2398 <UART_recieveString+0x4e>

	/* check on the first byte. if it is not equal # receive the next one */
	while(a_str_ptr[i] != '#')
	{
		i++;
    237a:	89 81       	ldd	r24, Y+1	; 0x01
    237c:	8f 5f       	subi	r24, 0xFF	; 255
    237e:	89 83       	std	Y+1, r24	; 0x01
		a_str_ptr[i] = UART_recieveByte();
    2380:	89 81       	ldd	r24, Y+1	; 0x01
    2382:	28 2f       	mov	r18, r24
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	9b 81       	ldd	r25, Y+3	; 0x03
    238a:	8c 01       	movw	r16, r24
    238c:	02 0f       	add	r16, r18
    238e:	13 1f       	adc	r17, r19
    2390:	0e 94 74 11 	call	0x22e8	; 0x22e8 <UART_recieveByte>
    2394:	f8 01       	movw	r30, r16
    2396:	80 83       	st	Z, r24
	uint8 i = 0;
	/* Receive the first byte */
	a_str_ptr[i] = UART_recieveByte();

	/* check on the first byte. if it is not equal # receive the next one */
	while(a_str_ptr[i] != '#')
    2398:	89 81       	ldd	r24, Y+1	; 0x01
    239a:	28 2f       	mov	r18, r24
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	8a 81       	ldd	r24, Y+2	; 0x02
    23a0:	9b 81       	ldd	r25, Y+3	; 0x03
    23a2:	fc 01       	movw	r30, r24
    23a4:	e2 0f       	add	r30, r18
    23a6:	f3 1f       	adc	r31, r19
    23a8:	80 81       	ld	r24, Z
    23aa:	83 32       	cpi	r24, 0x23	; 35
    23ac:	31 f7       	brne	.-52     	; 0x237a <UART_recieveString+0x30>
		i++;
		a_str_ptr[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	a_str_ptr[i] = '\0';
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
    23b0:	28 2f       	mov	r18, r24
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	8a 81       	ldd	r24, Y+2	; 0x02
    23b6:	9b 81       	ldd	r25, Y+3	; 0x03
    23b8:	fc 01       	movw	r30, r24
    23ba:	e2 0f       	add	r30, r18
    23bc:	f3 1f       	adc	r31, r19
    23be:	10 82       	st	Z, r1
}
    23c0:	0f 90       	pop	r0
    23c2:	0f 90       	pop	r0
    23c4:	0f 90       	pop	r0
    23c6:	cf 91       	pop	r28
    23c8:	df 91       	pop	r29
    23ca:	1f 91       	pop	r17
    23cc:	0f 91       	pop	r16
    23ce:	08 95       	ret

000023d0 <__udivmodsi4>:
    23d0:	a1 e2       	ldi	r26, 0x21	; 33
    23d2:	1a 2e       	mov	r1, r26
    23d4:	aa 1b       	sub	r26, r26
    23d6:	bb 1b       	sub	r27, r27
    23d8:	fd 01       	movw	r30, r26
    23da:	0d c0       	rjmp	.+26     	; 0x23f6 <__udivmodsi4_ep>

000023dc <__udivmodsi4_loop>:
    23dc:	aa 1f       	adc	r26, r26
    23de:	bb 1f       	adc	r27, r27
    23e0:	ee 1f       	adc	r30, r30
    23e2:	ff 1f       	adc	r31, r31
    23e4:	a2 17       	cp	r26, r18
    23e6:	b3 07       	cpc	r27, r19
    23e8:	e4 07       	cpc	r30, r20
    23ea:	f5 07       	cpc	r31, r21
    23ec:	20 f0       	brcs	.+8      	; 0x23f6 <__udivmodsi4_ep>
    23ee:	a2 1b       	sub	r26, r18
    23f0:	b3 0b       	sbc	r27, r19
    23f2:	e4 0b       	sbc	r30, r20
    23f4:	f5 0b       	sbc	r31, r21

000023f6 <__udivmodsi4_ep>:
    23f6:	66 1f       	adc	r22, r22
    23f8:	77 1f       	adc	r23, r23
    23fa:	88 1f       	adc	r24, r24
    23fc:	99 1f       	adc	r25, r25
    23fe:	1a 94       	dec	r1
    2400:	69 f7       	brne	.-38     	; 0x23dc <__udivmodsi4_loop>
    2402:	60 95       	com	r22
    2404:	70 95       	com	r23
    2406:	80 95       	com	r24
    2408:	90 95       	com	r25
    240a:	9b 01       	movw	r18, r22
    240c:	ac 01       	movw	r20, r24
    240e:	bd 01       	movw	r22, r26
    2410:	cf 01       	movw	r24, r30
    2412:	08 95       	ret

00002414 <__prologue_saves__>:
    2414:	2f 92       	push	r2
    2416:	3f 92       	push	r3
    2418:	4f 92       	push	r4
    241a:	5f 92       	push	r5
    241c:	6f 92       	push	r6
    241e:	7f 92       	push	r7
    2420:	8f 92       	push	r8
    2422:	9f 92       	push	r9
    2424:	af 92       	push	r10
    2426:	bf 92       	push	r11
    2428:	cf 92       	push	r12
    242a:	df 92       	push	r13
    242c:	ef 92       	push	r14
    242e:	ff 92       	push	r15
    2430:	0f 93       	push	r16
    2432:	1f 93       	push	r17
    2434:	cf 93       	push	r28
    2436:	df 93       	push	r29
    2438:	cd b7       	in	r28, 0x3d	; 61
    243a:	de b7       	in	r29, 0x3e	; 62
    243c:	ca 1b       	sub	r28, r26
    243e:	db 0b       	sbc	r29, r27
    2440:	0f b6       	in	r0, 0x3f	; 63
    2442:	f8 94       	cli
    2444:	de bf       	out	0x3e, r29	; 62
    2446:	0f be       	out	0x3f, r0	; 63
    2448:	cd bf       	out	0x3d, r28	; 61
    244a:	09 94       	ijmp

0000244c <__epilogue_restores__>:
    244c:	2a 88       	ldd	r2, Y+18	; 0x12
    244e:	39 88       	ldd	r3, Y+17	; 0x11
    2450:	48 88       	ldd	r4, Y+16	; 0x10
    2452:	5f 84       	ldd	r5, Y+15	; 0x0f
    2454:	6e 84       	ldd	r6, Y+14	; 0x0e
    2456:	7d 84       	ldd	r7, Y+13	; 0x0d
    2458:	8c 84       	ldd	r8, Y+12	; 0x0c
    245a:	9b 84       	ldd	r9, Y+11	; 0x0b
    245c:	aa 84       	ldd	r10, Y+10	; 0x0a
    245e:	b9 84       	ldd	r11, Y+9	; 0x09
    2460:	c8 84       	ldd	r12, Y+8	; 0x08
    2462:	df 80       	ldd	r13, Y+7	; 0x07
    2464:	ee 80       	ldd	r14, Y+6	; 0x06
    2466:	fd 80       	ldd	r15, Y+5	; 0x05
    2468:	0c 81       	ldd	r16, Y+4	; 0x04
    246a:	1b 81       	ldd	r17, Y+3	; 0x03
    246c:	aa 81       	ldd	r26, Y+2	; 0x02
    246e:	b9 81       	ldd	r27, Y+1	; 0x01
    2470:	ce 0f       	add	r28, r30
    2472:	d1 1d       	adc	r29, r1
    2474:	0f b6       	in	r0, 0x3f	; 63
    2476:	f8 94       	cli
    2478:	de bf       	out	0x3e, r29	; 62
    247a:	0f be       	out	0x3f, r0	; 63
    247c:	cd bf       	out	0x3d, r28	; 61
    247e:	ed 01       	movw	r28, r26
    2480:	08 95       	ret

00002482 <_exit>:
    2482:	f8 94       	cli

00002484 <__stop_program>:
    2484:	ff cf       	rjmp	.-2      	; 0x2484 <__stop_program>
